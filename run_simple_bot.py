#!/usr/bin/env python3
"""
ü§ñ –ó–∞–ø—É—Å–∫ –ò–ò-–ò–≤–∞–Ω (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
–¢–æ–ª—å–∫–æ /start –∏ –≤–æ–ø—Ä–æ—Å—ã - –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –∏ –º–µ–Ω—é
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    required_packages = [
        'aiogram',
        'openai', 
        'httpx',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_packages:
            print(f"   ‚Ä¢ {package}")
        print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"   pip install {' '.join(missing_packages)}")
        return False
    
    return True

def check_env_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    required_vars = {
        'TELEGRAM_BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
        'OPENAI_API_KEY': 'API –∫–ª—é—á OpenAI'
    }
    
    missing_vars = []
    
    for var, description in required_vars.items():
        if not os.getenv(var):
            missing_vars.append((var, description))
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var, desc in missing_vars:
            print(f"   ‚Ä¢ {var} - {desc}")
        
        print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("TELEGRAM_BOT_TOKEN=your_bot_token_here")
        print("OPENAI_API_KEY=your_openai_key_here")
        return False
    
    return True

def show_banner():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë      ü§ñ –ò–ò-–ò–≤–∞–Ω - –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è       ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:        ‚ïë
‚ïë  /start ‚Üí –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å ‚Üí –ø–æ–ª—É—á–∏—Ç—å  ‚ïë
‚ïë  –æ—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def show_interface():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:")
    print("   1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É /start")
    print("   2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å")
    print("   3. –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π")
    print("")
    print("üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥—ã")  
    print("   ‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω —Å —Ä–∞–º–∫–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏")
    print("   ‚Ä¢ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏")
    print("   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞ –∏ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–µ–ª")

def show_config():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    from dotenv import load_dotenv
    load_dotenv()
    
    print("\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    
    model = os.getenv('OPENAI_MODEL', 'gpt-5-mini')
    print(f"   ü§ñ OpenAI –º–æ–¥–µ–ª—å: {model}")
    
    animation = os.getenv('USE_STATUS_ANIMATION', '1')
    status_type = "–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" if animation == '1' else "–ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"
    print(f"   ‚ú® –°—Ç–∞—Ç—É—Å—ã: {status_type}")
    
    web_search = "–æ—Ç–∫–ª—é—á–µ–Ω" if os.getenv('DISABLE_WEB', '0') == '1' else "–≤–∫–ª—é—á–µ–Ω"
    print(f"   üîç –í–µ–±-–ø–æ–∏—Å–∫: {web_search}")
    
    proxy = os.getenv('TELEGRAM_PROXY_URL')
    if proxy:
        clean_proxy = proxy.split('@')[-1] if '@' in proxy else proxy
        print(f"   üåê –ü—Ä–æ–∫—Å–∏: {clean_proxy}")
    else:
        print("   üåê –ü—Ä–æ–∫—Å–∏: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

async def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞"""
    try:
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞...")
        
        from src.core.main_simple import main
        await main()
        
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    show_banner()
    show_interface()
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    if not check_requirements():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫")
        return 1
    
    print("‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    if not check_env_variables():
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫")
        return 1
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    show_config()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å uvloop –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        try:
            import uvloop
            uvloop.install()
            print("üöÄ –ò—Å–ø–æ–ª—å–∑—É—é uvloop –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        except ImportError:
            print("‚ö° uvloop –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π event loop")
        
        asyncio.run(run_bot())
        
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return 0
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
