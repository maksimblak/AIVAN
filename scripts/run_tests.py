#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ AIVAN —Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é
"""

import os
import subprocess
import sys
from pathlib import Path


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
os.environ["PYTHONPATH"] = str(project_root)


def run_command(command: str, description: str) -> bool:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"\nüîç {description}")
    print("-" * 50)

    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            cwd=project_root
        )

        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞")
            if result.stderr.strip():
                print(result.stderr)
            if result.stdout.strip():
                print(result.stdout)

        return result.returncode == 0

    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ AIVAN Test Suite")
    print("=" * 50)

    success_count = 0
    total_count = 0

    has_tests = (project_root / "tests").exists()
    commands = []

    if (project_root / "pyproject.toml").exists():
        commands.append(("poetry check", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ pyproject.toml"))

    if has_tests:
        commands.append(("poetry run pytest tests -v", "–ó–∞–ø—É—Å–∫ pytest"))
        commands.append(("poetry run pytest --cov=src --cov-report=term-missing", "–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"))

    if (project_root / "src").exists():
        commands.append(("poetry run ruff check src tests", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ (Ruff)"))
        commands.append(("poetry run black --check src tests", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Black)"))
        commands.append(("poetry run mypy src", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (MyPy)"))

    for command, description in commands:
        total_count += 1
        if run_command(command, description):
            success_count += 1

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∑–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    validation_cmd = "poetry run python scripts/validate_project.py"
    if (project_root / "scripts" / "validate_project.py").exists():
        total_count += 1
        if run_command(validation_cmd, "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"):
            success_count += 1

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_count}/{total_count}")

    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_count - success_count}")
        return 1


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
