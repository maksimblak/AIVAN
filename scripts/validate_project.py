#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ AIVAN
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import asyncio
import os
import sys
import tempfile
from pathlib import Path

from src.core.app_context import get_settings, set_settings

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


async def validate_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    try:
        import aiogram
        import openai
        import aiosqlite
        import httpx
        import pytest
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    optional_deps = {
        "redis": "Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        "prometheus_client": "Prometheus –º–µ—Ç—Ä–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        "psutil": "–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    }

    for dep, desc in optional_deps.items():
        try:
            __import__(dep)
            print(f"‚úÖ {desc}")
        except ImportError:
            print(f"‚ö†Ô∏è  {desc} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    return True


async def validate_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        from src.core.db_advanced import DatabaseAdvanced

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
            db_path = tmp.name

        try:
            db = DatabaseAdvanced(db_path, max_connections=2)
            await db.init()

            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await db.ensure_user(123, default_trial=10, is_admin=False)
            assert user.user_id == 123

            # –¢–µ—Å—Ç –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞ trial
            result = await db.decrement_trial(123)
            assert result is True

            await db.close()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True

        finally:
            if os.path.exists(db_path):
                os.unlink(db_path)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def validate_di_container():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")

    container = None
    try:
        from src.core.di_container import create_container
        from src.core.settings import AppSettings
        from src.core.db_advanced import DatabaseAdvanced

        settings = get_settings()
        set_settings(settings)
        container = create_container(settings)
        assert container is not None

        resolved_settings = container.get(AppSettings)
        assert resolved_settings is settings

        db = container.get(DatabaseAdvanced)
        await db.init()
        await db.close()

        print("‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
        return False

    finally:
        if container is not None:
            try:
                await container.cleanup()
            except Exception:
                pass



async def validate_performance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    try:
        from src.core.performance import (
            PerformanceMetrics, LRUCache, timing,
            get_performance_summary
        )

        # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
        metrics = PerformanceMetrics()
        metrics.record_timing("test", 0.1)
        avg = metrics.get_average_timing("test")
        assert avg == 0.1

        # –¢–µ—Å—Ç –∫–µ—à–∞
        cache = LRUCache(max_size=10, ttl_seconds=3600)
        await cache.set("test_key", "test_value")
        value = await cache.get("test_key")
        assert value == "test_value"

        # –¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ timing
        @timing("test_function")
        async def test_func():
            await asyncio.sleep(0.01)
            return "result"

        result = await test_func()
        assert result == "result"

        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


async def validate_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pyproject.toml
    pyproject_path = project_root / "pyproject.toml"
    if not pyproject_path.exists():
        print("‚ùå –§–∞–π–ª pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    with open(pyproject_path, 'r', encoding='utf-8') as f:
        content = f.read()
        if "[project]" in content and "dependencies" in content:
            print("‚úÖ pyproject.toml –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ùå pyproject.toml –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤
    dockerfile_path = project_root / "Dockerfile"
    if dockerfile_path.exists():
        print("‚úÖ Dockerfile –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå Dockerfile –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False

    docker_compose_path = project_root / "docker-compose.yml"
    if docker_compose_path.exists():
        print("‚úÖ docker-compose.yml –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå docker-compose.yml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ README
    readme_path = project_root / "README.md"
    if readme_path.exists():
        print("‚úÖ README.md –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå README.md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False

    return True


async def validate_tests():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤...")

    tests_dir = project_root / "tests"
    if not tests_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤
    test_files = [
        "conftest.py",
        "unit/test_di_container.py",
        "unit/test_db_advanced.py",
        "unit/test_access_service.py"
    ]

    missing_files = []
    for test_file in test_files:
        if not (tests_dir / test_file).exists():
            missing_files.append(test_file)

    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {missing_files}")
        return False

    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üöÄ AIVAN Project Validation")
    print("=" * 50)

    validators = [
        validate_dependencies,
        validate_configuration,
        validate_database,
        validate_di_container,
        validate_performance,
        validate_tests,
    ]

    results = []
    for validator in validators:
        try:
            result = await validator()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {validator.__name__}: {e}")
            results.append(False)

    print("\n" + "=" * 50)
    passed = sum(results)
    total = len(results)

    if passed == total:
        print(f"üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! ({passed}/{total})")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return 0
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}")
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        sys.exit(1)