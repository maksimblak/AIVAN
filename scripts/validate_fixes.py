#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ AIVAN
"""

import re
import sys
from pathlib import Path


def check_user_message_fixes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è user_message ‚Üí user_text"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ LLM –≤—ã–∑–æ–≤–æ–≤...")

    files_to_check = [
        "src/documents/translator.py",
        "src/documents/summarizer.py",
        "src/documents/risk_analyzer.py",
        "src/documents/document_chat.py",
    ]

    issues = []
    for file_path in files_to_check:
        path = Path(file_path)
        if path.exists():
            content = path.read_text(encoding="utf-8")
            # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã user_message= –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ask_legal
            pattern = r"ask_legal\([^)]*user_message="
            matches = re.findall(pattern, content)
            if matches:
                issues.append(f"‚ùå {file_path}: –Ω–∞–π–¥–µ–Ω—ã –≤—ã–∑–æ–≤—ã —Å user_message")
            else:
                print(f"‚úÖ {file_path}: user_message –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            issues.append(f"‚ö†Ô∏è  {file_path}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return len(issues) == 0, issues


def check_path_traversal_fix():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è path traversal"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è path traversal...")

    base_file = Path("src/documents/base.py")
    if not base_file.exists():
        return False, ["‚ùå src/documents/base.py –Ω–µ –Ω–∞–π–¥–µ–Ω"]

    content = base_file.read_text(encoding="utf-8")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ _sanitize_filename
    if "_sanitize_filename" not in content:
        return False, ["‚ùå –ú–µ—Ç–æ–¥ _sanitize_filename –Ω–µ –Ω–∞–π–¥–µ–Ω"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –≤ save_document
    if "self._sanitize_filename(original_name)" not in content:
        return False, ["‚ùå _sanitize_filename –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ save_document"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–π –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–¥ –∑–∞–º–µ–Ω–µ–Ω
    if "original_name.replace(' ', '_')" in content:
        return False, ["‚ùå –û—Å—Ç–∞–ª—Å—è –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–¥ –∑–∞–º–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–≤"]

    print("‚úÖ Path traversal –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    return True, []


def check_html_markdown_fixes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTML/Markdown"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTML/Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

    manager_file = Path("src/documents/document_manager.py")
    if not manager_file.exists():
        return False, ["‚ùå src/documents/document_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω"]

    content = manager_file.read_text(encoding="utf-8")

    issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ markdown ** –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ HTML <b>
    markdown_patterns = [
        r"\*\*[^*]+\*\*",  # **—Ç–µ–∫—Å—Ç**
        r"\*[^*]+\*(?!\*)",  # *—Ç–µ–∫—Å—Ç* (–Ω–æ –Ω–µ **)
    ]

    for pattern in markdown_patterns:
        matches = re.findall(pattern, content)
        if matches:
            # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å—Ç—Ä–æ–∫–∏
            actual_issues = []
            lines = content.split("\n")
            for i, line in enumerate(lines):
                if re.search(pattern, line) and not line.strip().startswith("#") and 'f"' in line:
                    actual_issues.append(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line.strip()}")

            if actual_issues:
                issues.extend(actual_issues)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ html_escape
    if "html_escape" not in content:
        issues.append("‚ùå html_escape –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∏ –≤ format_result_for_telegram –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
    if "**–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**" in content:
        issues.append("‚ùå –û—Å—Ç–∞–ª—Å—è markdown –≤ error —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")

    if issues:
        return False, issues
    else:
        print("‚úÖ HTML/Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True, []


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üö® –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π AIVAN")
    print("=" * 50)

    all_checks = [
        ("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã LLM –≤—ã–∑–æ–≤–æ–≤", check_user_message_fixes),
        ("Path traversal —É—è–∑–≤–∏–º–æ—Å—Ç—å", check_path_traversal_fix),
        ("HTML/Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", check_html_markdown_fixes),
    ]

    total_passed = 0
    total_checks = len(all_checks)

    for check_name, check_func in all_checks:
        try:
            passed, issues = check_func()
            if passed:
                total_passed += 1
            else:
                print(f"\n‚ùå {check_name} - –ü–†–û–ë–õ–ï–ú–´:")
                for issue in issues:
                    print(f"   {issue}")
        except Exception as e:
            print(f"\nüí• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{check_name}': {e}")

    print("\n" + "=" * 50)
    if total_passed == total_checks:
        print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return 0
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_passed}/{total_checks}")
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return 1


if __name__ == "__main__":
    sys.exit(main())
