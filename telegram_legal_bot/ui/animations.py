# telegram_legal_bot/ui/animations.py
"""
–ê–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX –±–æ—Ç–∞.
"""

import asyncio
from typing import List, Optional
from aiogram import types
from aiogram.exceptions import TelegramBadRequest


class BotAnimations:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –≤ –±–æ—Ç–µ."""
    
    @staticmethod
    async def typing_animation(message: types.Message, duration: float = 3.0) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏."""
        try:
            chat_id = message.chat.id
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã ChatActionSender
            # await message.bot.send_chat_action(chat_id, "typing")
            await asyncio.sleep(duration)
        except Exception:
            pass
    
    @staticmethod
    async def progress_message(
        message: types.Message, 
        steps: List[str], 
        delay: float = 1.5
    ) -> Optional[types.Message]:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            progress_msg = await message.answer(steps[0], parse_mode="MarkdownV2")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
            for step in steps[1:]:
                await asyncio.sleep(delay)
                try:
                    await progress_msg.edit_text(step, parse_mode="MarkdownV2")
                except TelegramBadRequest:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    progress_msg = await message.answer(step, parse_mode="MarkdownV2")
                except Exception:
                    # Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        await progress_msg.edit_text(step, parse_mode=None)
                    except Exception:
                        progress_msg = await message.answer(step, parse_mode=None)
            
            return progress_msg
            
        except Exception:
            return None
    
    @staticmethod
    async def loading_dots(
        message: types.Message, 
        base_text: str, 
        duration: float = 4.0
    ) -> Optional[types.Message]:
        """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏."""
        try:
            loading_msg = await message.answer(base_text, parse_mode="MarkdownV2")
            
            dots = ["", ".", "..", "..."]
            steps = int(duration / 0.5)
            
            for i in range(steps):
                dot_index = i % len(dots)
                text = f"{base_text}{dots[dot_index]}"
                
                await asyncio.sleep(0.5)
                try:
                    await loading_msg.edit_text(text, parse_mode="MarkdownV2")
                except TelegramBadRequest:
                    try:
                        await loading_msg.edit_text(text, parse_mode=None)
                    except Exception:
                        break
                except Exception:
                    break
            
            return loading_msg
            
        except Exception:
            return None
    
    @staticmethod
    async def countdown_timer(
        message: types.Message, 
        seconds: int, 
        prefix: str = "–û—Å—Ç–∞–ª–æ—Å—å: "
    ) -> None:
        """–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç."""
        try:
            timer_msg = await message.answer(f"{prefix}{seconds} —Å–µ–∫.")
            
            for remaining in range(seconds - 1, 0, -1):
                await asyncio.sleep(1)
                try:
                    await timer_msg.edit_text(f"{prefix}{remaining} —Å–µ–∫.")
                except Exception:
                    break
            
            await asyncio.sleep(1)
            try:
                await timer_msg.edit_text("‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!")
            except Exception:
                pass
                
        except Exception:
            pass
    
    @staticmethod
    async def celebration_effect(message: types.Message, text: str) -> None:
        """–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è."""
        celebration_frames = [
            f"üéâ {text} üéâ",
            f"‚ú® {text} ‚ú®", 
            f"üéä {text} üéä",
            f"üåü {text} üåü",
            f"üéâ {text} üéâ"
        ]
        
        try:
            celebration_msg = await message.answer(celebration_frames[0])
            
            for frame in celebration_frames[1:]:
                await asyncio.sleep(0.8)
                try:
                    await celebration_msg.edit_text(frame)
                except Exception:
                    break
                    
        except Exception:
            pass
    
    @staticmethod
    def get_thinking_frames() -> List[str]:
        """–ö–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è."""
        return [
            "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...",
            "üß† –†–∞–∑–º—ã—à–ª—è—é...", 
            "üí≠ –û–±–¥—É–º—ã–≤–∞—é...",
            "üîç –ò–∑—É—á–∞—é...",
            "üìö –ò—â—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...",
            "‚öñÔ∏è –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
            "‚úçÔ∏è –û—Ñ–æ—Ä–º–ª—è—é..."
        ]
    
    @staticmethod
    def get_loading_frames() -> List[str]:
        """–ö–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏."""
        return [
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞",
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ ‚ñ™Ô∏è",
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ ‚ñ™Ô∏è‚ñ™Ô∏è", 
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ ‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è",
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ ‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è",
            "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ ‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è"
        ]
    
    @staticmethod
    async def smooth_message_transition(
        old_message: types.Message,
        new_text: str, 
        parse_mode: Optional[str] = "MarkdownV2"
    ) -> Optional[types.Message]:
        """–ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await old_message.edit_text(new_text, parse_mode=parse_mode)
            return old_message
        except TelegramBadRequest:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                return await old_message.answer(new_text, parse_mode=parse_mode)
            except Exception:
                # Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                return await old_message.answer(new_text, parse_mode=None)
        except Exception:
            return None
    
    @staticmethod
    async def typewriter_effect(
        message: types.Message, 
        text: str, 
        delay: float = 0.05
    ) -> Optional[types.Message]:
        """–≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–∏."""
        try:
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–º
            if len(text) > 100:
                delay = 0.02
            
            current_text = ""
            msg = await message.answer("_")
            
            for char in text:
                current_text += char
                await asyncio.sleep(delay)
                try:
                    await msg.edit_text(current_text)
                except TelegramBadRequest:
                    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if len(current_text) % 10 == 0:
                        try:
                            await msg.edit_text(current_text)
                        except Exception:
                            break
                except Exception:
                    break
            
            return msg
            
        except Exception:
            # –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await message.answer(text)
    
    @staticmethod
    async def pulsing_message(
        message: types.Message,
        text: str,
        pulses: int = 3
    ) -> None:
        """–ü—É–ª—å—Å–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        try:
            pulse_msg = await message.answer(text)
            
            for _ in range(pulses):
                # "–ó–∞—Ç—É—Ö–∞–Ω–∏–µ" - –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–æ—á–∫–∏
                await asyncio.sleep(0.5)
                try:
                    await pulse_msg.edit_text("‚Ä¢ ‚Ä¢ ‚Ä¢")
                except Exception:
                    break
                
                # "–ü–æ—è–≤–ª–µ–Ω–∏–µ" - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                await asyncio.sleep(0.5) 
                try:
                    await pulse_msg.edit_text(text)
                except Exception:
                    break
                    
        except Exception:
            pass
