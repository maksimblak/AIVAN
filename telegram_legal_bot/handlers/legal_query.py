from __future__ import annotations

import asyncio
import contextlib
import logging
import time
from collections import defaultdict, deque
from dataclasses import dataclass, field
from typing import Deque, Dict, Optional

from aiogram import Router, types, F
from aiogram.enums import ChatAction, ParseMode
from aiogram.exceptions import TelegramBadRequest

from telegram_legal_bot.config import Settings
from telegram_legal_bot.services.openai_service import OpenAIService, LegalAdvice
from telegram_legal_bot.utils.message_formatter import build_legal_reply, chunk_markdown_v2

logger = logging.getLogger(__name__)
router = Router()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ per-user rate limit (in-memory, 1h –æ–∫–Ω–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dataclass
class RateWindow:
    timestamps: Deque[float] = field(default_factory=deque)

    def hit(self, now: float, max_per_hour: int) -> bool:
        hour_ago = now - 3600.0
        while self.timestamps and self.timestamps[0] < hour_ago:
            self.timestamps.popleft()
        if len(self.timestamps) >= max_per_hour:
            return False
        self.timestamps.append(now)
        return True


_rate_map: Dict[int, RateWindow] = defaultdict(RateWindow)
_history: Dict[int, Deque[str]] = defaultdict(lambda: deque(maxlen=5))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DI —á–µ—Ä–µ–∑ module-level singletons ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_settings: Optional[Settings] = None
_ai: Optional[OpenAIService] = None


def setup_context(settings: Settings, ai: OpenAIService) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤."""
    global _settings, _ai
    _settings = settings
    _ai = ai
    logger.info("legal_query: –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


def _looks_like_spam(text: str) -> bool:
    t = text.replace(" ", "")
    if len(t) > 20:
        from collections import Counter

        c = Counter(t)
        if c.most_common(1)[0][1] / len(t) > 0.6:
            return True
    words = [w for w in text.lower().split() if w]
    rep = 1
    for i in range(1, len(words)):
        if words[i] == words[i - 1]:
            rep += 1
            if rep >= 6:
                return True
        else:
            rep = 1
    return False


@router.message(F.text & ~F.text.startswith("/"))
async def handle_legal_query(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥:
      - –≤–∞–ª–∏–¥–∞—Ü–∏—è
      - rate-limit
      - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
      - –∑–∞–ø—Ä–æ—Å –∫ GPT-5
      - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞–º–∏ (—Å —Ñ–æ–ª–ª–±–µ–∫–æ–º –Ω–∞ plain text)
    """
    if _settings is None or _ai is None:
        logger.error("legal_query: setup_context –Ω–µ –≤—ã–∑–≤–∞–Ω –¥–æ —Å—Ç–∞—Ä—Ç–∞ polling")
        await message.answer(
            "–°–µ—Ä–≤–∏—Å –µ—â—ë –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode=None,
        )
        return

    text = (message.text or "").strip()
    if len(text) < _settings.min_question_length:
        await message.answer(
            f"üßê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º {_settings.min_question_length} —Å–∏–º–≤–æ–ª–æ–≤).",
            parse_mode=None,
        )
        return
    if _looks_like_spam(text):
        await message.answer(
            "ü§ñ –ü–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º/—Ñ–ª—É–¥. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å.",
            parse_mode=None,
        )
        return

    user_id = message.from_user.id if message.from_user else 0
    now = time.time()
    if not _rate_map[user_id].hit(now, _settings.max_requests_per_hour):
        await message.answer("‚è≥ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á–∞—Å –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=None)
        return

    # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    with contextlib.suppress(Exception):
        await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

    # –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    try:
        advice: LegalAdvice = await _ai.generate_legal_advice(
            user_question=text, short_history=list(_history[user_id])
        )
    except asyncio.TimeoutError:
        await message.answer("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=None)
        return
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ OpenAI: %s", e)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=None)
        return

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + –Ω–∞–¥—ë–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    reply = build_legal_reply(advice.summary, advice.details, advice.laws)
    for i, ch in enumerate(chunk_markdown_v2(reply)):
        prefix = "" if i == 0 else "‚Ä¶–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n\n"
        text_part = prefix + ch
        try:
            await message.answer(
                text_part,
                parse_mode=ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True,
            )
        except TelegramBadRequest:
            # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º parse_mode, –∏–Ω–∞—á–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π MARKDOWN_V2
            plain = text_part.replace("\\", "").replace("*", "").replace("_", "")
            await message.answer(plain, parse_mode=None, disable_web_page_preview=True)

    if advice.summary:
        _history[user_id].append(advice.summary)
