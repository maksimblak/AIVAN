from __future__ import annotations

import logging
from collections import defaultdict, deque
from typing import Deque, Dict, List, Optional

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.chat_action import ChatActionSender  # aiogram v3


from telegram_legal_bot.config import Settings
from telegram_legal_bot.services import OpenAIService
from telegram_legal_bot.utils.rate_limiter import RateLimiter
from telegram_legal_bot.utils.message_formatter import (
        build_legal_reply,
        chunk_markdown_v2,)


router = Router(name="legal_query")
log = logging.getLogger("legal_query")

# –ö–æ–Ω—Ç–µ–∫—Å—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏–∑ main.py
_settings: Optional[Settings] = None
_ai: Optional[OpenAIService] = None
_rl: Optional[RateLimiter] = None
_history: Dict[int, Deque[Dict[str, str]]] = defaultdict(lambda: deque(maxlen=5))


def setup_context(settings: Settings, ai: OpenAIService) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ö—ç–Ω–¥–ª–µ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py).
    """
    global _settings, _ai, _rl, _history
    _settings = settings
    _ai = ai
    _rl = RateLimiter(max_calls=settings.max_requests_per_hour, period_seconds=3600)
    _history = defaultdict(lambda: deque(maxlen=max(1, int(settings.history_size))))


@router.message(F.text & ~F.text.startswith("/"))
async def handle_legal_query(message: types.Message) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ö—ç–Ω–¥–ª–µ—Ä —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    ‚Äî –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    ‚Äî Rate-limit –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ‚Äî –ò–Ω–¥–∏–∫–∞—Ü–∏—è ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª
    ‚Äî –û—Ç–≤–µ—Ç + —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 4096
    """
    assert _settings is not None and _ai is not None and _rl is not None

    user_id = message.from_user.id if message.from_user else 0
    chat_id = message.chat.id
    text = (message.text or "").strip()

    # –ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–≥
    log.info("IN: user=%s chat=%s len=%s", user_id, chat_id, len(text))

    # –ú–∏–Ω–∏-–¥–ª–∏–Ω–∞
    if len(text) < _settings.min_question_length:
        await message.answer(
            "‚úã –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–π.",
            parse_mode=None,
        )
        return

    # Rate-limit
    if not await _rl.check(user_id):
        remain = await _rl.remaining(user_id)
        msg = "‚è≥ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if remain:
            msg += f" –î–æ—Å—Ç—É–ø–Ω–æ –µ—â—ë: {remain}."
        await message.answer(msg, parse_mode=None)
        return

    # –ö–æ—Ä–æ—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –±–µ–∑ —Ç–æ–∫–µ–Ω-–Ω–∞—Ä–∫–æ–º–∞–Ω–∏–∏)
    short_history: List[Dict[str, str]] = list(_history[user_id])

    try:
        # –î–µ—Ä–∂–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –ø–æ–∫–∞ –∂–¥—ë–º LLM
        async with ChatActionSender.typing(bot=message.bot, chat_id=chat_id):
            result = await _ai.generate_legal_answer(text, short_history=short_history)

        answer: str = result.get("answer") or ""
        laws: List[str] = result.get("laws") or []
        log.info("OUT: user=%s chat=%s answer_len=%s laws=%s", user_id, chat_id, len(answer), len(laws))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é
        _history[user_id].append({"role": "user", "content": text})
        _history[user_id].append({"role": "assistant", "content": answer})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        final = build_legal_reply(answer=answer, laws=laws)
        chunks = chunk_markdown_v2(final, limit=4096)

        for part in chunks:
            try:
                await message.answer(part, parse_mode=_settings.parse_mode)
            except TelegramBadRequest:
                # —Ñ–æ–ª–ª–±–µ–∫ –µ—Å–ª–∏ MarkdownV2 —Å–ª–æ–º–∞–ª—Å—è
                await message.answer(part, parse_mode=None)

    except TelegramBadRequest as e:
        log.exception("TelegramBadRequest: user=%s chat=%s err=%r", user_id, chat_id, e)
        await message.answer(
            "üòï –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏.",
            parse_mode=None,
        )
    except Exception as e:
        log.exception("LLM handler error: user=%s chat=%s err=%r", user_id, chat_id, e)
        await message.answer(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.",
            parse_mode=None,
        )
