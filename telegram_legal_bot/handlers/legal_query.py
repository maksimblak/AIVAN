from __future__ import annotations

import asyncio
import logging
import time
from collections import defaultdict, deque
from dataclasses import dataclass, field
from typing import Deque, Dict, List, Optional

from telegram import Update
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ContextTypes, MessageHandler, filters
from telegram.helpers import escape_markdown

from config import Settings
from services.openai_service import LegalAdvice, OpenAIService
from utils.message_formatter import build_legal_reply, chunk_markdown_v2

logger = logging.getLogger(__name__)


# --------- –ø—Ä–æ—Å—Ç–µ–π—à–∏–π per-user rate limit (in-memory, 1h –æ–∫–Ω–æ) ----------
@dataclass
class RateWindow:
    timestamps: Deque[float] = field(default_factory=deque)

    def hit(self, now: float, max_per_hour: int) -> bool:
        hour_ago = now - 3600.0
        while self.timestamps and self.timestamps[0] < hour_ago:
            self.timestamps.popleft()
        if len(self.timestamps) >= max_per_hour:
            return False
        self.timestamps.append(now)
        return True


_rate_map: Dict[int, RateWindow] = defaultdict(RateWindow)

# --------- –∫–æ—Ä–æ—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ per user (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞) ----
_history: Dict[int, Deque[str]] = defaultdict(lambda: deque(maxlen=5))


def build_legal_message_handler(settings: Settings, ai: OpenAIService) -> MessageHandler:
    """
    –§–∞–±—Ä–∏–∫–∞ message-—Ö—ç–Ω–¥–ª–µ—Ä–∞: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
    –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥, –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∏—Ö –≤ OpenAI.
    """

    async def _handle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        user_id = update.effective_user.id if update.effective_user else 0
        text = (msg.text or "").strip()

        # 0) –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not text:
            return
        if text.startswith("/"):
            return  # –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if len(text) < settings.min_question_length:
            short = (
                f"üßê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º {settings.min_question_length} —Å–∏–º–≤–æ–ª–æ–≤)."
            )
            await msg.reply_text(short)
            return

        # 1) –ê–Ω—Ç–∏—Å–ø–∞–º: –ø—Ä–æ—Å—Ç–æ–π —á–µ–∫ –Ω–∞ —Å–≤–µ—Ä—Ö–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        if _looks_like_spam(text):
            await msg.reply_text(
                "ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º/—Ñ–ª—É–¥. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
            )
            return

        # 2) Rate-limit per user
        now = time.time()
        window = _rate_map[user_id]
        if not window.hit(now, settings.max_requests_per_hour):
            await msg.reply_text("‚è≥ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á–∞—Å –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # 3) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
        try:
            await context.bot.send_chat_action(msg.chat_id, action=ChatAction.TYPING)
        except Exception:  # noqa: BLE001
            pass

        # 4) –í—ã–∑–æ–≤ OpenAI —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            advice: LegalAdvice = await ai.generate_legal_advice(
                user_question=text, short_history=list(_history[user_id])
            )
        except asyncio.TimeoutError:
            await msg.reply_text("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        except Exception as e:  # noqa: BLE001
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: %s", e)
            await msg.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # 5) –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞–º–∏
        reply = build_legal_reply(advice.summary, advice.details, advice.laws)
        chunks = chunk_markdown_v2(reply)
        for i, ch in enumerate(chunks):
            prefix = "" if i == 0 else "‚Ä¶–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n\n"
            await msg.reply_text(
                prefix + ch,
                parse_mode=ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True,
            )

        # 6) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if advice.summary:
            _history[user_id].append(advice.summary)

    return MessageHandler(filters.TEXT & ~filters.COMMAND, _handle)


def _looks_like_spam(text: str) -> bool:
    """
    –û—á–µ–Ω—å –≥—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ ‚Äî —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–ø–∞–º–æ–º, –µ—Å–ª–∏:
      - –¥–æ–ª—è —Å–∞–º–æ–≥–æ —á–∞—Å—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ > 0.6 –∏ –¥–ª–∏–Ω–∞ > 20
      - –ª–∏–±–æ –±–æ–ª–µ–µ 5 –ø–æ–≤—Ç–æ—Ä–æ–≤ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Å–ª–æ–≤–∞ –ø–æ–¥—Ä—è–¥
    """
    t = text.replace(" ", "")
    if len(t) > 20:
        from collections import Counter

        c = Counter(t)
        if c.most_common(1)[0][1] / len(t) > 0.6:
            return True

    words = [w for w in text.lower().split() if w]
    rep = 1
    for i in range(1, len(words)):
        if words[i] == words[i - 1]:
            rep += 1
            if rep >= 6:
                return True
        else:
            rep = 1
    return False
