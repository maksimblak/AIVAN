from __future__ import annotations

from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart

from telegram_legal_bot.utils.message_formatter import md2

router = Router()


def _final_sanitize_md2(text: str) -> str:
    """
    –î–æ–ø. —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–ª—è MarkdownV2: —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–µ—Ñ–∏—Å –∏ —Å–∫–æ–±–∫–∏ –≤ —Å—Ç–∞—Ç–∏–∫–µ.
    –î–∏–Ω–∞–º–∏–∫—É –º—ã —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º md2().
    """
    return (
        text.replace("-", r"\-")
        .replace("(", r"\(")
        .replace(")", r"\)")
    )


@router.message(CommandStart())
async def cmd_start(message: types.Message) -> None:
    text = (
        f"üëã *{md2('–ü—Ä–∏–≤–µ—Ç!')}*\n\n"
        f"–Ø ‚Äî –±–æ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –Ω–∞ –±–∞–∑–µ GPT-5.\n\n"
        f"–ß—Ç–æ —É–º–µ—é:\n"
        f"‚Ä¢ {md2('–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã')} ‚öñÔ∏è\n"
        f"‚Ä¢ {md2('–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã')} ‚Äî –∫—Ä–∞—Ç–∫–æ, –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞\n"
        f"‚Ä¢ {md2('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç')} ‚Äî —ç–º–æ–¥–∑–∏, —Å–ø–∏—Å–∫–∏, MarkdownV2\n\n"
        f"–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        f"1\\. {md2('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å')} ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: _{md2('–ö–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã?')}_\n"
        f"2\\. {md2('–ü–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî —è –ø–æ–∫–∞–∂—É —Å—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç–∏')}\n"
        f"3\\. {md2('–ü–æ–ª—É—á–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –Ω–æ—Ä–º–∞–º–∏ –ø—Ä–∞–≤–∞')} üìö\n\n"
        f"‚ö†Ô∏è *{md2('–í–∞–∂–Ω–æ')}*: {md2('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å.')}"
    )

    safe_text = _final_sanitize_md2(text)

    try:
        await message.answer(
            safe_text,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    except TelegramBadRequest:
        # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º parse_mode, –∏–Ω–∞—á–µ —É –±–æ—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ —Å—Ç–æ–∏—Ç MARKDOWN_V2
        plain = safe_text.replace("\\", "").replace("*", "").replace("_", "")
        await message.answer(plain, parse_mode=None, disable_web_page_preview=True)


@router.message(Command("help"))
async def cmd_help(message: types.Message) -> None:
    text = (
        f"üÜò *{md2('–ü–æ–º–æ—â—å')}:*\n\n"
        f"‚Ä¢ {md2('–ü–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É ‚Äî —Ç–∞–∫ —Ç–æ—á–Ω–µ–µ.')}\n"
        f"‚Ä¢ {md2('–ï—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å (–∞–Ω—Ç–∏—Å–ø–∞–º).')}\n"
        f"‚Ä¢ {md2('–î–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —è —Ä–µ–∂—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.')}\n\n"
        f"{md2('–ö–æ–º–∞–Ω–¥—ã')}:\n"
        f"/start ‚Äî {md2('–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')}\n"
        f"/help ‚Äî {md2('–ø–æ–º–æ—â—å')}\n"
    )
    safe_text = _final_sanitize_md2(text)
    try:
        await message.answer(
            safe_text,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    except TelegramBadRequest:
        plain = safe_text.replace("\\", "").replace("*", "").replace("_", "")
        await message.answer(plain, parse_mode=None, disable_web_page_preview=True)
