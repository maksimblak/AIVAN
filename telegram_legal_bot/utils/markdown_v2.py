# telegram_legal_bot/utils/markdown_v2.py
"""
–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram MarkdownV2.
"""

import re


def format_md2_message(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MarkdownV2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**  
    - *–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*
    - `–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç`
    - [—Å—Å—ã–ª–∫–∏](URL)
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.
    """
    if not text:
        return ""
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    text = re.sub(r'\*\*(.*?)\*\*', '__BOLD_START__\\1__BOLD_END__', text)  # **bold**
    text = re.sub(r'(?<!\*)\*(?!\*)([^*]+)(?<!\*)\*(?!\*)', '__ITALIC_START__\\1__ITALIC_END__', text)  # *italic*
    text = re.sub(r'`([^`]+)`', '__CODE_START__\\1__CODE_END__', text)  # `code`
    text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', '__LINK_START__\\1__LINK_MID__\\2__LINK_END__', text)  # [text](url)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2
    special_chars = r'_*[]()~`>#+-=|{}.!\\'
    for char in special_chars:
        if char not in ['*', '_', '`', '[', ']', '(', ')']:  # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            text = text.replace(char, '\\' + char)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = text.replace('__BOLD_START__', '*')
    text = text.replace('__BOLD_END__', '*')
    text = text.replace('__ITALIC_START__', '_') 
    text = text.replace('__ITALIC_END__', '_')
    text = text.replace('__CODE_START__', '`')
    text = text.replace('__CODE_END__', '`')
    text = text.replace('__LINK_START__', '[')
    text = text.replace('__LINK_MID__', '](')
    text = text.replace('__LINK_END__', ')')
    
    return text


def bold(text: str) -> str:
    """–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2."""
    return f"*{escape_md2_text(text)}*"


def italic(text: str) -> str:
    """–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2.""" 
    return f"_{escape_md2_text(text)}_"


def code(text: str) -> str:
    """–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2."""
    return f"`{text}`"  # –í–Ω—É—Ç—Ä–∏ ` —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ


def link(text: str, url: str) -> str:
    """–°—Å—ã–ª–∫–∞ –¥–ª—è MarkdownV2."""
    escaped_url = url.replace('(', r'\(').replace(')', r'\)')
    return f"[{escape_md2_text(text)}]({escaped_url})"


def escape_md2_text(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2."""
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    special_chars = r'_*[]()~`>#+-=|{}.!\\'
    
    result = text
    for char in special_chars:
        result = result.replace(char, '\\' + char)
    
    return result


def create_message_template() -> str:
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    return """
üëã {bold_welcome}

–Ø ‚Äî {bold_name}, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚öñÔ∏è

üöÄ {bold_abilities}
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –†–§
‚Ä¢ –ü—Ä–∏–≤–æ–∂—É —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã
‚Ä¢ –î–∞—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–æ–º

‚≠ê {bold_advantages}
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞
‚Ä¢ –ü–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ
‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω 24/7

‚ö†Ô∏è {bold_important}
–Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —é—Ä–∏—Å—Ç–æ–º, –Ω–æ –ø–æ–º–æ–≥—É —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∞–≤–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö{escaped_exclamation}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëç
    """.strip()


def format_welcome_message(user_name: str = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    name_part = f", {user_name}" if user_name else ""
    
    template = create_message_template()
    
    return template.format(
        bold_welcome=bold(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å{name_part}!"),
        bold_name=bold("AIVAN"),
        bold_abilities=bold("–ß—Ç–æ —è —É–º–µ—é:"),
        bold_advantages=bold("–ú–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:"),
        bold_important=bold("–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:"),
        escaped_exclamation="\\!"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
def format_section(title: str, items: list, emoji: str = "‚Ä¢") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–ø–∏—Å–∫–æ–º."""
    result = f"\n{bold(title)}\n"
    for item in items:
        result += f"{emoji} {escape_md2_text(item)}\n"
    return result
