from __future__ import annotations

import re
from typing import Iterable, Sequence

TG_MAX_LEN = 4096
_url_re = re.compile(r"https?://\S+", re.IGNORECASE)

_MD2_NEED_ESCAPE = re.compile(r'([_*\[\]()~`>#+\-=|{}.!])')


def escape_md2(text: str) -> str:
    """
    –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥ Telegram MarkdownV2.
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏–∑ –¥–æ–∫–∏ Telegram:
    _ * [ ] ( ) ~ ` > # + - = | { } . !
    –∏ —Å–Ω–∞—á–∞–ª–∞ —É–¥–≤–∞–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏.
    """
    if not text:
        return ""
    text = text.replace("\\", "\\\\")
    return _MD2_NEED_ESCAPE.sub(r"\\\1", text)


def md2(text: str) -> str:
    """–°–∞—Ö–∞—Ä–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –ø—Ä–æ–µ–∫—Ç–µ –≤–µ–∑–¥–µ –≤–º–µ—Å—Ç–æ –≤–Ω–µ—à–Ω–∏—Ö —Ö–µ–ª–ø–µ—Ä–æ–≤."""
    return escape_md2(text)


def format_laws(laws: Iterable[str] | None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º/—Å—Å—ã–ª–æ–∫:
    - –¢–µ–∫—Å—Ç –Ω–æ—Ä–º—ã ‚Äî –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π,
    - URL ‚Äî –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π (–Ω–µ –ø—Ä—è—á–µ–º –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –±–ª–æ–∫).
    –ü—Ä–∏–º–µ—Ä: ‚Ä¢ `—Å—Ç. 10 –ì–ö –†–§` ‚Äî https://.../article/10
    """
    if not laws:
        return "–ù–æ—Ä–º—ã –ø—Ä–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    lines: list[str] = []
    for raw in laws:
        if not raw:
            continue
        raw = raw.strip()
        m = _url_re.search(raw)
        if m:
            url = m.group(0)
            label = raw.replace(url, "").strip(" -‚Äî:") or "–ù–æ—Ä–º–∞"
            lines.append(f"‚Ä¢ `{md2(label)}` ‚Äî {url}")
        else:
            lines.append(f"‚Ä¢ `{md2(raw)}`")
    return "\n".join(lines)


def build_legal_reply(summary: str, details: str, laws: Sequence[str] | None) -> str:
    return (
        f"‚öñÔ∏è *{md2('–Æ–†–ò–î–ò–ß–ï–°–ö–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø')}*\n\n"
        f"üìã *{md2('–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:')}*\n"
        f"{md2(summary)}\n\n"
        f"üìÑ *{md2('–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ:')}*\n"
        f"{md2(details)}\n\n"
        f"üìö *{md2('–ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞:')}*\n"
        f"{format_laws(laws)}\n\n"
        f"‚ö†Ô∏è *{md2('–í–∞–∂–Ω–æ:')}*\n"
        f"{md2('–î–∞–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å.')}"
    )


def chunk_markdown_v2(text: str, limit: int = TG_MAX_LEN) -> list[str]:
    """
    –†–µ–∂–µ–º –¥–ª–∏–Ω–Ω—ã–π MarkdownV2-—Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —Å—Ç–∞—Ä–∞—è—Å—å –ø–æ–ø–∞–¥–∞—Ç—å –≤ –ø–µ—Ä–µ–Ω–æ—Å—ã.
    """
    parts: list[str] = []
    for block in text.split("\n\n"):
        block = block.strip()
        if not block:
            continue
        if len(block) <= limit:
            parts.append(block)
            continue
        cur = block
        while len(cur) > limit:
            cut = cur.rfind("\n", 0, limit)
            if cut == -1:
                cut = limit
            parts.append(cur[:cut])
            cur = cur[cut:].lstrip()
        if cur:
            parts.append(cur)
    return parts

# back-compat alias (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞—Ä–æ–µ –∏–º—è)
format_legal_response = build_legal_reply
