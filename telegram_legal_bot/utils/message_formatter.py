"""–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Telegram."""
from __future__ import annotations

from typing import Iterable

from telegram.helpers import escape_markdown


def format_laws(laws: Iterable[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–æ–Ω–æ–≤ –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —Å—Ç–∏–ª–µ."""

    escaped_laws = [f"`{escape_markdown(law, version=2)}`" for law in laws if law]
    return "\n".join(escaped_laws) if escaped_laws else "`–ù–æ—Ä–º—ã –ø—Ä–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`"


def format_legal_response(summary: str, details: str, laws: Iterable[str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""

    summary = escape_markdown(summary, version=2)
    details = escape_markdown(details, version=2)
    laws_block = format_laws(laws)

    return (
        "‚öñÔ∏è *–Æ–†–ò–î–ò–ß–ï–°–ö–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø*\n\n"
        "üìã *–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:*\n"
        f"{summary}\n\n"
        "üìÑ *–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ:*\n"
        f"{details}\n\n"
        "üìö *–ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞:*\n"
        f"{laws_block}\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "–î–∞–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å."
    )
