from __future__ import annotations

import asyncio
import json
import logging
import signal
import sys
from typing import Sequence

from telegram import BotCommand, Update
from telegram.constants import ParseMode
from telegram.ext import (
    AIORateLimiter,
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

from config import load_settings
from handlers.legal_query import build_legal_message_handler
from handlers.start import cmd_help, cmd_start
from services.openai_service import OpenAIService


# ----------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ JSON-–ª–æ–≥–æ–≤ –ø–æ —Ñ–ª–∞–∂–∫—É) -------------
class JsonFormatter(logging.Formatter):
    def format(self, record: logging.LogRecord) -> str:  # type: ignore[override]
        data = {
            "level": record.levelname,
            "name": record.name,
            "msg": record.getMessage(),
            "time": self.formatTime(record, "%Y-%m-%dT%H:%M:%S%z"),
        }
        if record.exc_info:
            data["exc_info"] = self.formatException(record.exc_info)
        return json.dumps(data, ensure_ascii=False)


def _setup_logging(level: str, json_logs: bool) -> None:
    root = logging.getLogger()
    root.setLevel(getattr(logging, level, logging.INFO))

    for h in list(root.handlers):
        root.removeHandler(h)

    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(getattr(logging, level, logging.INFO))
    handler.setFormatter(JsonFormatter() if json_logs else logging.Formatter(
        "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
    ))
    root.addHandler(handler)


async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.exception("Unhandled error: %s", context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                "‚ö†Ô∏è –°–ª—É—á–∏–ª–∞—Å—å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception:
        pass


async def _set_bot_commands(app: Application) -> None:
    commands: Sequence[BotCommand] = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
    ]
    await app.bot.set_my_commands(commands)


async def main_async() -> None:
    settings = load_settings()
    _setup_logging(settings.log_level, settings.json_logs)
    logging.info("–ó–∞–ø—É—Å–∫ telegram_legal_bot‚Ä¶")

    ai_service = OpenAIService(settings)

    application: Application = (
        ApplicationBuilder()
        .token(settings.telegram_token)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))

    # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    application.add_handler(build_legal_message_handler(settings, ai_service))

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(on_error)

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—ã
    await _set_bot_commands(application)

    # –ì—Ä–∞—Ü–∏–æ–∑–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É
    stop_event = asyncio.Event()
    loop = asyncio.get_running_loop()

    def _stop(*_: object) -> None:
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º‚Ä¶")
        stop_event.set()

    try:
        loop.add_signal_handler(signal.SIGINT, _stop)
        loop.add_signal_handler(signal.SIGTERM, _stop)
    except NotImplementedError:
        # Windows: fallback
        signal.signal(signal.SIGINT, lambda *_: _stop())
        signal.signal(signal.SIGTERM, lambda *_: _stop())

    # run_polling —Å–∞–º —Å—Ç–∞—Ä—Ç—É–µ—Ç/–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç updater –∏ —Å–µ—Ç–∫—É —Ç–∞—Å–∫–æ–≤
    await application.initialize()
    await application.start()
    await application.updater.start_polling(
        allowed_updates=("message",), drop_pending_updates=True
    )

    try:
        await stop_event.wait()
    finally:
        await application.updater.stop()
        await application.stop()
        await application.shutdown()
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∫–∞ üëã")


if __name__ == "__main__":
    # –Ω–∏–∫–∞–∫–∏—Ö get_event_loop() ‚Äî —Å–æ–∑–¥–∞—ë–º –∏ —É–ø—Ä–∞–≤–ª—è–µ–º –ª—É–ø–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    asyncio.run(main_async())
