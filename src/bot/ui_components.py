"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ –ò–ò-–ò–≤–∞–Ω
–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —ç–º–æ–¥–∑–∏, —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

from __future__ import annotations
import re
# ============ –≠–ú–û–î–ó–ò –ö–û–ù–°–¢–ê–ù–¢–´ ============


class Emoji:
    """–ö–æ–ª–ª–µ–∫—Ü–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ
    ROBOT = "ü§ñ"
    LAW = "‚öñÔ∏è"
    DOCUMENT = "üìÑ"
    SEARCH = "üîç"
    IDEA = "üí°"
    WARNING = "‚ö†Ô∏è"
    SUCCESS = "‚úÖ"
    ERROR = "‚ùå"
    LOADING = "‚è≥"
    FIRE = "üî•"
    STAR = "‚≠ê"
    MAGIC = "‚ú®"

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∞
    CIVIL = "üìò"
    CRIMINAL = "üßë‚Äç‚öñÔ∏è"
    CORPORATE = "üè¢"
    CONTRACT = "üìù"
    LABOR = "‚öôÔ∏è"
    TAX = "üí∞"
    REAL_ESTATE = "üè†"
    IP = "üß†"
    ADMIN = "üèõÔ∏è"
    FAMILY = "üë™"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    BACK = "‚¨ÖÔ∏è"
    HOME = "üè°"
    HELP = "‚ùì"
    SETTINGS = "‚öôÔ∏è"
    STATS = "üìä"
    UP = "‚¨ÜÔ∏è"
    DOWN = "‚¨áÔ∏è"

    # –î–µ–π—Å—Ç–≤–∏—è
    SAVE = "üíæ"
    SHARE = "üì§"
    COPY = "üìã"
    PRINT = "üñ®Ô∏è"
    DOWNLOAD = "üì•"
    DIAMOND = "üíé"

    # –°—Ç–∞—Ç—É—Å—ã
    ONLINE = "üü¢"
    OFFLINE = "üî¥"
    PENDING = "üü°"
    CLOCK = "üïí"
    CALENDAR = "üìÖ"

# --- –ø—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–∫–æ–≤–∫–∞ URL ---
_URL_RE = re.compile(r"(https?://[^\s<>{}]+)", re.IGNORECASE)

# --- —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (RU/EN) –¥–ª—è –∞–≤—Ç–æ-–∫–ª—é—á–µ–π ---
_STOPWORDS = {
    # ru
    "–∏","–≤","–≤–æ","–Ω–µ","—á—Ç–æ","–æ–Ω","–Ω–∞","—è","—Å","—Å–æ","–∫–∞–∫","–∞","—Ç–æ","–≤—Å–µ","–æ–Ω–∞","—Ç–∞–∫",
    "–µ–≥–æ","–Ω–æ","–¥–∞","—Ç—ã","–∫","—É","–∂–µ","–≤—ã","–∑–∞","–±—ã","–ø–æ","—Ç–æ–ª—å–∫–æ","–µ–µ","–º–Ω–µ","–±—ã–ª–æ",
    "–≤–æ—Ç","–æ—Ç","–º–µ–Ω—è","–µ—â–µ","–Ω–µ—Ç","–æ","–∏–∑","–µ–º—É","—Ç–µ–ø–µ—Ä—å","–∫–æ–≥–¥–∞","–¥–∞–∂–µ","–Ω—É","–≤–¥—Ä—É–≥",
    "–ª–∏","–µ—Å–ª–∏","—É–∂–µ","–∏–ª–∏","–Ω–∏","–±—ã—Ç—å","–±—ã–ª","–Ω–µ–≥–æ","–¥–æ","–≤–∞—Å","–Ω–∏–±—É–¥—å","–æ–ø—è—Ç—å",
    "—É–∂","–≤–∞–º","–≤–µ–¥—å","—Ç–∞–º","–ø–æ—Ç–æ–º","—Å–µ–±—è","–Ω–∏—á–µ–≥–æ","–µ–π","–º–æ–∂–µ—Ç","–æ–Ω–∏","—Ç—É—Ç","–≥–¥–µ",
    "–µ—Å—Ç—å","–Ω–∞–¥–æ","–Ω–µ–π","–¥–ª—è","–º—ã","—Ç–µ–±—è","–∏—Ö","—á–µ–º","–±—ã–ª–∞","—Å–∞–º","—á—Ç–æ–±","–±–µ–∑","–±—É–¥—Ç–æ",
    "—á–µ–≥–æ","—Ä–∞–∑","—Ç–æ–∂–µ","—Å–µ–±–µ","–ø–æ–¥","–±—É–¥–µ—Ç","–∂","—Ç–æ–≥–¥–∞","–∫—Ç–æ","—ç—Ç–æ—Ç","—Ç–æ–≥–æ","–ø–æ—Ç–æ–º—É",
    "—ç—Ç–æ–≥–æ","–∫–∞–∫–æ–π","—Å–æ–≤—Å–µ–º","–Ω–∏–º","–∑–¥–µ—Å—å","—ç—Ç–æ–º","–æ–¥–∏–Ω","–ø–æ—á—Ç–∏","–º–æ–π","—Ç–µ–º","—á—Ç–æ–±—ã",
    "–Ω–µ–µ","–∫–∞–∂–µ—Ç—Å—è","—Å–µ–π—á–∞—Å","–±—ã–ª–∏","–∫—É–¥–∞","–∑–∞—á–µ–º","–≤—Å–µ—Ö","–Ω–∏–∫–æ–≥–¥–∞","–º–æ–∂–Ω–æ","–ø—Ä–∏",
    "–Ω–∞–∫–æ–Ω–µ—Ü","–¥–≤–∞","–æ–±","–¥—Ä—É–≥–æ–π","—Ö–æ—Ç—å","–ø–æ—Å–ª–µ","–Ω–∞–¥","–±–æ–ª—å—à–µ","—Ç–æ—Ç","—á–µ—Ä–µ–∑",
    # en
    "the","and","or","to","of","a","an","in","on","for","with","by","at","as","is",
    "are","was","were","be","been","it","this","that","from","not","no","yes","but",
}
# ============ –¶–í–ï–¢–û–í–´–ï –°–•–ï–ú–´ ============


class Colors:
    """–¶–≤–µ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram, –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)"""

    PRIMARY = "#2196F3"  # –°–∏–Ω–∏–π
    SUCCESS = "#4CAF50"  # –ó–µ–ª–µ–Ω—ã–π
    WARNING = "#FF9800"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    ERROR = "#F44336"  # –ö—Ä–∞—Å–Ω—ã–π
    INFO = "#00BCD4"  # –ì–æ–ª—É–±–æ–π


# ============ –®–ê–ë–õ–û–ù–´ –°–û–û–ë–©–ï–ù–ò–ô (MarkdownV2) ============


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (MarkdownV2)"""

    WELCOME = f"""{Emoji.LAW} **–ò–ò\\-–ò–≤–∞–Ω** ‚Äî –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

{Emoji.ROBOT} –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –ø—Ä–∞–≤–µ –∏ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ
{Emoji.SEARCH} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–µ–ª–∞, –Ω–∞—Ö–æ–∂—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É  
{Emoji.DOCUMENT} –ì–æ—Ç–æ–≤–ª—é —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

{Emoji.WARNING} *–í–∞–∂–Ω–æ*: –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —é—Ä–∏—Å—Ç–æ–º

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    HELP = f"""{Emoji.HELP} <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ò–ò-–ò–≤–∞–Ω</b>

{Emoji.LAW} <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:</b>

{Emoji.SEARCH} <b>–ü–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏</b>
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π
‚Ä¢ –ü–æ–¥–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–ª
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É


{Emoji.ROBOT} <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, DOC, TXT)
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –≤—ã–∂–∏–º–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—Å—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
‚Ä¢ –û–±–µ–∑–ª–∏—á–∏–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏

{Emoji.MAGIC} <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏)
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Å–∫–∞–Ω–∞–º–∏ (OCR)
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö

{Emoji.WARNING} <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –≤–æ–ø—Ä–æ—Å—ã:</b>
–ü–æ –≤—Å–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø—Ä–æ–±–ª–µ–º–∞–º —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""

    CATEGORIES = f"""{Emoji.LAW} **–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞**

–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:"""

    PROCESSING_STAGES = [
        f"{Emoji.SEARCH} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...",
        f"{Emoji.LOADING} –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É...",
        f"{Emoji.DOCUMENT} –§–æ—Ä–º–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç...",
        f"{Emoji.MAGIC} –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
    ]

    ERROR_GENERIC = f"""{Emoji.ERROR} **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å\\.

{Emoji.HELP} *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"""

    NO_QUESTION = f"""{Emoji.WARNING} **–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞\\."""


# ============ –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–ê–í–ê ============

LEGAL_CATEGORIES = {
    "civil": {
        "name": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CIVIL,
        "description": "–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –ª–∏—á–Ω—ã–µ –Ω–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "examples": ["–î–æ–≥–æ–≤–æ—Ä—ã", "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "–î–µ–ª–∏–∫—Ç—ã"],
    },
    "corporate": {
        "name": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CORPORATE,
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü",
        "examples": ["–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ –û–û–û", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã", "–†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "M&A"],
    },
    "contract": {
        "name": "–î–æ–≥–æ–≤–æ—Ä–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CONTRACT,
        "description": "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤",
        "examples": ["–ü–æ—Å—Ç–∞–≤–∫–∞", "–ü–æ–¥—Ä—è–¥", "–ê—Ä–µ–Ω–¥–∞", "–ó–∞–π–º"],
    },
    "labor": {
        "name": "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.LABOR,
        "description": "–¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞",
        "examples": ["–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–û—Ç–ø—É—Å–∫–∞", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"],
    },
    "tax": {
        "name": "–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.TAX,
        "description": "–ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –§–ù–°",
        "examples": ["–ù–î–°", "–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å", "–ù–î–§–õ", "–ü—Ä–æ–≤–µ—Ä–∫–∏"],
    },
    "real_estate": {
        "name": "–ü—Ä–∞–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        "emoji": Emoji.REAL_ESTATE,
        "description": "–°–¥–µ–ª–∫–∏ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é –∏ –∑–µ–º–µ–ª—å–Ω—ã–º–∏ —É—á–∞—Å—Ç–∫–∞–º–∏",
        "examples": ["–ö—É–ø–ª—è-–ø—Ä–æ–¥–∞–∂–∞", "–ê—Ä–µ–Ω–¥–∞", "–ò–ø–æ—Ç–µ–∫–∞", "–ö–∞–¥–∞—Å—Ç—Ä"],
    },
    "ip": {
        "name": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "emoji": Emoji.IP,
        "description": "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞, —Ç–æ–≤–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏, –ø–∞—Ç–µ–Ω—Ç—ã",
        "examples": ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¢–ó", "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞", "–ü–∞—Ç–µ–Ω—Ç—ã", "–õ–∏—Ü–µ–Ω–∑–∏–∏"],
    },
    "admin": {
        "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.ADMIN,
        "description": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥–æ—Å–æ—Ä–≥–∞–Ω–∞–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "examples": ["–õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–®—Ç—Ä–∞—Ñ—ã", "–ì–æ—Å—É—Å–ª—É–≥–∏", "–ö–æ–Ω—Ç—Ä–æ–ª—å"],
    },
    "criminal": {
        "name": "–£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CRIMINAL,
        "description": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ —É–≥–æ–ª–æ–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "examples": ["–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ", "–ù–∞–ª–æ–≥–æ–≤—ã–µ", "–ó–∞—â–∏—Ç–∞"],
    },
    "family": {
        "name": "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.FAMILY,
        "description": "–ë—Ä–∞–∫, —Ä–∞–∑–≤–æ–¥, –∞–ª–∏–º–µ–Ω—Ç—ã, –æ–ø–µ–∫–∞",
        "examples": ["–†–∞–∑–≤–æ–¥", "–ê–ª–∏–º–µ–Ω—Ç—ã", "–†–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞", "–û–ø–µ–∫–∞"],
    },
}


def get_category_info(category_id: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∞"""
    return LEGAL_CATEGORIES.get(
        category_id,
        {
            "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            "emoji": Emoji.LAW,
            "description": "–û–±—â–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            "examples": [],
        },
    )


# ============ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï (MarkdownV2) ============


def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    special_chars = [
        "_",
        "*",
        "[",
        "]",
        "(",
        ")",
        "~",
        "`",
        ">",
        "#",
        "+",
        "-",
        "=",
        "|",
        "{",
        "}",
        ".",
        "!",
    ]
    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    return text


def format_legal_response(text: str, category: str | None = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π MarkdownV2"""
    if category:
        category_info = get_category_info(category)
        header = f"{category_info['emoji']} **{escape_markdown_v2(category_info['name'])}**\n\n"
        text = header + text
    return text


def create_progress_message(stage: int, total: int = 4) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (MarkdownV2)"""
    if stage >= len(MessageTemplates.PROCESSING_STAGES):
        stage = len(MessageTemplates.PROCESSING_STAGES) - 1
    progress_bar = "‚ñì" * stage + "‚ñë" * (total - stage)
    percentage = int((stage / total) * 100)
    return f"{MessageTemplates.PROCESSING_STAGES[stage]}\n\n`{progress_bar}` {percentage}%"


def create_progress_message_html(stage: int, total: int = 4) -> str:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è HTML-—Ä–µ–∂–∏–º–∞ (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ parse_mode=HTML)"""
    if stage >= len(MessageTemplates.PROCESSING_STAGES):
        stage = len(MessageTemplates.PROCESSING_STAGES) - 1
    progress_bar = "‚ñì" * stage + "‚ñë" * (total - stage)
    percentage = int((stage / total) * 100)
    return f"{MessageTemplates.PROCESSING_STAGES[stage]}<br><br><code>{progress_bar}</code> {percentage}%"


# ============ HTML –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø STREAMING ============

import re
from html import escape as html_escape

# --- Telegram HTML sanitizer (allowlist) ---
ALLOWED_TAGS = {"b","strong","i","em","u","ins","s","strike","del","code","pre","a","br","tg-spoiler","blockquote"}
ALLOWED_ATTRS = {"a": {"href"}}


def sanitize_telegram_html(html: str) -> str:
    """
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏: b,i,u,s,code,pre,a(href=http/https),br.
    –£ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏.
    –£ <a> –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π href, –ø—Ä–æ—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç.
    """
    if not html:
        return ""

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–≥
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ALLOWED_TAGS –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    allowed_pattern = "|".join(ALLOWED_TAGS)
    html = re.sub(f"<(?!/?(?:{allowed_pattern})\\b)", "&lt;", html)

    tag_re = re.compile(r"</?([a-zA-Z0-9]+)(\s[^>]*)?>", re.IGNORECASE)

    def _clean_tag(match: re.Match) -> str:
        full = match.group(0)
        name = (match.group(1) or "").lower()
        attrs = match.group(2) or ""
        is_closing = full.startswith("</")

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏ ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if name not in ALLOWED_TAGS:
            return html_escape(full)

        # <br> –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤; –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –Ω–µ—Ç
        if name == "br":
            return "" if is_closing else "<br>"

        # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
        if is_closing:
            return f"</{name}>"

        # –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–≥–∏ –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–∫—Ä–æ–º–µ <a>)
        if name in {"b", "strong", "i", "em", "u", "s", "del", "code", "pre"}:
            return f"<{name}>"

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ <a ...>
        if name == "a":
            href = ""
            if attrs:
                # href="..." –∏–ª–∏ href='...'
                m = re.search(r'href\s*=\s*"(.*?)"', attrs, re.IGNORECASE)
                if not m:
                    m = re.search(r"href\s*=\s*'([^']*)'", attrs, re.IGNORECASE)
                if m:
                    cand = (m.group(1) or "").strip()
                    if cand.lower().startswith(("http://", "https://")):
                        href = html_escape(cand, quote=True)
            # –µ—Å–ª–∏ href –≤–∞–ª–∏–¥–Ω—ã–π ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É; –∏–Ω–∞—á–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Ç–µ–≥–∞
            return f'<a href="{href}">' if href else html_escape(full)

        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        return html_escape(full)

    return tag_re.sub(_clean_tag, html)


# –£–¥–∞–ª–µ–Ω–æ: –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ md_links_to_anchors –≤—ã—à–µ


def _normalize(text: str) -> str:
    return (text or "").strip().replace("\r\n", "\n").replace("\r", "\n")

def _is_heading(raw_line: str) -> bool:
    s = raw_line.strip()
    if not s:
        return False

    # –í–ê–ñ–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - –Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
    if len(s) > 200:
        return False

    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    clean_s = re.sub(r'[üìã‚öñÔ∏èüí°‚ñ∂Ô∏è‚ö†Ô∏è‚ïê]', '', s).strip()

    # "1) –ó–∞–≥–æ–ª–æ–≤–æ–∫" / "1. –ó–∞–≥–æ–ª–æ–≤–æ–∫"
    if re.match(r"^\d+[\.\)]\s+\S", clean_s):
        return True

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤: "1 –ë–ª–æ–∫. –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç"
    if re.match(r"^\d+\s*[–ë–±]–ª–æ–∫[\.:]?\s*", clean_s):
        return True

    # –°—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏-–ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ
    if re.match(r'^[üìã‚öñÔ∏èüí°‚ñ∂Ô∏è‚ö†Ô∏èüî∏üìö‚ö°‚úÖüìù]', s) and len(s) <= 150:
        return True

    # –û—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –¥–≤–æ–µ—Ç–æ—á–∏—è - —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
    if (len(clean_s) <= 40 and clean_s.endswith(":") and len(clean_s.split()) <= 5 and
        any(word in clean_s.lower() for word in ["–≤–æ–ø—Ä–æ—Å", "–æ—Ç–≤–µ—Ç", "–∞–Ω–∞–ª–∏–∑", "–≤—ã–≤–æ–¥", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "—Ä–µ—à–µ–Ω–∏–µ"])):
        return True

    # –°—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "- –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å", "- –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è"
    if re.match(r"^[\-‚Äì‚Äî]\s*[A-Z–ê-–Ø–Å]", clean_s) and len(clean_s) <= 100:
        return True

    # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã-–∑–∞–≥–æ–ª–æ–≤–∫–∏
    heading_patterns = [
        r"^(?:–ß—Ç–æ –∏–º–µ–Ω–Ω–æ|–í–∞—Ä–∏–∞–Ω—Ç—ã|–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞|–û—Å–Ω–æ–≤–∞–Ω–∏—è|–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞|–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å|–ò—Ç–æ–≥–æ|–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)",
        r"^(?:–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç|–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä|–ê–Ω–∞–ª–∏–∑|–í—ã–≤–æ–¥—ã|–ó–∞–∫–ª—é—á–µ–Ω–∏–µ)",
        r"^(?:–í–∞—Ä–∏–∞–Ω—Ç [A-Z]|–ü—É–Ω–∫—Ç \d+|–≠—Ç–∞–ø \d+)"
    ]

    for pattern in heading_patterns:
        if re.match(pattern, clean_s, re.IGNORECASE):
            return True

    # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ –±–µ–∑ —Ç–æ—á–∫–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (len(clean_s) <= 30 and not clean_s.endswith((".", "!", "?", ",", ";")) and len(clean_s.split()) <= 4 and
        any(word in clean_s.lower() for word in ["–∏—Ç–æ–≥", "–≤—ã–≤–æ–¥", "—Ä–µ—à–µ–Ω–∏–µ", "–æ—Ç–≤–µ—Ç", "–∞–Ω–∞–ª–∏–∑", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç"])):
        return True

    # –ü–æ—á—Ç–∏ –≤—Å–µ –±—É–∫–≤—ã ‚Äî –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    letters = [ch for ch in clean_s if ch.isalpha()]
    if letters:
        up = sum(ch.isupper() for ch in letters)
        if up / len(letters) >= 0.6 and len(clean_s) <= 80:
            return True

    return False

def _auto_keywords(text: str, limit: int = 8) -> list[str]:
    """
    –û—á–µ–Ω—å –ª—ë–≥–∫–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞/–±–∏–≥—Ä–∞–º–º—ã –¥–ª–∏–Ω–æ–π >=4,
    –±–µ–∑ —Å—Ç–æ–ø-—Å–ª–æ–≤. –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π/–ª–∞—Ç–∏–Ω–∏—Ü–µ–π.
    """
    # —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
    words = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9\-]{2,}", text, flags=re.UNICODE)
    norm = [w.lower() for w in words]
    # —Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç
    freq = {}
    for w in norm:
        if len(w) < 4 or w in _STOPWORDS:
            continue
        freq[w] = freq.get(w, 0) + 1
    # –±–∏–≥—Ä–∞–º–º—ã
    for i in range(len(norm) - 1):
        a, b = norm[i], norm[i+1]
        if len(a) < 4 or len(b) < 4 or a in _STOPWORDS or b in _STOPWORDS:
            continue
        big = f"{a} {b}"
        freq[big] = freq.get(big, 0) + 1

    if not freq:
        return []
    # —Ç–æ–ø –ø–æ —á–∞—Å—Ç–æ—Ç–µ/–¥–ª–∏–Ω–µ
    ranked = sorted(freq.items(), key=lambda kv: (kv[1], len(kv[0])), reverse=True)
    keys = []
    seen_roots = set()
    for k, _ in ranked:
        root = k.split()[0][:6]  # –ø—Ä–∏–º–µ—Ä–Ω–æ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª—å –ø–æ –∫–æ—Ä–Ω—é
        if root in seen_roots:
            continue
        keys.append(k)
        seen_roots.add(root)
        if len(keys) >= limit:
            break
    return keys

def _linkify(text_escaped: str) -> str:
    return _URL_RE.sub(lambda m: f'<a href="{html_escape(m.group(1), quote=True)}">{html_escape(m.group(1))}</a>', text_escaped)


# –ï–¥–∏–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä markdown —Å—Å—ã–ª–æ–∫ –≤ HTML —è–∫–æ—Ä—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
_MD_LINK_RE = re.compile(r"\[([^\]]+)\]\((https?://[^\s)]+)\)")

def md_links_to_anchors(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown-—Å—Å—ã–ª–∫–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ <a href=...> –¥–ª—è Telegram HTML."""
    def _sub(m: re.Match) -> str:
        label = html_escape(m.group(1))
        href = html_escape(m.group(2), quote=True)
        return f'<a href="{href}">{label}</a>'
    return _MD_LINK_RE.sub(_sub, text)

def render_legal_html(
    raw_text: str,
    *,
    underline_keywords: list[str] | None = None,
    auto_keywords: bool = True,  # –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –∞–≤—Ç–æ-–∫–ª—é—á–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    max_keywords: int = 8,       # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–ª–æ–≤–∞–º:
    - —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º (—ç–º–æ–¥–∑–∏, –±—É–ª–ª–∏—Ç—ã, –Ω—É–º–µ—Ä–∞—Ü–∏—è),
    - —Ä–∞–∑—Ä—ã–≤ —Å–∫–ª–µ–µ–∫ "...—Å–ª–æ–≤–æ–°–ª–µ–¥—É—é—â–µ–µ" (ru/en),
    - "–¢–µ—Ä–º–∏–Ω: –ø–æ—è—Å–Ω–µ–Ω–∏–µ" -> –∂–∏—Ä–Ω—ã–π —Ç–µ—Ä–º–∏–Ω,
    - Markdown-—Å—Å—ã–ª–∫–∏ –∏ –∞–≤—Ç–æ—Å—Å—ã–ª–∫–∏,
    - –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –∞–±–∑–∞—Ü—ã <br><br>.
    """
    t = _normalize(raw_text)
    if not t:
        return "‚Äî"

    # ---------- –°–¢–†–£–ö–¢–£–†–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï (–±–µ–∑ —Å–ª–æ–≤–∞—Ä–µ–π/–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤) ----------

    # 0) –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ ¬´—Å–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ¬ª —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (–º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤)
    #    –ù–∞–ø—Ä–∏–º–µ—Ä: -----, =====, ______, ‚ïê‚ïê‚ïê‚ïê‚ïê –∏ —Ç.–ø.
    t = re.sub(r'\s*([=\-‚Äî‚Äì_]{5,}|[‚ïê]{3,})\s*', '\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n', t)

    # 1) –ë–æ–ª–µ–µ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã –ø–µ—Ä–µ–¥ —ç–º–æ–¥–∑–∏-–º–∞—Ä–∫–µ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π)
    emoji_markers = ("üìö", "üî∏", "‚ñ∂Ô∏è", "üìã", "‚ö°Ô∏è", "üîπ", "‚úÖ", "üìù", "‚öñÔ∏è", "üí°", "‚ö†Ô∏è")


    for em in emoji_markers:
        # –≤—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤—ã –ø–µ—Ä–µ–¥ emoji-–º–∞—Ä–∫–µ—Ä–∞–º–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–ª–∏–Ω–Ω–æ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ
        pattern = rf'(\S{{30,}})\s*(?={re.escape(em)})'
        t = re.sub(pattern, lambda m: m.group(1) + "\n\n", t)
        # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —ç–º–æ–¥–∑–∏ –ø–æ–¥—Ä—è–¥
        t = re.sub(rf'{re.escape(em)}\s*{re.escape(em)}+', em, t)

    # 2) –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    def _break_before_list(match):
        return match.group(1) + "\n\n"

    t = re.sub(r'(\S{20,})\s*(?=[\-‚Äì‚Äî*]\s+)', _break_before_list, t)

    def _normalize_bullet(match):
        return f"{match.group(1)}\n\u2022 "
    t = re.sub(r'([^\u2022\-\u2013\u2014*\s])\s*\u2022\s*', _normalize_bullet, t)

    def _break_before_number(match):
        prefix = match.group(1)
        source = match.string
        if match.start(1) > 0 and source[match.start(1) - 1].isdigit():
            return match.group(0)
        return prefix + "\n\n"

    t = re.sub(r'(\S{15,})\s*(?=\d{1,2}[\)\.]\s+)', _break_before_number, t)

    #    - –ø–æ—Å–ª–µ ":", –µ—Å–ª–∏ –¥–∞–ª–µ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫/–Ω—É–º–µ—Ä–∞—Ü–∏—è ‚Äî –ø–µ—Ä–µ–Ω–æ—Å
    t = re.sub(r':\s*(?=(?:‚Ä¢|[\-‚Äì‚Äî*]|\d{1,2}[\)\.])\s+)', ':\n\n', t)

    # 3) –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —á–µ—Ç–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–æ–≤–æ–≥–æ –∞–±–∑–∞—Ü–∞
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –∏–¥–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (>50 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ —á–∏—Å–ª–æ
    t = re.sub(r'([.!?])\s+(?=[A-Z–ê-–Ø–Å](?:[^.!?]{50,}|\d))', r'\1\n\n', t)

    # 4) –†–∞–∑—Ä—ã–≤–∞–µ–º ¬´—Å–∫–ª–µ–π–∫–∏¬ª CamelCase/–ì–æ—ÄCamel
    t = re.sub(r'(?<=[–∞-—è—ë])(?=[–ê-–Ø–Å][–∞-—è—ë])', ' ', t)
    t = re.sub(r'(?<=[a-z])(?=[A-Z][a-z])', ' ', t)

    # 5) –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    t = re.sub(r'\n{3,}', '\n\n', t)

    # -----------------------------------------

    # –ü–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ‚Äî –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    # –ê–≤—Ç–æ-–∫–ª—é—á–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Å–ª–æ–≤–∞–º.
    ukeys = underline_keywords or []

    lines = t.split("\n")
    out: list[str] = []
    prev_blank = True

    for line in lines:
        raw = line.rstrip()

        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ -> –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü
        if not raw:
            if not prev_blank:
                out.append("<br>")
            prev_blank = True
            continue

        s = raw

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ (–∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ / "1) ..."/"1. ..." / —Å—Ç—Ä–æ–∫–∞ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ":")
        # _is_heading –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç —Ñ–æ—Ä–º—ã —Å—Ç—Ä–æ–∫–∏.
        if _is_heading(s):
            s2 = re.sub(r"^\d+[\.\)]\s+", "", s).strip()
            out.append(f"<b>{html_escape(s2)}</b>")
            out.append("<br>")  # –Ω–µ–±–æ–ª—å—à–æ–π ¬´–≤–æ–∑–¥—É—Ö¬ª –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            prev_blank = False
            continue

        # –°–ø–∏—Å–∫–∏ / –Ω—É–º–µ—Ä–∞—Ü–∏—è (—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –Ω–µ —Å–ª–æ–≤–∞)
        bullet = ""
        m_num = re.match(r"^(\d+[\.\)])\s+(.*)$", s)
        if m_num:
            bullet = f"{m_num.group(1)} "
            s = m_num.group(2)
        elif re.match(r"^[\-‚Äì‚Äî*‚Ä¢]\s+(.*)$", s):
            s = re.sub(r"^[\-‚Äì‚Äî*‚Ä¢]\s+", "", s, count=1)
            bullet = "‚Ä¢ "

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
        e = html_escape(s)
        e = re.sub(r'_(?!\s)([^_<>]{1,200}?)(?<!\s)_', r'<i>\1</i>', e)

        # ¬´–¢–µ—Ä–º–∏–Ω: –ø–æ—è—Å–Ω–µ–Ω–∏–µ¬ª ‚Äî –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é (–±–µ–∑ —Å–ª–æ–≤–∞—Ä–µ–π)
        m_term = re.match(r"^([^:\n]{3,80}:\s*)(.*)$", e)
        if m_term:
            term = m_term.group(1).strip()
            explanation = m_term.group(2).strip()
            e = f"<b>{term}</b> {explanation}"

        # –ü–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ –¢–û–õ–¨–ö–û —è–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
        for kw in ukeys:
            if not kw:
                continue
            safe_kw = html_escape(kw)
            e = re.sub(
                rf"(?iu)(?<![A-Za-z–ê-–Ø–∞-—è–Å—ë0-9\-])({re.escape(safe_kw)})(?![A-Za-z–ê-–Ø–∞-—è–Å—ë0-9\-])",
                r"<u>\1</u>",
                e,
            )

        # Markdown-—Å—Å—ã–ª–∫–∏ -> <a>
        e = re.sub(
            r"\[([^\]]{1,200})\]\((https?://[^\s)]+)\)",
            lambda m: f'<a href="{html_escape(m.group(2), quote=True)}">{html_escape(m.group(1))}</a>',
            e,
        )
        # –ê–≤—Ç–æ—Å—Å—ã–ª–∫–∏
        e = _linkify(e)

        out.append((bullet + e).strip())
        prev_blank = False

    # –°–∫–ª–µ–π–∫–∞ + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–±–∑–∞—Ü–µ–≤
    html_parts: list[str] = []
    for piece in out:
        if piece == "<br>":
            if html_parts and html_parts[-1] != "<br><br>":
                html_parts.append("<br><br>")
            continue
        if html_parts:
            html_parts.append("<br>")
        html_parts.append(piece)

    result = "".join(html_parts).strip()
    result = re.sub(r"(?:<br>){3,}", "<br><br>", result)
    return result or "‚Äî"

