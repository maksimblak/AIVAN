"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ –ò–ò-–ò–≤–∞–Ω
–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —ç–º–æ–¥–∑–∏, —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
"""

from __future__ import annotations

# Callback –∫–ª–∞—Å—Å—ã –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –±–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä

# ============ –≠–ú–û–î–ó–ò –ö–û–ù–°–¢–ê–ù–¢–´ ============

class Emoji:
    """–ö–æ–ª–ª–µ–∫—Ü–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ
    ROBOT = "ü§ñ"
    LAW = "‚öñÔ∏è"
    DOCUMENT = "üìã"
    SEARCH = "üîç"
    IDEA = "üí°"
    WARNING = "‚ö†Ô∏è"
    SUCCESS = "‚úÖ"
    ERROR = "‚ùå"
    LOADING = "‚è≥"
    FIRE = "üî•"
    STAR = "‚≠ê"
    MAGIC = "‚ú®"

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∞
    CIVIL = "üè†"
    CRIMINAL = "üö®"
    CORPORATE = "üè¢"
    CONTRACT = "üìù"
    LABOR = "üë®‚Äçüíº"
    TAX = "üí∞"
    REAL_ESTATE = "üèòÔ∏è"
    IP = "üíº"
    ADMIN = "üèõÔ∏è"
    FAMILY = "üë™"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    BACK = "‚óÄÔ∏è"
    HOME = "üè†"
    HELP = "‚ùì"
    SETTINGS = "‚öôÔ∏è"
    STATS = "üìä"
    UP = "üî∫"
    DOWN = "üîª"

    # –î–µ–π—Å—Ç–≤–∏—è
    SAVE = "üíæ"
    SHARE = "üì§"
    COPY = "üìÑ"
    PRINT = "üñ®Ô∏è"
    DOWNLOAD = "üì•"

    # –°—Ç–∞—Ç—É—Å—ã
    ONLINE = "üü¢"
    OFFLINE = "üî¥"
    PENDING = "üü°"
    CLOCK = "üïê"
    CALENDAR = "üìÖ"

# ============ –¶–í–ï–¢–û–í–´–ï –°–•–ï–ú–´ ============

class Colors:
    """–¶–≤–µ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram, –Ω–æ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)"""
    PRIMARY = "#2196F3"    # –°–∏–Ω–∏–π
    SUCCESS = "#4CAF50"    # –ó–µ–ª–µ–Ω—ã–π
    WARNING = "#FF9800"    # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    ERROR = "#F44336"      # –ö—Ä–∞—Å–Ω—ã–π
    INFO = "#00BCD4"       # –ì–æ–ª—É–±–æ–π

# ============ –®–ê–ë–õ–û–ù–´ –°–û–û–ë–©–ï–ù–ò–ô ============

class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    WELCOME = f"""{Emoji.LAW} **–ò–ò\\-–ò–≤–∞–Ω** ‚Äî –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

{Emoji.ROBOT} –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –ø—Ä–∞–≤–µ –∏ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ
{Emoji.SEARCH} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–µ–ª–∞, –Ω–∞—Ö–æ–∂—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É  
{Emoji.DOCUMENT} –ì–æ—Ç–æ–≤–ª—é —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

{Emoji.WARNING} *–í–∞–∂–Ω–æ*: –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —é—Ä–∏—Å—Ç–æ–º

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    HELP = f"""{Emoji.HELP} **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

{Emoji.MAGIC} **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**

{Emoji.IDEA} –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —é—Ä–∏—Å–¥–∏–∫—Ü–∏—é
{Emoji.CALENDAR} –£–ø–æ–º–∏–Ω–∞–π—Ç–µ –¥–∞—Ç—ã –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
{Emoji.DOCUMENT} –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞
{Emoji.STAR} –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —á–µ—Ç–∫–∏–π –ø—Ä–∞–≤–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å

{Emoji.LAW} **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–µ–ª
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

{Emoji.WARNING} **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
–ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü"""

    CATEGORIES = f"""{Emoji.LAW} **–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞**

–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:"""

    PROCESSING_STAGES = [
        f"{Emoji.SEARCH} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...",
        f"{Emoji.LOADING} –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É...",
        f"{Emoji.DOCUMENT} –§–æ—Ä–º–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç...",
        f"{Emoji.MAGIC} –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."
    ]

    ERROR_GENERIC = f"""{Emoji.ERROR} **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å\\.

{Emoji.HELP} *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"""

    NO_QUESTION = f"""{Emoji.WARNING} **–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞\\."""

# ============ –ö–õ–ê–í–ò–ê–¢–£–†–´ –£–ë–†–ê–ù–´ ============
# –í—Å–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–¥–∞–ª–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# ============ –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–ê–í–ê ============

LEGAL_CATEGORIES = {
    "civil": {
        "name": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CIVIL,
        "description": "–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –ª–∏—á–Ω—ã–µ –Ω–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "examples": ["–î–æ–≥–æ–≤–æ—Ä—ã", "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "–î–µ–ª–∏–∫—Ç—ã"]
    },
    "corporate": {
        "name": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CORPORATE,
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü",
        "examples": ["–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ –û–û–û", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã", "–†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "M&A"]
    },
    "contract": {
        "name": "–î–æ–≥–æ–≤–æ—Ä–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CONTRACT,
        "description": "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤",
        "examples": ["–ü–æ—Å—Ç–∞–≤–∫–∞", "–ü–æ–¥—Ä—è–¥", "–ê—Ä–µ–Ω–¥–∞", "–ó–∞–π–º"]
    },
    "labor": {
        "name": "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.LABOR,
        "description": "–¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞",
        "examples": ["–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–û—Ç–ø—É—Å–∫–∞", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"]
    },
    "tax": {
        "name": "–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.TAX,
        "description": "–ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –§–ù–°",
        "examples": ["–ù–î–°", "–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å", "–ù–î–§–õ", "–ü—Ä–æ–≤–µ—Ä–∫–∏"]
    },
    "real_estate": {
        "name": "–ü—Ä–∞–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        "emoji": Emoji.REAL_ESTATE,
        "description": "–°–¥–µ–ª–∫–∏ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é –∏ –∑–µ–º–µ–ª—å–Ω—ã–º–∏ —É—á–∞—Å—Ç–∫–∞–º–∏",
        "examples": ["–ö—É–ø–ª—è-–ø—Ä–æ–¥–∞–∂–∞", "–ê—Ä–µ–Ω–¥–∞", "–ò–ø–æ—Ç–µ–∫–∞", "–ö–∞–¥–∞—Å—Ç—Ä"]
    },
    "ip": {
        "name": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "emoji": Emoji.IP,
        "description": "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞, —Ç–æ–≤–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏, –ø–∞—Ç–µ–Ω—Ç—ã",
        "examples": ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¢–ó", "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞", "–ü–∞—Ç–µ–Ω—Ç—ã", "–õ–∏—Ü–µ–Ω–∑–∏–∏"]
    },
    "admin": {
        "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.ADMIN,
        "description": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥–æ—Å–æ—Ä–≥–∞–Ω–∞–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "examples": ["–õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–®—Ç—Ä–∞—Ñ—ã", "–ì–æ—Å—É—Å–ª—É–≥–∏", "–ö–æ–Ω—Ç—Ä–æ–ª—å"]
    },
    "criminal": {
        "name": "–£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CRIMINAL,
        "description": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ —É–≥–æ–ª–æ–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "examples": ["–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ", "–ù–∞–ª–æ–≥–æ–≤—ã–µ", "–ó–∞—â–∏—Ç–∞"]
    },
    "family": {
        "name": "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.FAMILY,
        "description": "–ë—Ä–∞–∫, —Ä–∞–∑–≤–æ–¥, –∞–ª–∏–º–µ–Ω—Ç—ã, –æ–ø–µ–∫–∞",
        "examples": ["–†–∞–∑–≤–æ–¥", "–ê–ª–∏–º–µ–Ω—Ç—ã", "–†–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞", "–û–ø–µ–∫–∞"]
    }
}

def get_category_info(category_id: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∞"""
    return LEGAL_CATEGORIES.get(category_id, {
        "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        "emoji": Emoji.LAW,
        "description": "–û–±—â–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
        "examples": []
    })

# ============ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï ============

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

def format_legal_response(text: str, category: str | None = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π MarkdownV2"""

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    if category:
        category_info = get_category_info(category)
        header = f"{category_info['emoji']} **{escape_markdown_v2(category_info['name'])}**\n\n"
        text = header + text


    return text

def create_progress_message(stage: int, total: int = 4) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    if stage >= len(MessageTemplates.PROCESSING_STAGES):
        stage = len(MessageTemplates.PROCESSING_STAGES) - 1

    progress_bar = "‚ñì" * stage + "‚ñë" * (total - stage)
    percentage = int((stage / total) * 100)

    return f"{MessageTemplates.PROCESSING_STAGES[stage]}\n\n`{progress_bar}` {percentage}%"

# ============ HTML –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø STREAMING ============

import re
from html import escape as html_escape


def _md_links_to_anchors(line: str) -> str:
    """Convert markdown links [text](url) into safe HTML anchors.

    Both link text and URL are escaped; only http/https URLs are allowed.
    """
    pattern = re.compile(r"\[([^\]]+)\]\((https?://[^\s)]+)\)")
    result_parts: list[str] = []
    last = 0
    for m in pattern.finditer(line):
        # escape non-link part
        result_parts.append(html_escape(line[last:m.start()]))
        text = html_escape(m.group(1))
        url = html_escape(m.group(2), quote=True)
        result_parts.append(f'<a href="{url}">{text}</a>')
        last = m.end()
    # tail
    result_parts.append(html_escape(line[last:]))
    return ''.join(result_parts)

def sanitize_telegram_html(raw: str) -> str:
    """Allow only Telegram-supported HTML tags; escape the rest.

    Allowed: b, i, u, s, code, pre, a[href=http/https], br
    """
    if not raw:
        return ""
    # Start from fully escaped text
    esc = html_escape(raw, quote=True)
    # Restore <br>, <br/>, <br />
    esc = re.sub(r"&lt;br\s*/?&gt;", "<br>", esc, flags=re.IGNORECASE)
    # Restore simple tags exactly
    for tag in ("b", "i", "u", "s", "code", "pre"):
        esc = re.sub(fr"&lt;{tag}&gt;", fr"<{tag}>", esc, flags=re.IGNORECASE)
        esc = re.sub(fr"&lt;/{tag}&gt;", fr"</{tag}>", esc, flags=re.IGNORECASE)
    # Restore anchors with http(s) only; keep entities like &amp; inside href
    esc = re.sub(r"&lt;a href=&quot;(https?://[^&quot;]+)&quot;&gt;", r'<a href="\1">', esc, flags=re.IGNORECASE)
    esc = re.sub(r"&lt;/a&gt;", "</a>", esc, flags=re.IGNORECASE)
    return esc

def render_legal_html(raw: str) -> str:
    """Beautify plain model text into simple, safe HTML.

    - Escapes HTML by default
    - Converts [text](url) markdown links to <a>
    - Bolds headings (lines ending with ':' or starting with 'N) ' or 'TL;DR')
    - Normalizes bullets (leading '-', '‚Äî', '‚Ä¢') to an em dash '‚Äî '
    - Replaces newlines with <br>
    """
    if not raw:
        return ""

    # If looks like HTML from the model, sanitize and keep structure
    if '<' in raw and re.search(r"<\s*(b|i|u|s|code|pre|a|br)\b", raw, re.IGNORECASE):
        return sanitize_telegram_html(raw)

    def _auto_paragraph_breaks(text: str) -> str:
        # Normalize spaces but preserve intentional structure
        t = re.sub(r"[ \t]+", " ", text)  # Only normalize spaces/tabs, keep newlines

        # Insert breaks before numbered items like "1) ", "2) ", "1.", "2."
        t = re.sub(r"(?<!\n)(?=\b\d+[\.)]\s)", "\n\n", t)

        # Insert breaks before section markers
        t = re.sub(r"(?<!\n)(?=\b(?:–ö–æ—Ä–æ—Ç–∫–æ|–î–∞–ª–µ–µ|–í–∞—Ä–∏–∞–Ω—Ç|–ò—Ç–∞–∫|–†–µ–∑—é–º–µ|–ó–∞–∫–ª—é—á–µ–Ω–∏–µ)\b)", "\n\n", t)

        # Break after sentence end before em dash bullets or numbers
        t = re.sub(r"(?<=[\.!?])\s+(?=(?:‚Äî|‚Ä¢|-|\d+[\.)]\s))", "\n", t)

        # NEW: Break before em dashes that start new thoughts (–ø–æ—Å–ª–µ —Ç–æ—á–∫–∏, —Å–∫–æ–±–∫–∏ –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        t = re.sub(r"(?<=[\.!?\)])\s+(?=‚Äî\s+[–ê-–ØA-Z])", "\n", t)

        # NEW: Break before em dashes in middle of text that indicate new bullet points
        t = re.sub(r"(?<=\.)\s+(?=‚Äî\s+[–ê-–ØA-Z–∞-—è])", "\n", t)

        # Insert breaks before article references like "—Å—Ç. 304", "–°—Ç–∞—Ç—å—è 222"
        t = re.sub(r"(?<=[\.!?])\s+(?=(?:‚Äî\s*)?(?:—Å—Ç\.|–°—Ç–∞—Ç—å—è)\s*\d+)", "\n", t)

        # Break long sentences with semicolons into separate lines
        t = re.sub(r";\s+(?=–∏\s+\d+\))", ";\n‚Äî ", t)

        return t

    text = raw.replace('\r\n', '\n').replace('\r', '\n')

    # Always apply auto paragraph breaks for better structure
    text = _auto_paragraph_breaks(text)

    lines = text.split('\n')
    out: list[str] = []

    prev_was_empty = False

    for i, line in enumerate(lines):
        stripped = line.strip()

        # Handle empty lines - create paragraph breaks
        if stripped == "":
            if not prev_was_empty:  # Avoid multiple consecutive breaks
                out.append("<br><br>")
                prev_was_empty = True
            continue

        prev_was_empty = False

        # Enhanced bullet detection
        if re.match(r"^\s*[-‚Ä¢‚Äî]\s+", line):
            line = re.sub(r"^\s*[-‚Ä¢‚Äî]\s+", "‚Äî ", line)

        # Transform md links and escape other parts FIRST
        html_line = _md_links_to_anchors(line)

        # Check if this is a numbered list item
        is_numbered_item = re.match(r"^\s*\d+[\.)]\s+", stripped)
        if is_numbered_item:
            html_line = re.sub(r"(\d+[\.)]\s+)", r"<b>\1</b>", html_line)

        # Enhanced heading detection (–∏—Å–∫–ª—é—á–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
        is_heading = (
            stripped.endswith(":") and not is_numbered_item or
            stripped.upper().startswith(("–ö–û–†–û–¢–ö–û", "TL;DR", "–†–ï–ó–Æ–ú–ï", "–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï"))
        )

        # Special formatting for article references AFTER escaping
        if re.search(r"\b(?:—Å—Ç\.|–°—Ç–∞—Ç—å—è)\s*\d+", stripped):
            html_line = re.sub(r"(\b(?:—Å—Ç\.|–°—Ç–∞—Ç—å—è)\s*\d+[^\s]*)", r"<b>\1</b>", html_line)

        # Check if this line should start a new paragraph
        is_paragraph_start = (
            is_heading or
            is_numbered_item or
            re.match(r"^\s*[-‚Ä¢‚Äî]\s+", stripped) or     # Bullet point
            (i > 0 and lines[i-1].strip() == "")       # After empty line
        )

        if is_heading:
            html_line = f"<b>{html_line}</b>"
            out.append(html_line + "<br><br>")
        elif is_paragraph_start and out and not out[-1].endswith("<br><br>"):
            # Add paragraph break before this line if needed
            out.append("<br>" + html_line + "<br>")
        else:
            out.append(html_line + "<br>")

    # Clean up multiple breaks and ensure proper paragraph separation
    html_result = ''.join(out)

    # Remove excessive breaks (more than 2 consecutive) but keep paragraph structure
    html_result = re.sub(r"(?:<br>\s*){3,}", "<br><br>", html_result)

    # Clean up trailing breaks
    html_result = re.sub(r"(?:<br>\s*)+$", "", html_result)

    return html_result
