"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ –ò–ò-–ò–≤–∞–Ω
–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —ç–º–æ–¥–∑–∏, —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

from __future__ import annotations

# ============ –≠–ú–û–î–ó–ò –ö–û–ù–°–¢–ê–ù–¢–´ ============


class Emoji:
    """–ö–æ–ª–ª–µ–∫—Ü–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ
    ROBOT = "ü§ñ"
    LAW = "‚öñÔ∏è"
    DOCUMENT = "üìã"
    SEARCH = "üîç"
    IDEA = "üí°"
    WARNING = "‚ö†Ô∏è"
    SUCCESS = "‚úÖ"
    ERROR = "‚ùå"
    LOADING = "‚è≥"
    FIRE = "üî•"
    STAR = "‚≠ê"
    MAGIC = "‚ú®"

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∞
    CIVIL = "üè†"
    CRIMINAL = "üö®"
    CORPORATE = "üè¢"
    CONTRACT = "üìù"
    LABOR = "üë®‚Äçüíº"
    TAX = "üí∞"
    REAL_ESTATE = "üèòÔ∏è"
    IP = "üíº"
    ADMIN = "üèõÔ∏è"
    FAMILY = "üë™"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    BACK = "‚óÄÔ∏è"
    HOME = "üè†"
    HELP = "‚ùì"
    SETTINGS = "‚öôÔ∏è"
    STATS = "üìä"
    UP = "üî∫"
    DOWN = "üîª"

    # –î–µ–π—Å—Ç–≤–∏—è
    SAVE = "üíæ"
    SHARE = "üì§"
    COPY = "üìÑ"
    PRINT = "üñ®Ô∏è"
    DOWNLOAD = "üì•"

    # –°—Ç–∞—Ç—É—Å—ã
    ONLINE = "üü¢"
    OFFLINE = "üî¥"
    PENDING = "üü°"
    CLOCK = "üïê"
    CALENDAR = "üìÖ"


# ============ –¶–í–ï–¢–û–í–´–ï –°–•–ï–ú–´ ============


class Colors:
    """–¶–≤–µ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram, –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)"""

    PRIMARY = "#2196F3"  # –°–∏–Ω–∏–π
    SUCCESS = "#4CAF50"  # –ó–µ–ª–µ–Ω—ã–π
    WARNING = "#FF9800"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    ERROR = "#F44336"  # –ö—Ä–∞—Å–Ω—ã–π
    INFO = "#00BCD4"  # –ì–æ–ª—É–±–æ–π


# ============ –®–ê–ë–õ–û–ù–´ –°–û–û–ë–©–ï–ù–ò–ô (MarkdownV2) ============


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (MarkdownV2)"""

    WELCOME = f"""{Emoji.LAW} **–ò–ò\\-–ò–≤–∞–Ω** ‚Äî –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

{Emoji.ROBOT} –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –ø—Ä–∞–≤–µ –∏ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ
{Emoji.SEARCH} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–µ–ª–∞, –Ω–∞—Ö–æ–∂—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É  
{Emoji.DOCUMENT} –ì–æ—Ç–æ–≤–ª—é —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

{Emoji.WARNING} *–í–∞–∂–Ω–æ*: –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —é—Ä–∏—Å—Ç–æ–º

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    HELP = f"""{Emoji.HELP} **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

{Emoji.MAGIC} **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**

{Emoji.IDEA} –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —é—Ä–∏—Å–¥–∏–∫—Ü–∏—é
{Emoji.CALENDAR} –£–ø–æ–º–∏–Ω–∞–π—Ç–µ –¥–∞—Ç—ã –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
{Emoji.DOCUMENT} –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞
{Emoji.STAR} –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —á–µ—Ç–∫–∏–π –ø—Ä–∞–≤–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å

{Emoji.LAW} **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–µ–ª
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

{Emoji.WARNING} **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
–ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü"""

    CATEGORIES = f"""{Emoji.LAW} **–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞**

–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:"""

    PROCESSING_STAGES = [
        f"{Emoji.SEARCH} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...",
        f"{Emoji.LOADING} –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É...",
        f"{Emoji.DOCUMENT} –§–æ—Ä–º–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç...",
        f"{Emoji.MAGIC} –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
    ]

    ERROR_GENERIC = f"""{Emoji.ERROR} **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å\\.

{Emoji.HELP} *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"""

    NO_QUESTION = f"""{Emoji.WARNING} **–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞\\."""


# ============ –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–ê–í–ê ============

LEGAL_CATEGORIES = {
    "civil": {
        "name": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CIVIL,
        "description": "–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –ª–∏—á–Ω—ã–µ –Ω–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "examples": ["–î–æ–≥–æ–≤–æ—Ä—ã", "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "–î–µ–ª–∏–∫—Ç—ã"],
    },
    "corporate": {
        "name": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CORPORATE,
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü",
        "examples": ["–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ –û–û–û", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã", "–†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "M&A"],
    },
    "contract": {
        "name": "–î–æ–≥–æ–≤–æ—Ä–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CONTRACT,
        "description": "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤",
        "examples": ["–ü–æ—Å—Ç–∞–≤–∫–∞", "–ü–æ–¥—Ä—è–¥", "–ê—Ä–µ–Ω–¥–∞", "–ó–∞–π–º"],
    },
    "labor": {
        "name": "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.LABOR,
        "description": "–¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞",
        "examples": ["–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–û—Ç–ø—É—Å–∫–∞", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"],
    },
    "tax": {
        "name": "–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.TAX,
        "description": "–ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –§–ù–°",
        "examples": ["–ù–î–°", "–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å", "–ù–î–§–õ", "–ü—Ä–æ–≤–µ—Ä–∫–∏"],
    },
    "real_estate": {
        "name": "–ü—Ä–∞–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        "emoji": Emoji.REAL_ESTATE,
        "description": "–°–¥–µ–ª–∫–∏ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é –∏ –∑–µ–º–µ–ª—å–Ω—ã–º–∏ —É—á–∞—Å—Ç–∫–∞–º–∏",
        "examples": ["–ö—É–ø–ª—è-–ø—Ä–æ–¥–∞–∂–∞", "–ê—Ä–µ–Ω–¥–∞", "–ò–ø–æ—Ç–µ–∫–∞", "–ö–∞–¥–∞—Å—Ç—Ä"],
    },
    "ip": {
        "name": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "emoji": Emoji.IP,
        "description": "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞, —Ç–æ–≤–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏, –ø–∞—Ç–µ–Ω—Ç—ã",
        "examples": ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¢–ó", "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞", "–ü–∞—Ç–µ–Ω—Ç—ã", "–õ–∏—Ü–µ–Ω–∑–∏–∏"],
    },
    "admin": {
        "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.ADMIN,
        "description": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥–æ—Å–æ—Ä–≥–∞–Ω–∞–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "examples": ["–õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–®—Ç—Ä–∞—Ñ—ã", "–ì–æ—Å—É—Å–ª—É–≥–∏", "–ö–æ–Ω—Ç—Ä–æ–ª—å"],
    },
    "criminal": {
        "name": "–£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.CRIMINAL,
        "description": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ —É–≥–æ–ª–æ–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        "examples": ["–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ", "–ù–∞–ª–æ–≥–æ–≤—ã–µ", "–ó–∞—â–∏—Ç–∞"],
    },
    "family": {
        "name": "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "emoji": Emoji.FAMILY,
        "description": "–ë—Ä–∞–∫, —Ä–∞–∑–≤–æ–¥, –∞–ª–∏–º–µ–Ω—Ç—ã, –æ–ø–µ–∫–∞",
        "examples": ["–†–∞–∑–≤–æ–¥", "–ê–ª–∏–º–µ–Ω—Ç—ã", "–†–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞", "–û–ø–µ–∫–∞"],
    },
}


def get_category_info(category_id: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤–∞"""
    return LEGAL_CATEGORIES.get(
        category_id,
        {
            "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            "emoji": Emoji.LAW,
            "description": "–û–±—â–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            "examples": [],
        },
    )


# ============ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï (MarkdownV2) ============


def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    special_chars = [
        "_",
        "*",
        "[",
        "]",
        "(",
        ")",
        "~",
        "`",
        ">",
        "#",
        "+",
        "-",
        "=",
        "|",
        "{",
        "}",
        ".",
        "!",
    ]
    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    return text


def format_legal_response(text: str, category: str | None = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π MarkdownV2"""
    if category:
        category_info = get_category_info(category)
        header = f"{category_info['emoji']} **{escape_markdown_v2(category_info['name'])}**\n\n"
        text = header + text
    return text


def create_progress_message(stage: int, total: int = 4) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (MarkdownV2)"""
    if stage >= len(MessageTemplates.PROCESSING_STAGES):
        stage = len(MessageTemplates.PROCESSING_STAGES) - 1
    progress_bar = "‚ñì" * stage + "‚ñë" * (total - stage)
    percentage = int((stage / total) * 100)
    return f"{MessageTemplates.PROCESSING_STAGES[stage]}\n\n`{progress_bar}` {percentage}%"


def create_progress_message_html(stage: int, total: int = 4) -> str:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è HTML-—Ä–µ–∂–∏–º–∞ (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ parse_mode=HTML)"""
    if stage >= len(MessageTemplates.PROCESSING_STAGES):
        stage = len(MessageTemplates.PROCESSING_STAGES) - 1
    progress_bar = "‚ñì" * stage + "‚ñë" * (total - stage)
    percentage = int((stage / total) * 100)
    return f"{MessageTemplates.PROCESSING_STAGES[stage]}<br><br><code>{progress_bar}</code> {percentage}%"


# ============ HTML –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø STREAMING ============

import re
from html import escape as html_escape

# --- Telegram HTML sanitizer (allowlist) ---
ALLOWED_TAGS = {"b", "i", "u", "s", "code", "pre", "a", "br"}


def sanitize_telegram_html(html: str) -> str:
    """
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏: b,i,u,s,code,pre,a(href=http/https),br.
    –£ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏.
    –£ <a> –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π href, –ø—Ä–æ—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç.
    """
    if not html:
        return ""

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Ç–µ–≥, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ "a < b"
    html = re.sub(r"<(?!/?[a-zA-Z])", "&lt;", html)

    tag_re = re.compile(r"</?([a-zA-Z0-9]+)(\s[^>]*)?>", re.IGNORECASE)

    def _clean_tag(match: re.Match) -> str:
        full = match.group(0)
        name = (match.group(1) or "").lower()
        attrs = match.group(2) or ""
        is_closing = full.startswith("</")

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏ ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if name not in ALLOWED_TAGS:
            return html_escape(full)

        # <br> –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤; –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –Ω–µ—Ç
        if name == "br":
            return "" if is_closing else "<br>"

        # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
        if is_closing:
            return f"</{name}>"

        # –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–≥–∏ –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–∫—Ä–æ–º–µ <a>)
        if name in {"b", "i", "u", "s", "code", "pre"}:
            return f"<{name}>"

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ <a ...>
        if name == "a":
            href = ""
            if attrs:
                # href="..." –∏–ª–∏ href='...'
                m = re.search(r'href\s*=\s*"(.*?)"', attrs, re.IGNORECASE)
                if not m:
                    m = re.search(r"href\s*=\s*'([^']*)'", attrs, re.IGNORECASE)
                if m:
                    cand = (m.group(1) or "").strip()
                    if cand.lower().startswith(("http://", "https://")):
                        href = html_escape(cand, quote=True)
            # –µ—Å–ª–∏ href –≤–∞–ª–∏–¥–Ω—ã–π ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É; –∏–Ω–∞—á–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Ç–µ–≥–∞
            return f'<a href="{href}">' if href else html_escape(full)

        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        return html_escape(full)

    return tag_re.sub(_clean_tag, html)


def _md_links_to_anchors(line: str) -> str:
    """Convert markdown links [text](url) into safe HTML anchors.

    Both link text and URL are escaped; only http/https URLs are allowed.
    """
    pattern = re.compile(r"\[([^\]]+)\]\((https?://[^\s)]+)\)")
    result_parts: list[str] = []
    last = 0
    for m in pattern.finditer(line):
        # escape non-link part
        result_parts.append(html_escape(line[last : m.start()]))
        text = html_escape(m.group(1))
        url = html_escape(m.group(2), quote=True)
        result_parts.append(f'<a href="{url}">{text}</a>')
        last = m.end()
    # tail
    result_parts.append(html_escape(line[last:]))
    return "".join(result_parts)


def render_legal_html(raw: str) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä ¬´—Å—ã—Ä–æ–≥–æ¬ª —Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏ –≤ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π HTML –¥–ª—è Telegram.

    –î–µ–ª–∞–µ—Ç:
    - –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç markdown-—Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url) –≤ <a>
    - –°—Ç–∞–≤–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫:
        ‚Ä¢ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (. ! ? ‚Ä¶), –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –∏–¥—ë—Ç –∑–∞–≥–ª–∞–≤–Ω–∞—è/—Ü–∏—Ñ—Ä–∞/–±—É–ª–ª–µ—Ç/—Å–∫–æ–±–∫–∞
        ‚Ä¢ –ø–µ—Ä–µ–¥ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏: 1) / 2. / a) / IV. (–≤ —Ç.—á. —Å–ª–µ–ø–ª–µ–Ω–Ω—ã–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞)
        ‚Ä¢ –ø–µ—Ä–µ–¥ –±—É–ª–ª–µ—Ç–∞–º–∏ ‚Äî ‚Ä¢ - ‚Äî (–µ—Å–ª–∏ –æ–Ω–∏ ¬´–ø—Ä–∏–ª–∏–ø–ª–∏¬ª)
        ‚Ä¢ –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö ¬´–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤¬ª (—Å—Ç—Ä–æ–∫–∏ –¥–æ 80 —Å–∏–º–≤., –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ :)
    - –í—ã–¥–µ–ª—è–µ—Ç –∂–∏—Ä–Ω—ã–º –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ)
    - –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ –∫ ¬´‚Äî ¬ª
    - –ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –Ω–∞ <br>, —á–∏—Å—Ç–∏—Ç –ª–∏—à–Ω–∏–µ <br>
    """
    if not raw:
        return ""

    # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–∏—à—ë–ª HTML —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Ç–µ–≥–∞–º–∏ ‚Äî –ª–∏—à—å —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º
    if "<" in raw and re.search(r"<\s*(?:b|i|u|s|code|pre|a|br)\b", raw, re.IGNORECASE):
        return sanitize_telegram_html(raw)

    text = raw.replace("\r\n", "\n").replace("\r", "\n")

    # 0) –ß—É—Ç—å –ø–æ–¥—á–∏—Å—Ç–∏–º –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r"[ \t]+", " ", text)

    # 1) –ü–æ—á–∏–Ω–∏–º ¬´—Å–ª–µ–ø–ª–µ–Ω–Ω—ã–µ¬ª –Ω—É–º–µ—Ä–∞—Ç–æ—Ä—ã: 1)–ö–æ—Ä–æ—Ç–∫–æ ‚Üí 1) –ö–æ—Ä–æ—Ç–∫–æ (–∏ 2.–ü—Ä–∏–º–µ—Ä ‚Üí 2. –ü—Ä–∏–º–µ—Ä)
    text = re.sub(r"(?<=\b\d{1,3}[\.)])(?=\S)", " ", text)                    # 1)/2./10)
    text = re.sub(r"(?<=\b[IVXLCMivxlcm]{1,5}[\.)])(?=\S)", " ", text)        # I)/IV.
    text = re.sub(r"(?<=\b[A-Za-z–ê-–Ø–∞-—è–Å—ë][\.)])(?=\S)", " ", text)           # a)/–±)

    # 2) –ü–µ—Ä–µ–Ω–æ—Å –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è ¬´–Ω–æ–≤–∞—è –º—ã—Å–ª—å¬ª
    #    (–±—É–ª–ª–µ—Ç/–∑–∞–≥–ª–∞–≤–Ω–∞—è/—Ü–∏—Ñ—Ä–∞/—Å–∫–æ–±–∫–∞). –ù–µ —Ç—Ä–æ–≥–∞–µ–º –≤–Ω—É—Ç—Ä–∏ —á–∏—Å–µ–ª/—Å–æ–∫—Ä–∞—â–µ–Ω–∏–π.
    text = re.sub(
        r"(?<=[\.\!\?‚Ä¶])\s+(?=[‚Äî‚Ä¢\-A-Z–ê-–Ø–Å0-9\(\[])",
        "\n",
        text,
    )

    # 3) –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –±—É–ª–ª–µ—Ç–∞–º–∏, –µ—Å–ª–∏ ¬´–ø—Ä–∏–ª–∏–ø–ª–∏¬ª
    text = re.sub(r"(?<!\n)\s*(?=‚Äî\s+)", "\n", text)            # –ø–µ—Ä–µ–¥ ¬´‚Äî ¬ª
    text = re.sub(r"(?<!\n)\s*(?=‚Ä¢\s+)", "\n", text)            # –ø–µ—Ä–µ–¥ ¬´‚Ä¢ ¬ª
    text = re.sub(r"(?<!\n)\s*(?=-\s+)", "\n", text)            # –ø–µ—Ä–µ–¥ ¬´- ¬ª

    # 4) –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –Ω—É–º–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ü–∏—Ñ—Ä—ã/—Ä–∏–º—Å–∫–∏–µ/–±—É–∫–≤–µ–Ω–Ω—ã–µ), –µ—Å–ª–∏ ¬´–ø—Ä–∏–ª–∏–ø–ª–∏¬ª
    enum_lookahead = r"(?=(?:\(?\s*(?:\d{1,3}|[IVXLCMivxlcm]{1,5}|[A-Za-z–ê-–Ø–∞-—è–Å—ë])[\.)])\s)"
    text = re.sub(rf"(?<!\n)\s*{enum_lookahead}", "\n\n", text)

    # 5) –ò–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Üí –º–∞–∫—Å–∏–º—É–º –¥–≤–µ
    text = re.sub(r"\n{3,}", "\n\n", text)

    # 6) –†–∞–∑–æ–±—å—ë–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∏
    lines = text.split("\n")
    out: list[str] = []
    prev_empty = False

    for line in lines:
        raw_line = line
        stripped = raw_line.strip()

        # –ø—É—Å—Ç—ã–µ
        if not stripped:
            if not prev_empty:
                out.append("<br>")
            prev_empty = True
            continue
        prev_empty = False

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º markdown-—Å—Å—ã–ª–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π HTML
        html_line = _md_links_to_anchors(stripped)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ –∫ ¬´‚Äî ¬ª
        if re.match(r"^(?:[-‚Ä¢‚Äî])\s+", stripped):
            html_line = re.sub(r"^(?:[-‚Ä¢‚Äî])\s*", "‚Äî ", html_line)

        # –ö–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: <= 80 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
        is_colon_heading = stripped.endswith(":") and len(stripped) <= 80

        # –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: "1) –¢–µ–∫—Å—Ç" / "2. –¢–µ–∫—Å—Ç" / "IV. –¢–µ–∫—Å—Ç" / "–∞) –¢–µ–∫—Å—Ç"
        is_numbered = bool(re.match(
            r"^(?:\(?\s*(?:\d{1,3}|[IVXLCMivxlcm]{1,5}|[A-Za-z–ê-–Ø–∞-—è–Å—ë])[\.)])\s+\S", stripped
        ))
        short_enumerated_title = is_numbered and (len(stripped) <= 80) and not stripped.endswith(".")

        # –ï—Å–ª–∏ —ç—Ç–æ ¬´–∑–∞–≥–æ–ª–æ–≤–æ–∫¬ª ‚Äî –¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ
        if is_colon_heading or short_enumerated_title:
            # —Å–ª–µ–≥–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∏–º —Å–∞–º –ø—Ä–µ—Ñ–∏–∫—Å –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            if is_numbered:
                html_line = re.sub(
                    r"^(\(?\s*(?:\d{1,3}|[IVXLCMivxlcm]{1,5}|[A-Za-z–ê-–Ø–∞-—è–Å—ë])[\.)])\s+",
                    r"<b>\1</b> ",
                    html_line,
                )
            out.append(f"<b>{html_line}</b><br><br>")
            continue

        # –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        out.append(html_line + "<br>")

    # –°–æ–±–µ—Ä—ë–º –∏ –ø–æ–¥—á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ <br>
    html = "".join(out)
    html = re.sub(r"(?:<br>\s*){3,}", "<br><br>", html)
    html = re.sub(r"(?:<br>\s*)+$", "", html)

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∞–Ω–∞—Ü–∏—è –ø–æ–¥ Telegram
    return sanitize_telegram_html(html)


