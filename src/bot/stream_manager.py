# src/bot/stream_manager.py
from __future__ import annotations

import asyncio
import logging
import time
from contextlib import suppress
from typing import Optional

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.types import Message

from src.core.safe_telegram import (
    format_safe_html,
    split_html_for_telegram,
    tg_edit_html,
    tg_send_html,
)

from src.bot.ui_components import Emoji

logger = logging.getLogger(__name__)


class StreamManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç streaming-–æ—Ç–≤–µ—Ç–∞–º–∏ –≤ Telegram: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è."""

    def __init__(
        self,
        bot: Bot,
        chat_id: int,
        update_interval: float = 1.5,   # –∫–∞–∫ —á–∞—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        buffer_size: int = 50,          # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç —Ç–µ–∫—Å—Ç–∞ –¥–æ –∞–ø–¥–µ–π—Ç–∞
        max_retries: int = 3,
    ):
        self.bot = bot
        self.chat_id = chat_id
        self.update_interval = update_interval
        self.buffer_size = buffer_size
        self.max_retries = max_retries

        self.message: Optional[Message] = None
        self.last_update_time = 0.0
        self.last_sent_text = ""            # —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        self.pending_text = ""              # —Å—ã—Ä–∞—è —Å–±–æ—Ä–∫–∞ –∏–∑ LLM
        self.is_final = False
        self._stopped = False
        self.update_task: Optional[asyncio.Task] = None

    async def start_streaming(self, initial_text: str | None = None) -> Message:
        """–ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∞–ø–¥–µ–π—Ç—ã."""
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∫—Ä–∞—Ç–∫–æ–µ, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if initial_text is None:
            initial_text = f"{Emoji.ROBOT} ü§î –û–±–¥—É–º—ã–≤–∞—é –æ—Ç–≤–µ—Ç..."
        self.message = await self.bot.send_message(
            chat_id=self.chat_id, text=initial_text, parse_mode=ParseMode.HTML
        )
        self.last_sent_text = initial_text
        self.last_update_time = time.time()

        self.update_task = asyncio.create_task(self._update_loop())
        logger.info(
            "Started streaming for chat %s, message %s", self.chat_id, self.message.message_id
        )
        return self.message

    async def update_text(self, new_text: str, is_final: bool = False):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–ª–±—ç–∫–æ–º —Å—Ç—Ä–∏–º–∞ OpenAI ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –±—É—Ñ–µ—Ä –∏ (–µ—Å–ª–∏ final) —Ñ–æ—Ä—Å–∏—Ç –∞–ø–¥–µ–π—Ç."""
        self.pending_text = new_text or ""
        if is_final:
            self.is_final = True
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º update_loop –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if self.update_task and not self.update_task.done():
                self.update_task.cancel()
            await self._force_update()
        else:
            self.is_final = False

    def _should_update(self) -> bool:
        """–†–µ—à–∞–µ–º, –æ–±–Ω–æ–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."""
        if not self.pending_text or not self.message:
            return False
        if self.pending_text == self.last_sent_text:
            return False

        time_passed = time.time() - self.last_update_time
        if time_passed >= self.update_interval:
            return True

        text_diff = len(self.pending_text) - len(self.last_sent_text)
        return text_diff >= self.buffer_size

    async def _force_update(self):
        if self.pending_text and self.message:
            await self._do_update()

    async def _update_loop(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ¬´–æ–¥–Ω–æ–≥–æ¬ª —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∞."""
        while not self.is_final and not self._stopped:
            try:
                await asyncio.sleep(self.update_interval)
                if self._should_update():
                    await self._do_update()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.warning("Error in update loop: %s", e)

    async def _do_update(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–∏–º –±—É—Ñ–µ—Ä–æ–º. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É, —á—Ç–æ–±—ã —É–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ 4096."""
        if not self.message:
            return
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º + —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º
        formatted = format_safe_html(self.pending_text)

        # –í–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –¥–µ—Ä–∂–∏–º ‚â§ 3900
        # –ù–æ –æ–±—Ä–µ–∑–∞–µ–º —É–º–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å HTML-—Ç–µ–≥–∏
        if len(formatted) > 3900:
            # –ò—â–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞)
            cutoff = 3890
            safe_cut = formatted.rfind('>', 0, cutoff)
            if safe_cut == -1:
                safe_cut = formatted.rfind(' ', 0, cutoff)
            if safe_cut == -1:
                safe_cut = cutoff
            formatted = formatted[:safe_cut] + "‚Ä¶"

        # –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if formatted == self.last_sent_text:
            return

        # –ù–∞–¥—ë–∂–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await tg_edit_html(
            bot=self.bot,
            chat_id=self.chat_id,
            message_id=self.message.message_id,
            html=formatted,
            max_retries=self.max_retries,
        )
        self.last_sent_text = formatted
        self.last_update_time = time.time()

    async def finalize(self, final_text: Optional[str] = None):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º:
        1) —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç,
        2) —Ä–µ–∂–µ–º –Ω–∞ –∫—É—Å–∫–∏,
        3) –ø—Ä–∞–≤–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º –∫—É—Å–∫–æ–º,
        4) —Ö–≤–æ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
        """
        if self._stopped:
            return
        self._stopped = True
        self.is_final = True

        # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        if self.update_task:
            self.update_task.cancel()
            with suppress(asyncio.CancelledError):
                await self.update_task

        # –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        full_text = (final_text if isinstance(final_text, str) else None) or (self.pending_text or "")
        formatted = format_safe_html(full_text) or "‚Äî"

        try:
            chunks = split_html_for_telegram(formatted, hard_limit=3900)
        except Exception as e:
            logger.warning("split_html_for_telegram failed: %s", e)
            chunks = [formatted[:3900] or "‚Äî"]

        if not self.message:
            # –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Å—Ç–∞—Ä—Ç –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ –∫—É—Å–∫–∏
            for idx, chunk in enumerate(chunks):
                await tg_send_html(self.bot, self.chat_id, chunk)
            return

        # 1) –ø—Ä–∞–≤–∏–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await tg_edit_html(self.bot, self.chat_id, self.message.message_id, chunks[0])
        except Exception as e:
            logger.warning("edit_message_text failed on finalize, fallback to new message: %s", e)
            # —Ö–≤–æ—Å—Ç–æ–≤–æ–π —Ñ–æ–ª–±—ç–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º/–∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            sent = await tg_send_html(self.bot, self.chat_id, chunks[0])
            self.message = sent
        self.last_sent_text = chunks[0]
        self.last_update_time = time.time()

        # 2) —Ö–≤–æ—Å—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        for tail in chunks[1:]:
            await tg_send_html(self.bot, self.chat_id, tail)

    async def stop(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∏–º–∞ (–±–µ–∑ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)."""
        self._stopped = True
        self.is_final = True
        if self.update_task:
            self.update_task.cancel()
            with suppress(asyncio.CancelledError):
                await self.update_task
        logger.info(
            "Stopped streaming for message %s", self.message.message_id if self.message else "unknown"
        )


class StreamingCallback:
    """–ê–¥–∞–ø—Ç–µ—Ä –ø–æ–¥ OpenAI streaming: –≤—ã–∑—ã–≤–∞–µ—Ç update/finalize —É StreamManager."""

    def __init__(self, stream_manager: StreamManager):
        self.stream_manager = stream_manager

    async def __call__(self, partial_text: str, is_final: bool):
        try:
            await self.stream_manager.update_text(partial_text, is_final=is_final)
        except Exception as e:
            logger.error("Error in streaming callback: %s", e)
            if is_final:
                with suppress(Exception):
                    await self.stream_manager.stop()
