"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è streaming –æ—Ç–≤–µ—Ç–æ–≤ –≤ Telegram
"""

import asyncio
import logging
import time

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter
from aiogram.types import Message

from .ui_components import render_legal_html

logger = logging.getLogger(__name__)


class StreamManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç streaming –æ—Ç–≤–µ—Ç–∞–º–∏ –≤ Telegram —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(
        self,
        bot: Bot,
        chat_id: int,
        update_interval: float = 1.5,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        buffer_size: int = 50,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        max_retries: int = 3,
    ):
        self.bot = bot
        self.chat_id = chat_id
        self.update_interval = update_interval
        self.buffer_size = buffer_size
        self.max_retries = max_retries

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.message: Message | None = None
        self.last_update_time = 0.0
        self.last_sent_text = ""
        self.pending_text = ""
        self.is_final = False
        self.update_task: asyncio.Task | None = None

    async def start_streaming(self, initial_text: str = "ü§î –û–±–¥—É–º—ã–≤–∞—é –æ—Ç–≤–µ—Ç...") -> Message:
        """–ù–∞—á–∏–Ω–∞–µ—Ç streaming, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            self.message = await self.bot.send_message(
                chat_id=self.chat_id, text=initial_text, parse_mode=ParseMode.HTML
            )
            self.last_sent_text = initial_text
            self.last_update_time = time.time()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.update_task = asyncio.create_task(self._update_loop())

            logger.info(
                f"Started streaming for chat {self.chat_id}, message {self.message.message_id}"
            )
            return self.message

        except Exception as e:
            logger.error(f"Failed to start streaming: {e}")
            raise

    async def update_text(self, new_text: str, is_final: bool = False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è streaming"""
        self.pending_text = new_text
        self.is_final = is_final

        if is_final:
            # –î–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            await self._force_update()

    async def _update_loop(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        while not self.is_final:
            try:
                await asyncio.sleep(self.update_interval)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if self._should_update():
                    await self._do_update()

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.warning(f"Error in update loop: {e}")

    def _should_update(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.pending_text or not self.message:
            return False

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if self.pending_text == self.last_sent_text:
            return False

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        time_passed = time.time() - self.last_update_time
        if time_passed >= self.update_interval:
            return True

        # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        text_diff = len(self.pending_text) - len(self.last_sent_text)
        if text_diff >= self.buffer_size:
            return True

        return False

    async def _force_update(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.pending_text and self.message:
            await self._do_update()

    async def _do_update(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.message or not self.pending_text:
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        formatted_text = render_legal_html(self.pending_text)

        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram
        if len(formatted_text) > 4000:
            formatted_text = formatted_text[:3990] + "..."

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if formatted_text == self.last_sent_text:
            return

        for retry in range(self.max_retries):
            try:
                await self.bot.edit_message_text(
                    chat_id=self.chat_id,
                    message_id=self.message.message_id,
                    text=formatted_text,
                    parse_mode=ParseMode.HTML,
                )

                self.last_sent_text = formatted_text
                self.last_update_time = time.time()

                logger.debug(
                    f"Updated message {self.message.message_id}, length: {len(formatted_text)}"
                )
                break

            except TelegramRetryAfter as e:
                logger.warning(f"Rate limit hit, waiting {e.retry_after} seconds")
                await asyncio.sleep(e.retry_after)

            except TelegramBadRequest as e:
                if "message is not modified" in str(e).lower():
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    break
                elif "message to edit not found" in str(e).lower():
                    logger.error("Message to edit not found, stopping stream")
                    await self.stop()
                    break
                else:
                    logger.warning(f"Telegram bad request on retry {retry}: {e}")
                    if retry == self.max_retries - 1:
                        logger.error(f"Failed to update message after {self.max_retries} retries")

            except Exception as e:
                logger.warning(f"Failed to update message on retry {retry}: {e}")
                if retry == self.max_retries - 1:
                    logger.error(f"Failed to update message after {self.max_retries} retries")

    async def finalize(self, final_text: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç streaming —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        self.is_final = True
        self.pending_text = final_text

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        if self.update_task:
            self.update_task.cancel()
            try:
                await self.update_task
            except asyncio.CancelledError:
                pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await self._force_update()

        logger.info(
            f"Finalized streaming for message {self.message.message_id if self.message else 'unknown'}"
        )

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç streaming"""
        self.is_final = True

        if self.update_task:
            self.update_task.cancel()
            try:
                await self.update_task
            except asyncio.CancelledError:
                pass

        logger.info(
            f"Stopped streaming for message {self.message.message_id if self.message else 'unknown'}"
        )


class StreamingCallback:
    """Callback –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI streaming"""

    def __init__(self, stream_manager: StreamManager):
        self.stream_manager = stream_manager
        self.total_calls = 0

    async def __call__(self, partial_text: str, is_final: bool):
        """Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è OpenAI streaming"""
        self.total_calls += 1

        try:
            if is_final:
                await self.stream_manager.finalize(partial_text)
            else:
                await self.stream_manager.update_text(partial_text, is_final=False)

        except Exception as e:
            logger.error(f"Error in streaming callback: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å stream
            if is_final:
                try:
                    await self.stream_manager.stop()
                except:
                    pass
