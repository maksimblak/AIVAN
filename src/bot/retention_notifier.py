"""
Retention Notifier - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ü–æ–º–æ–≥–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –±–æ—Ç–∞
"""

from __future__ import annotations

import asyncio
import logging
import time
from dataclasses import dataclass
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from aiogram import Bot
    from src.core.db_advanced import DatabaseAdvanced

logger = logging.getLogger(__name__)


@dataclass
class NotificationTemplate:
    """–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    name: str
    delay_hours: int
    message: str
    show_buttons: bool = True


# –°—Ü–µ–Ω–∞—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_SCENARIOS = [
    NotificationTemplate(
        name="registered_no_request",
        delay_hours=24,  # —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        message=(
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
            "–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ, –Ω–æ –µ—â—ë –Ω–µ –∑–∞–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
            "üí° <b>–ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å:</b>\n"
            "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞—Ä—É—à–∏–ª–∏ –ø—Ä–∞–≤–∞?\n"
            "‚Ä¢ –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ —É –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞?\n\n"
            "–£ —Ç–µ–±—è –µ—Å—Ç—å <b>10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</b> ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–º–∏! üéÅ"
        ),
        show_buttons=True
    ),
    NotificationTemplate(
        name="inactive_3days",
        delay_hours=72,  # —á–µ—Ä–µ–∑ 3 –¥–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        message=(
            "üîî <b>–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å!</b>\n\n"
            "–ü—Ä–æ—à–ª–æ —É–∂–µ 3 –¥–Ω—è —Å –º–æ–º–µ–Ω—Ç–∞ —Ç–≤–æ–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
            "üìö <b>–£ –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –µ—Å—Ç—å:</b>\n"
            "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ª—é–±—ã–º –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å! üíº"
        ),
        show_buttons=True
    ),
    NotificationTemplate(
        name="inactive_7days",
        delay_hours=168,  # —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        message=(
            "‚ö° <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>\n\n"
            "–ù–µ –≤–∏–¥–µ–ª —Ç–µ–±—è —É–∂–µ –Ω–µ–¥–µ–ª—é. –í–æ—Ç —á—Ç–æ –Ω–æ–≤–æ–≥–æ:\n\n"
            "üÜï <b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n\n"
            "–£ —Ç–µ–±—è –≤—Å—ë –µ—â—ë –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö! üöÄ"
        ),
        show_buttons=True
    ),
]


class RetentionNotifier:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ retention —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (24—á)
    - –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (3 –¥–Ω—è, 7 –¥–Ω–µ–π)
    - –û—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è win-back –∫–∞–º–ø–∞–Ω–∏–π)
    """

    def __init__(self, bot: Bot, db: DatabaseAdvanced):
        self.bot = bot
        self.db = db
        self._running = False
        self._task: asyncio.Task | None = None

    async def start(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self._running:
            logger.warning("RetentionNotifier already running")
            return

        self._running = True
        self._task = asyncio.create_task(self._notification_loop())
        logger.info("RetentionNotifier started")

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        self._running = False
        if self._task and not self._task.done():
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        logger.info("RetentionNotifier stopped")

    async def _notification_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self._running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)  # 1 —á–∞—Å

                if not self._running:
                    break

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
                for scenario in NOTIFICATION_SCENARIOS:
                    await self._process_scenario(scenario)

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in retention notification loop: {e}", exc_info=True)
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _process_scenario(self, scenario: NotificationTemplate) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            users = await self._get_users_for_scenario(scenario)

            if not users:
                return

            logger.info(f"Processing {len(users)} users for scenario '{scenario.name}'")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            sent_count = 0
            for user_id in users:
                try:
                    await self._send_notification(user_id, scenario)
                    await self._mark_notification_sent(user_id, scenario.name)
                    sent_count += 1

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(1)

                except Exception as e:
                    logger.error(f"Failed to send notification to user {user_id}: {e}")

            logger.info(f"Sent {sent_count} notifications for scenario '{scenario.name}'")

        except Exception as e:
            logger.error(f"Error processing scenario '{scenario.name}': {e}", exc_info=True)

    async def _get_users_for_scenario(self, scenario: NotificationTemplate) -> list[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        now = int(time.time())
        delay_seconds = scenario.delay_hours * 3600

        async with self.db.pool.acquire() as conn:
            if scenario.name == "registered_no_request":
                # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –Ω–æ –Ω–µ –∑–∞–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                cursor = await conn.execute("""
                    SELECT u.user_id
                    FROM users u
                    WHERE u.total_requests = 0
                      AND u.created_at < ?
                      AND u.created_at > ?
                      AND NOT EXISTS (
                          SELECT 1 FROM retention_notifications rn
                          WHERE rn.user_id = u.user_id
                            AND rn.scenario = ?
                      )
                      AND NOT EXISTS (
                          SELECT 1 FROM blocked_users bu
                          WHERE bu.user_id = u.user_id
                      )
                    LIMIT 100
                """, (now - delay_seconds, now - (delay_seconds + 3600), scenario.name))

            elif scenario.name.startswith("inactive_"):
                # –ë—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã N –¥–Ω–µ–π
                cursor = await conn.execute("""
                    SELECT u.user_id
                    FROM users u
                    WHERE u.total_requests > 0
                      AND u.last_request_at < ?
                      AND u.last_request_at > ?
                      AND NOT EXISTS (
                          SELECT 1 FROM retention_notifications rn
                          WHERE rn.user_id = u.user_id
                            AND rn.scenario = ?
                            AND rn.sent_at > ?
                      )
                      AND NOT EXISTS (
                          SELECT 1 FROM blocked_users bu
                          WHERE bu.user_id = u.user_id
                      )
                    LIMIT 100
                """, (
                    now - delay_seconds,
                    now - (delay_seconds + 3600),
                    scenario.name,
                    now - delay_seconds  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ
                ))

            else:
                logger.warning(f"Unknown scenario: {scenario.name}")
                return []

            rows = await cursor.fetchall()
            await cursor.close()

            return [row[0] for row in rows]

    async def _send_notification(self, user_id: int, scenario: NotificationTemplate) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            # (–µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª, –ø–æ–ª—É—á–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)

            if scenario.show_buttons:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                        callback_data="quick_question"
                    )],
                    [InlineKeyboardButton(
                        text="üìö –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                        callback_data="show_features"
                    )]
                ])

                await self.bot.send_message(
                    chat_id=user_id,
                    text=scenario.message,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=scenario.message,
                    parse_mode="HTML"
                )

            logger.info(f"Sent '{scenario.name}' notification to user {user_id}")

        except Exception as e:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if "bot was blocked" in str(e).lower() or "user is deactivated" in str(e).lower():
                logger.info(f"User {user_id} blocked the bot, skipping")
                await self._mark_user_blocked(user_id)
            else:
                raise

    async def _mark_notification_sent(self, user_id: int, scenario_name: str) -> None:
        """–û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        now = int(time.time())

        async with self.db.pool.acquire() as conn:
            # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS retention_notifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    scenario TEXT NOT NULL,
                    sent_at INTEGER NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users(user_id)
                )
            """)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            await conn.execute("""
                INSERT INTO retention_notifications (user_id, scenario, sent_at)
                VALUES (?, ?, ?)
            """, (user_id, scenario_name, now))

            await conn.commit()

    async def _mark_user_blocked(self, user_id: int) -> None:
        """–û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"""
        async with self.db.pool.acquire() as conn:
            # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS blocked_users (
                    user_id INTEGER PRIMARY KEY,
                    blocked_at INTEGER NOT NULL
                )
            """)

            await conn.execute("""
                INSERT OR REPLACE INTO blocked_users (user_id, blocked_at)
                VALUES (?, ?)
            """, (user_id, int(time.time())))

            await conn.commit()

    # ==================== –†—É—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã ====================

    async def send_manual_notification(
        self,
        user_ids: list[int],
        message: str,
        with_buttons: bool = False
    ) -> dict[str, int]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Args:
            user_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (HTML)
            with_buttons: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π

        Returns:
            {"sent": N, "failed": M, "blocked": K}
        """
        stats = {"sent": 0, "failed": 0, "blocked": 0}

        for user_id in user_ids:
            try:
                if with_buttons:
                    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                            callback_data="quick_question"
                        )]
                    ])

                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode="HTML"
                    )

                stats["sent"] += 1
                await asyncio.sleep(0.5)  # Rate limiting

            except Exception as e:
                if "bot was blocked" in str(e).lower() or "user is deactivated" in str(e).lower():
                    stats["blocked"] += 1
                    await self._mark_user_blocked(user_id)
                else:
                    stats["failed"] += 1
                    logger.error(f"Failed to send manual notification to {user_id}: {e}")

        return stats

    async def get_notification_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º"""
        async with self.db.pool.acquire() as conn:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
            cursor = await conn.execute("""
                SELECT COUNT(*) FROM retention_notifications
            """)
            total_sent = (await cursor.fetchone())[0]
            await cursor.close()

            # –ü–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º
            cursor = await conn.execute("""
                SELECT scenario, COUNT(*) as count
                FROM retention_notifications
                GROUP BY scenario
                ORDER BY count DESC
            """)
            by_scenario = {row[0]: row[1] for row in await cursor.fetchall()}
            await cursor.close()

            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cursor = await conn.execute("""
                SELECT COUNT(*) FROM blocked_users
            """)
            blocked_row = await cursor.fetchone()
            blocked_count = blocked_row[0] if blocked_row else 0
            await cursor.close()

            return {
                "total_sent": total_sent,
                "by_scenario": by_scenario,
                "blocked_users": blocked_count
            }


__all__ = ["RetentionNotifier", "NotificationTemplate", "NOTIFICATION_SCENARIOS"]
