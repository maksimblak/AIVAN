"""
Admin –∫–æ–º–∞–Ω–¥—ã –¥–ª—è retention –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è vs –∫—Ç–æ —É—Ö–æ–¥–∏—Ç
"""

from __future__ import annotations

import logging
from html import escape as html_escape

from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from src.bot.ui_components import Emoji
from src.core.admin_modules.retention_analytics import RetentionAnalytics
from src.core.admin_modules.admin_utils import require_admin

logger = logging.getLogger(__name__)

retention_router = Router()


def create_retention_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é retention –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üíé Retained Users", callback_data="retention:retained"),
                InlineKeyboardButton(text="üìâ Churned Users", callback_data="retention:churned"),
            ],
            [
                InlineKeyboardButton(text="‚öñÔ∏è Compare Groups", callback_data="retention:compare"),
            ],
            [
                InlineKeyboardButton(text="üîç Deep Dive User", callback_data="retention:deep_dive"),
            ],
            [
                InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="admin_refresh"),
            ],
        ]
    )


@retention_router.message(Command("retention"))
@require_admin
async def cmd_retention(message: Message, db, admin_ids: set[int]):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ retention –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    analytics = RetentionAnalytics(db)

    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
    retained = await analytics.get_retained_users(min_payments=2)
    churned = await analytics.get_churned_users(days_since_expiry=30)

    summary = "<b>üíé RETENTION ANALYTICS</b>\n\n"

    summary += f"<b>‚úÖ Retained (2+ payments):</b> {len(retained)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    if retained:
        avg_payments = sum(u.payment_count for u in retained) / len(retained)
        avg_power_score = sum(u.power_user_score for u in retained) / len(retained)
        summary += f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø–ª–∞—Ç–µ–∂–µ–π: {avg_payments:.1f}\n"
        summary += f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π Power Score: {avg_power_score:.1f}/100\n"

    summary += f"\n<b>‚ùå Churned (1 payment):</b> {len(churned)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    if churned:
        high_winback = sum(1 for u in churned if u.winback_probability > 60)
        summary += f"   ‚Ä¢ High win-back potential: {high_winback}\n"

    summary += "\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:</i>"

    await message.answer(summary, parse_mode=ParseMode.HTML, reply_markup=create_retention_menu())


@retention_router.callback_query(F.data == "retention:retained")
@require_admin
async def handle_retained_users(callback: CallbackQuery, db, admin_ids: set[int]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ retained users"""
    analytics = RetentionAnalytics(db)
    retained = await analytics.get_retained_users(min_payments=2)

    if not retained:
        await callback.answer("–ù–µ—Ç retained users", show_alert=True)
        return

    output = "<b>üíé RETAINED USERS (–ü—Ä–æ–¥–ª–µ–≤–∞—é—Ç –ø–æ–¥–ø–∏—Å–∫—É)</b>\n\n"

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_power = sum(u.power_user_score for u in retained) / len(retained)
    avg_diversity = sum(u.feature_diversity for u in retained) / len(retained)
    avg_requests_day = sum(u.avg_requests_per_day for u in retained) / len(retained)

    output += f"<b>üìä –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
    output += f"‚Ä¢ Power Score: {avg_power:.1f}/100\n"
    output += f"‚Ä¢ Feature Diversity: {avg_diversity:.1f}%\n"
    output += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {avg_requests_day:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å\n\n"

    # –¢–æ–ø-3 power users
    top_3 = sorted(retained, key=lambda u: u.power_user_score, reverse=True)[:3]

    output += "<b>üëë –¢–æ–ø-3 Power Users:</b>\n\n"
    for i, user in enumerate(top_3, 1):
        medal = 'ü•á' if i == 1 else 'ü•à' if i == 2 else 'ü•â'

        output += f"{medal} User #{user.user_id}\n"
        output += f"   ‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {user.payment_count}\n"
        output += f"   ‚Ä¢ Power Score: {user.power_user_score}/100\n"
        output += f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.avg_requests_per_day:.1f} req/day\n"
        output += f"   ‚Ä¢ –õ—é–±–∏–º—ã–µ —Ñ–∏—á–∏:\n"

        for feature, count in user.favorite_features[:3]:
            output += f"      - {feature}: {count}x\n"

        output += "\n"

    # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    output += "<b>üîç –ß—Ç–æ –∏—Ö –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç:</b>\n"

    # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏—á–∏
    all_favorites = {}
    for user in retained:
        for feature, count in user.favorite_features[:3]:
            all_favorites[feature] = all_favorites.get(feature, 0) + count

    top_features = sorted(all_favorites.items(), key=lambda x: x[1], reverse=True)[:3]

    output += "\n<b>–õ—é–±–∏–º—ã–µ —Ñ–∏—á–∏:</b>\n"
    for feature, total_count in top_features:
        output += f"‚Ä¢ {feature}: –∏—Å–ø–æ–ª—å–∑—É—é—Ç {total_count} —Ä–∞–∑\n"

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
    weekday_count = sum(1 for u in retained if u.usage_patterns.get('is_weekday_user', False))
    daytime_count = sum(1 for u in retained if u.usage_patterns.get('is_daytime_user', False))

    output += "\n<b>–ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
    output += f"‚Ä¢ –ë—É–¥–Ω–∏–µ –¥–Ω–∏: {weekday_count}/{len(retained)} ({weekday_count/len(retained)*100:.0f}%)\n"
    output += f"‚Ä¢ –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è: {daytime_count}/{len(retained)} ({daytime_count/len(retained)*100:.0f}%)\n"

    # Insights
    output += "\n<b>üí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:</b>\n"

    if avg_diversity > 50:
        output += "‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ–∏—á–∏ - –ø—Ä–æ–¥—É–∫—Ç –ø–æ–ª–µ–∑–µ–Ω —Ü–µ–ª–∏–∫–æ–º\n"
    else:
        output += "‚ö†Ô∏è –§–æ–∫—É—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ 1-2 —Ñ–∏—á–∞—Ö - –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ –Ω—É–∂–Ω–æ?\n"

    if avg_requests_day > 3:
        output += "‚úÖ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø—Ä–æ–¥—É–∫—Ç –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã\n"
    else:
        output += "üìä –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"

    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="retention:menu")]
        ]
    )

    if callback.message:
        await callback.message.edit_text(output, parse_mode=ParseMode.HTML, reply_markup=back_keyboard)
    await callback.answer()


@retention_router.callback_query(F.data == "retention:churned")
@require_admin
async def handle_churned_users(callback: CallbackQuery, db, admin_ids: set[int]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ churned users"""
    analytics = RetentionAnalytics(db)
    churned = await analytics.get_churned_users(days_since_expiry=90)

    if not churned:
        await callback.answer("–ù–µ—Ç churned users", show_alert=True)
        return

    output = "<b>üìâ CHURNED USERS (–ù–µ –ø—Ä–æ–¥–ª–∏–ª–∏)</b>\n\n"

    output += f"<b>–í—Å–µ–≥–æ –Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∏:</b> {len(churned)}\n\n"

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º
    all_indicators = {}
    for user in churned:
        for indicator in user.churn_indicators:
            all_indicators[indicator] = all_indicators.get(indicator, 0) + 1

    sorted_indicators = sorted(all_indicators.items(), key=lambda x: x[1], reverse=True)

    output += "<b>üîç –ü—Ä–∏—á–∏–Ω—ã –æ—Ç—Ç–æ–∫–∞:</b>\n"
    indicator_names = {
        'low_usage': 'üìä –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        'had_errors': 'üêõ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
        'limited_exploration': 'üéØ –ù–µ –∏–∑—É—á–∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç',
        'poor_experience': 'üòû –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ–ø—ã—Ç',
        'immediate_abandonment': '‚ö° –ë—Ä–æ—Å–∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã',
        'price_sensitive': 'üí∞ –¶–µ–Ω–∞ vs —Ü–µ–Ω–Ω–æ—Å—Ç—å'
    }

    for indicator, count in sorted_indicators:
        name = indicator_names.get(indicator, indicator)
        pct = (count / len(churned)) * 100
        output += f"{name}: {count} ({pct:.0f}%)\n"

    # –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏—á–∏
    output += "\n<b>‚ùå –ß—Ç–æ –ù–ï –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏:</b>\n"

    all_unused = {}
    for user in churned:
        for feature in user.unused_features:
            all_unused[feature] = all_unused.get(feature, 0) + 1

    top_unused = sorted(all_unused.items(), key=lambda x: x[1], reverse=True)[:5]

    for feature, count in top_unused:
        pct = (count / len(churned)) * 100
        output += f"‚Ä¢ {feature}: {pct:.0f}% –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏\n"

    # Win-back –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
    output += "\n<b>üéØ Win-back –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª:</b>\n"

    high_prob = sum(1 for u in churned if u.winback_probability > 60)
    medium_prob = sum(1 for u in churned if 30 < u.winback_probability <= 60)
    low_prob = sum(1 for u in churned if u.winback_probability <= 30)

    output += f"üü¢ –í—ã—Å–æ–∫–∏–π (>60%): {high_prob} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    output += f"üü° –°—Ä–µ–¥–Ω–∏–π (30-60%): {medium_prob} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    output += f"üî¥ –ù–∏–∑–∫–∏–π (<30%): {low_prob} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    output += "\n<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"

    if 'low_usage' in dict(sorted_indicators):
        if all_indicators['low_usage'] > len(churned) * 0.3:
            output += "1Ô∏è‚É£ –ü–†–ò–û–†–ò–¢–ï–¢: –£–ª—É—á—à–∏—Ç—å onboarding - 30%+ –Ω–µ –ø–æ–Ω—è–ª–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å\n"

    if 'had_errors' in dict(sorted_indicators):
        output += "2Ô∏è‚É£ –°—Ä–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"

    if 'limited_exploration' in dict(sorted_indicators):
        output += "3Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å guided tour –ø–æ —Ñ–∏—á–∞–º\n"

    if 'price_sensitive' in dict(sorted_indicators):
        output += "4Ô∏è‚É£ A/B —Ç–µ—Å—Ç —Ü–µ–Ω—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—à–µ–≤—ã–π tier\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 2-3 –ø—Ä–∏–º–µ—Ä–∞
    output += "\n<b>üìã –ü—Ä–∏–º–µ—Ä—ã churned users:</b>\n\n"

    examples = sorted(churned, key=lambda u: u.winback_probability, reverse=True)[:3]

    for user in examples:
        output += f"User #{user.user_id}\n"
        output += f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {user.total_requests}\n"
        output += f"   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(user.churn_indicators[:2])}\n"
        output += f"   ‚Ä¢ Win-back: {user.winback_probability:.0f}%\n"
        output += f"   ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: <i>{user.recommended_action}</i>\n\n"

    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="retention:menu")]
        ]
    )

    if callback.message:
        await callback.message.edit_text(output, parse_mode=ParseMode.HTML, reply_markup=back_keyboard)
    await callback.answer()


@retention_router.callback_query(F.data == "retention:compare")
@require_admin
async def handle_compare_groups(callback: CallbackQuery, db, admin_ids: set[int]):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ retained vs churned"""
    analytics = RetentionAnalytics(db)
    comparison = await analytics.compare_retained_vs_churned()

    if "error" in comparison:
        await callback.answer(comparison["error"], show_alert=True)
        return

    output = "<b>‚öñÔ∏è RETAINED vs CHURNED</b>\n\n"

    retained_data = comparison["retained"]
    churned_data = comparison["churned"]

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    output += "<b>üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
    output += f"Retained: {retained_data['avg_requests']:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    output += f"Churned: {churned_data['avg_requests']:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤\n"

    requests_diff = retained_data['avg_requests'] - churned_data['avg_requests']
    output += f"‚Üí –†–∞–∑–Ω–∏—Ü–∞: {requests_diff:+.1f} ({requests_diff/churned_data['avg_requests']*100:+.0f}%)\n\n"

    # Lifetime
    output += "<b>‚è± Lifetime:</b>\n"
    output += f"Retained: {retained_data['avg_lifetime_days']:.0f} –¥–Ω–µ–π\n"
    output += f"Churned: {churned_data['avg_lifetime_days']:.0f} –¥–Ω–µ–π\n\n"

    # Power Score (—Ç–æ–ª—å–∫–æ —É retained)
    output += "<b>‚ö° Power Score:</b>\n"
    output += f"Retained: {retained_data['avg_power_score']:.1f}/100\n"
    output += f"Churned: N/A (–Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∏)\n\n"

    # Feature Diversity
    output += "<b>üéØ Feature Diversity:</b>\n"
    output += f"Retained: {retained_data['avg_feature_diversity']:.1f}%\n"
    output += f"Churned: (–∏–∑—É—á–∞—é—Ç –º–µ–Ω—å—à–µ —Ñ–∏—á)\n\n"

    # –¢–æ–ø —Ñ–∏—á–∏ –¥–ª—è retained
    output += "<b>üíé –ß—Ç–æ –ª—é–±—è—Ç RETAINED:</b>\n"
    for feature, count in list(retained_data['top_features'].items())[:3]:
        output += f"‚Ä¢ {feature}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"

    # –ß—Ç–æ –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç churned
    output += "\n<b>‚ùå –ß—Ç–æ –ù–ï –ø—Ä–æ–±—É—é—Ç CHURNED:</b>\n"
    for feature, count in list(churned_data['unused_features_common'].items())[:3]:
        output += f"‚Ä¢ {feature}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏\n"

    # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    output += "\n<b>üéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:</b>\n\n"

    if requests_diff > 50:
        output += f"1Ô∏è‚É£ RETAINED –≤ {requests_diff/churned_data['avg_requests']:.1f}x –∞–∫—Ç–∏–≤–Ω–µ–µ!\n"
        output += "   ‚Üí –ù—É–∂–Ω–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"

    if retained_data['avg_feature_diversity'] > 50:
        output += "2Ô∏è‚É£ RETAINED –∏–∑—É—á–∞—é—Ç –±–æ–ª—å—à–µ —Ñ–∏—á\n"
        output += "   ‚Üí –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ onboarding\n\n"

    top_unused = list(churned_data['unused_features_common'].keys())[0] if churned_data['unused_features_common'] else None
    if top_unused:
        output += f"3Ô∏è‚É£ CHURNED –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç {top_unused}\n"
        output += "   ‚Üí –õ–∏–±–æ –ø—Ä–æ–º–æ —ç—Ç–æ–π —Ñ–∏—á–∏, –ª–∏–±–æ –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞\n\n"

    # –ü—Ä–æ—Ü–µ–Ω—Ç weekday/daytime users
    if 'common_patterns' in retained_data:
        weekday_pct = retained_data['common_patterns']['weekday_preference_pct']
        if weekday_pct > 70:
            output += f"4Ô∏è‚É£ {weekday_pct:.0f}% RETAINED - B2B –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
            output += "   ‚Üí –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"

    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="retention:menu")]
        ]
    )

    if callback.message:
        await callback.message.edit_text(output, parse_mode=ParseMode.HTML, reply_markup=back_keyboard)
    await callback.answer()


@retention_router.callback_query(F.data == "retention:deep_dive")
@require_admin
async def handle_deep_dive(callback: CallbackQuery, db, admin_ids: set[int]):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    output = "<b>üîç DEEP DIVE ANALYSIS</b>\n\n"
    output += "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n"
    output += "<code>/deepdive &lt;user_id&gt;</code>\n\n"
    output += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
    output += "‚Ä¢ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (retained/churned)\n"
    output += "‚Ä¢ –õ—é–±–∏–º—ã–µ —Ñ–∏—á–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
    output += "‚Ä¢ Churn indicators (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n"
    output += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"

    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="retention:menu")]
        ]
    )

    if callback.message:
        await callback.message.edit_text(output, parse_mode=ParseMode.HTML, reply_markup=back_keyboard)
    await callback.answer()


@retention_router.message(Command("deepdive"))
@require_admin
async def cmd_deep_dive_user(message: Message, db, admin_ids: set[int]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    args = (message.text or "").split()
    if len(args) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deepdive <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /deepdive 123456789"
        )
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer(f"{Emoji.ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        return

    analytics = RetentionAnalytics(db)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ retained
    retained_list = await analytics.get_retained_users(min_payments=2)
    retained_user = next((u for u in retained_list if u.user_id == user_id), None)

    if retained_user:
        output = f"<b>üíé RETAINED USER #{user_id}</b>\n\n"
        output += f"<b>üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è:</b>\n"
        output += f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {retained_user.payment_count}\n"
        output += f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {retained_user.total_spent} —Ä—É–±\n"
        output += f"‚Ä¢ Lifetime: {retained_user.lifetime_days} –¥–Ω–µ–π\n"
        output += f"‚Ä¢ Time to first payment: {retained_user.time_to_first_payment_days} –¥–Ω–µ–π\n\n"

        output += f"<b>üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        output += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {retained_user.total_requests}\n"
        output += f"‚Ä¢ –í –¥–µ–Ω—å: {retained_user.avg_requests_per_day:.1f}\n"
        output += f"‚Ä¢ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é: {retained_user.days_active_per_week:.1f}\n"
        output += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {retained_user.streak_max_days} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n\n"

        output += f"<b>üéØ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        output += f"‚Ä¢ Power Score: {retained_user.power_user_score:.1f}/100\n"
        output += f"‚Ä¢ Feature Diversity: {retained_user.feature_diversity:.1f}%\n"
        output += f"‚Ä¢ Retention Probability: {retained_user.retention_probability:.1f}%\n\n"

        output += f"<b>üíù –õ—é–±–∏–º—ã–µ —Ñ–∏—á–∏:</b>\n"
        for feature, count in retained_user.favorite_features[:5]:
            output += f"‚Ä¢ {feature}: {count} —Ä–∞–∑\n"

        output += f"\n<b>‚è∞ –ü–∞—Ç—Ç–µ—Ä–Ω—ã:</b>\n"
        if retained_user.usage_patterns.get('peak_hour') is not None:
            output += f"‚Ä¢ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {retained_user.usage_patterns['peak_hour']:02d}:00\n"
        if retained_user.usage_patterns.get('is_weekday_user'):
            output += f"‚Ä¢ –¢–∏–ø: –ë—É–¥–Ω–∏–µ –¥–Ω–∏ (B2B?)\n"
        else:
            output += f"‚Ä¢ –¢–∏–ø: –í—ã—Ö–æ–¥–Ω—ã–µ (B2C?)\n"

        output += f"\n<b>‚úÖ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ —Ü–µ–Ω–Ω—ã–º:</b>\n"

        if retained_user.power_user_score > 70:
            output += "‚Ä¢ üåü Power user - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞\n"
        if retained_user.payment_count >= 3:
            output += "‚Ä¢ üíé –õ–æ—è–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç - 3+ –ø—Ä–æ–¥–ª–µ–Ω–∏—è\n"
        if retained_user.feature_diversity > 60:
            output += "‚Ä¢ üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç —Ü–µ–ª–∏–∫–æ–º\n"
        if retained_user.avg_requests_per_day > 5:
            output += "‚Ä¢ ‚ö° –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω\n"

    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ churned
        churned_list = await analytics.get_churned_users(days_since_expiry=90)
        churned_user = next((u for u in churned_list if u.user_id == user_id), None)

        if churned_user:
            output = f"<b>üìâ CHURNED USER #{user_id}</b>\n\n"
            output += f"<b>üí∞ –ò—Å—Ç–æ—Ä–∏—è:</b>\n"
            output += f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {churned_user.payment_count}\n"
            output += f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {churned_user.total_spent} —Ä—É–±\n"
            output += f"‚Ä¢ –ë—ã–ª –∞–∫—Ç–∏–≤–µ–Ω: {churned_user.lifetime_days} –¥–Ω–µ–π\n"
            output += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {churned_user.last_active_days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n\n"

            output += f"<b>üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            output += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {churned_user.total_requests}\n\n"

            output += f"<b>‚ùå –ü—Ä–∏—á–∏–Ω—ã –æ—Ç—Ç–æ–∫–∞:</b>\n"
            for indicator in churned_user.churn_indicators:
                output += f"‚Ä¢ {indicator}\n"

            output += f"\n<b>üéØ –ß—Ç–æ –ù–ï –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª:</b>\n"
            for feature in churned_user.unused_features[:5]:
                output += f"‚Ä¢ {feature}\n"

            if churned_user.drop_off_feature:
                output += f"\n<b>üìç –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n{churned_user.drop_off_feature}\n"

            output += f"\n<b>üîß –ü—Ä–æ–±–ª–µ–º—ã:</b>\n"
            if churned_user.had_technical_issues:
                output += "‚ö†Ô∏è –ë—ã–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n"
            if churned_user.received_poor_responses:
                output += "üòû –ü–æ–ª—É—á–∞–ª –ø–ª–æ—Ö–∏–µ –æ—Ç–≤–µ—Ç—ã\n"

            output += f"\n<b>üéØ Win-back:</b>\n"
            output += f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {churned_user.winback_probability:.0f}%\n"
            output += f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: <i>{churned_user.recommended_action}</i>\n"

        else:
            output = f"<b>User #{user_id}</b>\n\n"
            output += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π."

    await message.answer(output, parse_mode=ParseMode.HTML)


@retention_router.callback_query(F.data == "retention:menu")
@require_admin
async def back_to_retention_menu(callback: CallbackQuery, db, admin_ids: set[int]):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é retention"""
    analytics = RetentionAnalytics(db)
    retained = await analytics.get_retained_users(min_payments=2)
    churned = await analytics.get_churned_users(days_since_expiry=30)

    summary = "<b>üíé RETENTION ANALYTICS</b>\n\n"

    summary += f"<b>‚úÖ Retained (2+ payments):</b> {len(retained)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    if retained:
        avg_payments = sum(u.payment_count for u in retained) / len(retained)
        avg_power_score = sum(u.power_user_score for u in retained) / len(retained)
        summary += f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø–ª–∞—Ç–µ–∂–µ–π: {avg_payments:.1f}\n"
        summary += f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π Power Score: {avg_power_score:.1f}/100\n"

    summary += f"\n<b>‚ùå Churned (1 payment):</b> {len(churned)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    if churned:
        high_winback = sum(1 for u in churned if u.winback_probability > 60)
        summary += f"   ‚Ä¢ High win-back potential: {high_winback}\n"

    summary += "\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:</i>"

    if callback.message:
        await callback.message.edit_text(summary, parse_mode=ParseMode.HTML, reply_markup=create_retention_menu())
    await callback.answer()
