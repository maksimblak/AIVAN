"""
–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫ PMF/NPS
"""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from src.core.admin_modules.admin_utils import FEATURE_KEYS, edit_or_answer, require_admin
from src.core.admin_modules.pmf_metrics import PMFMetrics

pmf_router = Router(name="pmf_admin")


@pmf_router.message(Command("pmf"))
@require_admin
async def cmd_pmf(message: Message, db, admin_ids: list[int]):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ç—Ä–∏–∫ PMF"""
    metrics = PMFMetrics(db)

    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
    nps = await metrics.get_nps(days=30)
    sean_ellis = await metrics.get_sean_ellis_score(days=30)
    usage = await metrics.get_usage_intensity()

    text = "üìä <b>–î–∞—à–±–æ—Ä–¥ Product-Market Fit</b>\n\n"

    # NPS Section
    text += "<b>üéØ –ò–Ω–¥–µ–∫—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (NPS)</b>\n"
    text += f"  –ò–Ω–¥–µ–∫—Å: <b>{nps.nps_score:+.0f}</b> {_nps_emoji(nps.nps_score)}\n"
    text += f"  –ü—Ä–æ–º–æ—É—Ç–µ—Ä—ã: {nps.promoters} ({nps.promoter_rate:.1f}%)\n"
    text += f"  –ù–µ–π—Ç—Ä–∞–ª—ã: {nps.passives}\n"
    text += f"  –ö—Ä–∏—Ç–∏–∫–∏: {nps.detractors} ({nps.detractor_rate:.1f}%)\n"
    text += f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {nps.average_score:.1f}/10\n"
    text += f"  –î–æ–ª—è –æ—Ç–≤–µ—Ç–æ–≤: {nps.response_rate:.1f}%\n"
    text += f"  –¢—Ä–µ–Ω–¥: {_format_trend(nps.trend)}\n\n"

    # Sean Ellis Test
    text += "<b>üíé –¢–µ—Å—Ç –®–æ–Ω–∞ –≠–ª–ª–∏—Å–∞ (PMF)</b>\n"
    text += f"  –û—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω—ã: <b>{sean_ellis.pmf_score:.1f}%</b>\n"
    text += f"  –°—Ç–∞—Ç—É—Å PMF: {_pmf_status(sean_ellis.pmf_achieved)}\n"
    text += f"  –û—Ç–≤–µ—Ç–æ–≤: {sean_ellis.total_responses}\n\n"

    # Usage Intensity
    text += "<b>üìà –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n"
    text += f"  DAU (–¥–µ–Ω—å): {usage.dau}\n"
    text += f"  WAU (–Ω–µ–¥–µ–ª—è): {usage.wau}\n"
    text += f"  MAU (–º–µ—Å—è—Ü): {usage.mau}\n"
    text += f"  DAU/MAU: {usage.dau_mau_ratio:.1f}% {_stickiness_emoji(usage.dau_mau_ratio)}\n"
    text += f"  –°—É–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ: {usage.power_user_percentage:.1f}%\n"
    text += f"  –£–¥–µ—Ä–∂–∞–Ω–∏–µ L28: {usage.l28_retention:.1f}%\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è NPS", callback_data="pmf:nps_details")],
            [InlineKeyboardButton(text="üéØ PMF –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º", callback_data="pmf:feature_pmf")],
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å NPS-–æ–ø—Ä–æ—Å", callback_data="pmf:send_survey")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pmf:refresh")],
        ]
    )

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


def _nps_emoji(nps: float) -> str:
    """Emoji –¥–ª—è NPS score"""
    if nps >= 50:
        return "üåü –û—Ç–ª–∏—á–Ω–æ"
    elif nps >= 30:
        return "‚úÖ –•–æ—Ä–æ—à–æ"
    elif nps >= 0:
        return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
    else:
        return "üî¥ –ü–ª–æ—Ö–æ"


def _pmf_status(achieved: bool) -> str:
    """–°—Ç–∞—Ç—É—Å PMF"""
    if achieved:
        return "‚úÖ <b>PMF –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!</b>"
    else:
        return "‚ö†Ô∏è PMF –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç"


def _stickiness_emoji(ratio: float) -> str:
    """Emoji –¥–ª—è stickiness"""
    if ratio >= 20:
        return "‚úÖ"
    elif ratio >= 10:
        return "‚ö†Ô∏è"
    else:
        return "üî¥"


def _format_trend(trend: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞"""
    emoji_map = {
        "improving": "üìà –£–ª—É—á—à–∞–µ—Ç—Å—è",
        "stable": "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ",
        "declining": "üìâ –£—Ö—É–¥—à–∞–µ—Ç—Å—è",
        "insufficient_data": "‚ùì –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö",
    }
    return emoji_map.get(trend, trend)


@pmf_router.callback_query(F.data == "pmf:refresh")
@require_admin
async def handle_pmf_refresh(callback: CallbackQuery, db, admin_ids: list[int]):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ PMF"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")

    metrics = PMFMetrics(db)
    nps = await metrics.get_nps(days=30)
    sean_ellis = await metrics.get_sean_ellis_score(days=30)
    usage = await metrics.get_usage_intensity()

    text = "üìä <b>–î–∞—à–±–æ—Ä–¥ Product-Market Fit</b>\n\n"
    text += "<b>üéØ –ò–Ω–¥–µ–∫—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (NPS)</b>\n"
    text += f"  –ò–Ω–¥–µ–∫—Å: <b>{nps.nps_score:+.0f}</b> {_nps_emoji(nps.nps_score)}\n"
    text += f"  –ü—Ä–æ–º–æ—É—Ç–µ—Ä—ã: {nps.promoters} ({nps.promoter_rate:.1f}%)\n"
    text += f"  –ù–µ–π—Ç—Ä–∞–ª—ã: {nps.passives}\n"
    text += f"  –ö—Ä–∏—Ç–∏–∫–∏: {nps.detractors} ({nps.detractor_rate:.1f}%)\n"
    text += f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {nps.average_score:.1f}/10\n"
    text += f"  –î–æ–ª—è –æ—Ç–≤–µ—Ç–æ–≤: {nps.response_rate:.1f}%\n"
    text += f"  –¢—Ä–µ–Ω–¥: {_format_trend(nps.trend)}\n\n"

    text += "<b>üíé –¢–µ—Å—Ç –®–æ–Ω–∞ –≠–ª–ª–∏—Å–∞ (PMF)</b>\n"
    text += f"  –û—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω—ã: <b>{sean_ellis.pmf_score:.1f}%</b>\n"
    text += f"  –°—Ç–∞—Ç—É—Å PMF: {_pmf_status(sean_ellis.pmf_achieved)}\n"
    text += f"  –û—Ç–≤–µ—Ç–æ–≤: {sean_ellis.total_responses}\n\n"

    text += "<b>üìà –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n"
    text += f"  DAU (–¥–µ–Ω—å): {usage.dau}\n"
    text += f"  WAU (–Ω–µ–¥–µ–ª—è): {usage.wau}\n"
    text += f"  MAU (–º–µ—Å—è—Ü): {usage.mau}\n"
    text += f"  DAU/MAU: {usage.dau_mau_ratio:.1f}% {_stickiness_emoji(usage.dau_mau_ratio)}\n"
    text += f"  –°—É–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ: {usage.power_user_percentage:.1f}%\n"
    text += f"  –£–¥–µ—Ä–∂–∞–Ω–∏–µ L28: {usage.l28_retention:.1f}%\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è NPS", callback_data="pmf:nps_details")],
            [InlineKeyboardButton(text="üéØ PMF –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º", callback_data="pmf:feature_pmf")],
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å NPS-–æ–ø—Ä–æ—Å", callback_data="pmf:send_survey")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pmf:refresh")],
        ]
    )

    await edit_or_answer(callback, text, keyboard)


@pmf_router.callback_query(F.data == "pmf:nps_details")
@require_admin
async def handle_nps_details(callback: CallbackQuery, db, admin_ids: list[int]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π NPS breakdown"""
    metrics = PMFMetrics(db)
    nps = await metrics.get_nps(days=30)

    text = "üéØ <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä NPS</b>\n\n"

    text += f"<b>–ò—Ç–æ–≥–æ–≤—ã–π NPS: {nps.nps_score:+.0f}</b> {_nps_emoji(nps.nps_score)}\n\n"

    text += "<b>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n"
    text += f"  –ü—Ä–æ–º–æ—É—Ç–µ—Ä—ã (9-10): {nps.promoters} ({nps.promoter_rate:.1f}%)\n"
    text += f"  –ù–µ–π—Ç—Ä–∞–ª—ã (7-8): {nps.passives}\n"
    text += f"  –ö—Ä–∏—Ç–∏–∫–∏ (0-6): {nps.detractors} ({nps.detractor_rate:.1f}%)\n\n"

    text += f"<b>üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {nps.average_score:.1f}/10\n\n"

    if nps.previous_nps is not None:
        change = nps.nps_score - nps.previous_nps
        text += f"<b>üìä –ü—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥:</b> {nps.previous_nps:+.0f}\n"
        text += f"<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {change:+.1f} {_format_trend(nps.trend)}\n\n"

    if nps.nps_by_segment:
        text += "<b>üéØ NPS –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:</b>\n"
        for segment, score in sorted(nps.nps_by_segment.items(), key=lambda x: x[1], reverse=True):
            text += f"  ‚Ä¢ {segment}: {score:+.0f}\n"

    text += f"\n<b>–î–æ–ª—è –æ—Ç–≤–µ—Ç–æ–≤:</b> {nps.response_rate:.1f}%\n"

    # Recommendations
    text += "\n<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    if nps.nps_score < 0:
        text += "  üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ: —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∫—Ä–∏—Ç–∏–∫–æ–≤\n"
    elif nps.nps_score < 30:
        text += "  ‚ö†Ô∏è –£–ª—É—á—à–∏—Ç—å: –æ–ø—Ä–æ—Å–∏—Ç–µ –∫—Ä–∏—Ç–∏–∫–æ–≤, —á—Ç–æ–±—ã –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã\n"
    else:
        text += "  ‚úÖ –•–æ—Ä–æ—à–æ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="pmf:back")]]
    )

    await edit_or_answer(callback, text, keyboard)
    await callback.answer()


@pmf_router.callback_query(F.data == "pmf:feature_pmf")
@require_admin
async def handle_feature_pmf(callback: CallbackQuery, db, admin_ids: list[int]):
    """–°–ø–∏—Å–æ–∫ —Ñ–∏—á –¥–ª—è PMF –∞–Ω–∞–ª–∏–∑–∞"""
    features = FEATURE_KEYS

    buttons = []
    for feature in features:
        buttons.append(
            [
                InlineKeyboardButton(
                    text=feature.replace("_", " ").title(),
                    callback_data=f"pmf:feature_details:{feature}",
                )
            ]
        )

    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="pmf:back")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await edit_or_answer(callback, "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ PMF:</b>", keyboard)
    await callback.answer()


@pmf_router.callback_query(F.data.startswith("pmf:feature_details:"))
@require_admin
async def handle_feature_details(callback: CallbackQuery, db, admin_ids: list[int]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π PMF –¥–ª—è —Ñ–∏—á–∏"""
    feature_name = callback.data.split(":")[-1]

    metrics = PMFMetrics(db)
    pmf = await metrics.get_feature_pmf(feature_name, days=30)

    text = f"üéØ <b>PMF —Ñ—É–Ω–∫—Ü–∏–∏: {feature_name.replace('_', ' ').title()}</b>\n\n"

    text += f"<b>–û—Ü–µ–Ω–∫–∞ PMF: {pmf.pmf_score:.0f}/100</b> {_pmf_rating_emoji(pmf.pmf_rating)}\n"
    text += f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {pmf.pmf_rating.upper()}\n\n"

    text += "<b>üìä –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
    text += f"  –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {pmf.total_users}\n"
    text += f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {pmf.active_users}\n"
    text += f"  –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {pmf.usage_frequency:.1f} —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n\n"

    text += f"<b>üòä –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å:</b> {pmf.satisfaction_score:.0f}/100\n\n"

    text += f"<b>üí° –í—ã–≤–æ–¥:</b>\n{pmf.key_insight}\n\n"

    # Action items based on PMF rating
    text += "<b>üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
    if pmf.pmf_rating == "strong":
        text += "  ‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
        text += "  ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
        text += "  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂\n"
    elif pmf.pmf_rating == "moderate":
        text += "  ‚Ä¢ –£–ª—É—á—à–∏—Ç—å UX\n"
        text += "  ‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += "  ‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ A/B‚Äë—Ç–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π\n"
    elif pmf.pmf_rating == "weak":
        text += "  ‚Ä¢ –ù—É–∂–µ–Ω —Å–µ—Ä—å—ë–∑–Ω—ã–π —Ä–µ–¥–∏–∑–∞–π–Ω\n"
        text += "  ‚Ä¢ –ü–æ–¥—É–º–∞—Ç—å –æ —Å–º–µ–Ω–µ —Ñ–æ–∫—É—Å–∞\n"
        text += "  ‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–∏–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é\n"
    else:  # kill
        text += "  ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
        text += "  ‚Ä¢ –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ñ—É–Ω–∫—Ü–∏–π", callback_data="pmf:feature_pmf"
                )
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="pmf:back")],
        ]
    )

    await edit_or_answer(callback, text, keyboard)
    await callback.answer()


def _pmf_rating_emoji(rating: str) -> str:
    """Emoji –¥–ª—è PMF rating"""
    emoji_map = {"strong": "üåü", "moderate": "‚úÖ", "weak": "‚ö†Ô∏è", "kill": "üóëÔ∏è"}
    return emoji_map.get(rating, "")


@pmf_router.callback_query(F.data == "pmf:send_survey")
@require_admin
async def handle_send_survey(callback: CallbackQuery, db, admin_ids: list[int]):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å NPS –æ–ø—Ä–æ—Å"""
    text = "üì§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å NPS-–æ–ø—Ä–æ—Å</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞:\n\n"
    text += "‚Ä¢ –°—É–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç—è—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
    text += "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–≤—à–∏–µ—Å—è –∏–∑ —Ç—Ä–∏–∞–ª–∞ ‚Äî –Ω–µ–¥–∞–≤–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏\n"
    text += "‚Ä¢ –ì—Ä—É–ø–ø–∞ —Ä–∏—Å–∫–∞ ‚Äî –º–æ–≥—É—Ç —É–π—Ç–∏\n"
    text += "‚Ä¢ –í—Å–µ –ø–ª–∞—Ç—è—â–∏–µ ‚Äî –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–ø–ª–∞—Ç–æ–π\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåü –°—É–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="pmf:survey:power_users")],
            [
                InlineKeyboardButton(
                    text="üíé –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–≤—à–∏–µ—Å—è –∏–∑ —Ç—Ä–∏–∞–ª–∞",
                    callback_data="pmf:survey:trial_converters",
                )
            ],
            [InlineKeyboardButton(text="‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ —Ä–∏—Å–∫–∞", callback_data="pmf:survey:at_risk")],
            [InlineKeyboardButton(text="üí∞ –í—Å–µ –ø–ª–∞—Ç—è—â–∏–µ", callback_data="pmf:survey:all_paid")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="pmf:back")],
        ]
    )

    await edit_or_answer(callback, text, keyboard)
    await callback.answer()


@pmf_router.callback_query(F.data.startswith("pmf:survey:"))
@require_admin
async def handle_survey_segment(callback: CallbackQuery, db, admin_ids: list[int]):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É"""
    segment = callback.data.split(":")[-1]

    await callback.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–ø—Ä–æ—Å—ã...", show_alert=False)

    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞
    async with db.pool.acquire() as conn:
        if segment == "all_paid":
            cursor = await conn.execute(
                """
                SELECT DISTINCT user_id
                FROM payments
                WHERE status = 'completed'
            """
            )
        elif segment == "power_users":
            cursor = await conn.execute(
                """
                SELECT user_id
                FROM users
                WHERE total_requests > 50
                  AND (
                      SELECT COUNT(*) FROM payments
                      WHERE payments.user_id = users.user_id AND status = 'completed'
                  ) >= 2
            """
            )
        elif segment == "trial_converters":
            cursor = await conn.execute(
                """
                SELECT DISTINCT user_id
                FROM payments
                WHERE status = 'completed'
                  AND created_at > strftime('%s', 'now', '-7 days')
            """
            )
        elif segment == "at_risk":
            cursor = await conn.execute(
                """
                SELECT user_id
                FROM users
                WHERE total_requests > 20
                  AND (strftime('%s', 'now') - last_active) > 604800
                  AND (
                      SELECT COUNT(*) FROM payments
                      WHERE payments.user_id = users.user_id AND status = 'completed'
                  ) >= 1
            """
            )
        else:
            await edit_or_answer(callback, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç", parse_mode=None)
            return

        rows = await cursor.fetchall()
        await cursor.close()

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å—ã
    metrics = PMFMetrics(db)
    sent_count = 0

    for row in rows:
        user_id = row[0]
        success = await metrics.send_nps_survey(user_id, trigger=f"admin_bulk_{segment}")
        if success:
            sent_count += 1

    text = "‚úÖ <b>NPS-–æ–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>\n\n"
    text += f"–°–µ–≥–º–µ–Ω—Ç: {segment}\n"
    text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
    text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –æ–ø—Ä–æ—Å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º."

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="pmf:back")]]
    )

    await edit_or_answer(callback, text, keyboard)


@pmf_router.callback_query(F.data == "pmf:back")
@require_admin
async def handle_back_to_main(callback: CallbackQuery, db, admin_ids: list[int]):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é PMF"""
    metrics = PMFMetrics(db)
    nps = await metrics.get_nps(days=30)
    sean_ellis = await metrics.get_sean_ellis_score(days=30)
    usage = await metrics.get_usage_intensity()

    text = "üìä <b>–î–∞—à–±–æ—Ä–¥ Product-Market Fit</b>\n\n"
    text += "<b>üéØ –ò–Ω–¥–µ–∫—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (NPS)</b>\n"
    text += f"  –ò–Ω–¥–µ–∫—Å: <b>{nps.nps_score:+.0f}</b> {_nps_emoji(nps.nps_score)}\n"
    text += f"  –ü—Ä–æ–º–æ—É—Ç–µ—Ä—ã: {nps.promoters} ({nps.promoter_rate:.1f}%)\n"
    text += f"  –ù–µ–π—Ç—Ä–∞–ª—ã: {nps.passives}\n"
    text += f"  –ö—Ä–∏—Ç–∏–∫–∏: {nps.detractors} ({nps.detractor_rate:.1f}%)\n"
    text += f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {nps.average_score:.1f}/10\n"
    text += f"  –î–æ–ª—è –æ—Ç–≤–µ—Ç–æ–≤: {nps.response_rate:.1f}%\n"
    text += f"  –¢—Ä–µ–Ω–¥: {_format_trend(nps.trend)}\n\n"

    text += "<b>üíé –¢–µ—Å—Ç –®–æ–Ω–∞ –≠–ª–ª–∏—Å–∞ (PMF)</b>\n"
    text += f"  –û—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω—ã: <b>{sean_ellis.pmf_score:.1f}%</b>\n"
    text += f"  –°—Ç–∞—Ç—É—Å PMF: {_pmf_status(sean_ellis.pmf_achieved)}\n"
    text += f"  –û—Ç–≤–µ—Ç–æ–≤: {sean_ellis.total_responses}\n\n"

    text += "<b>üìà –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n"
    text += f"  DAU (–¥–µ–Ω—å): {usage.dau}\n"
    text += f"  WAU (–Ω–µ–¥–µ–ª—è): {usage.wau}\n"
    text += f"  MAU (–º–µ—Å—è—Ü): {usage.mau}\n"
    text += f"  DAU/MAU: {usage.dau_mau_ratio:.1f}% {_stickiness_emoji(usage.dau_mau_ratio)}\n"
    text += f"  –°—É–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ: {usage.power_user_percentage:.1f}%\n"
    text += f"  –£–¥–µ—Ä–∂–∞–Ω–∏–µ L28: {usage.l28_retention:.1f}%\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è NPS", callback_data="pmf:nps_details")],
            [InlineKeyboardButton(text="üéØ PMF –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º", callback_data="pmf:feature_pmf")],
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å NPS-–æ–ø—Ä–æ—Å", callback_data="pmf:send_survey")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pmf:refresh")],
        ]
    )

    await edit_or_answer(callback, text, keyboard)
    await callback.answer()


__all__ = (
    "pmf_router",
    "cmd_pmf",
    "handle_pmf_refresh",
    "handle_nps_details",
    "handle_feature_pmf",
    "handle_feature_details",
    "handle_send_survey",
    "handle_survey_segment",
    "handle_back_to_main",
)
