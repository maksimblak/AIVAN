"""
üîî Automated Alerts System

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫:
- MRR drops
- Churn spikes
- NPS declines
- Feature errors
- Retention issues
"""

import asyncio
from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime
from html import escape as html_escape
import logging
from typing import Any, Awaitable, Iterable
import time

logger = logging.getLogger(__name__)


from src.core.admin_modules.cohort_analytics import CohortAnalytics
from src.core.admin_modules.pmf_metrics import PMFMetrics
from src.core.admin_modules.revenue_analytics import RevenueAnalytics
from src.core.admin_modules.retention_analytics import RetentionAnalytics
from src.core.user_behavior_tracker import UserBehaviorTracker


@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ alert"""
    severity: str  # "critical", "warning", "info"
    category: str  # "revenue", "retention", "pmf", "technical"
    title: str
    message: str
    metric_value: Any
    threshold: Any
    action_required: str  # –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
    timestamp: int


def group_alerts_by_severity(alerts: Iterable["Alert"]) -> dict[str, list["Alert"]]:
    """Group alerts by severity for UI presentation."""
    groups: dict[str, list[Alert]] = defaultdict(list)
    for alert in alerts:
        groups[alert.severity].append(alert)
    for severity in ("critical", "warning", "info"):
        groups.setdefault(severity, [])
    return groups





@dataclass
class AlertConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è alert –ø—Ä–∞–≤–∏–ª"""
    # Revenue alerts
    mrr_drop_threshold: float = 10.0  # % –ø–∞–¥–µ–Ω–∏–µ MRR
    churn_spike_threshold: float = 20.0  # % —Ä–æ—Å—Ç churn
    quick_ratio_min: float = 1.0

    # Retention alerts
    day_30_retention_min: float = 30.0  # %
    power_user_churn_threshold: int = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ power users —É—à–µ–¥—à–∏—Ö

    # PMF alerts
    nps_min: float = 0.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π NPS
    nps_drop_threshold: float = 10.0  # –ü–∞–¥–µ–Ω–∏–µ NPS
    dau_mau_min: float = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π DAU/MAU ratio

    # Technical alerts
    error_rate_threshold: float = 10.0  # % –æ—à–∏–±–æ–∫
    feature_success_rate_min: float = 80.0  # %
    # Garant API limits
    garant_min_remaining: int = 10  # –û—Å—Ç–∞—Ç–æ–∫ –≤—ã–∑–æ–≤–æ–≤, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —à–ª—ë–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

    # Cache
    alerts_cache_ttl_seconds: int = 60


class AutomatedAlerts:
    """
    –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
    """

    def __init__(self, db, bot, admin_chat_ids: list[int], config: AlertConfig | None = None):
        self.db = db
        self.bot = bot
        self.admin_chat_ids = admin_chat_ids
        self.config = config or AlertConfig()

        # Analytics instances
        self.cohort_analytics = CohortAnalytics(db)
        self.pmf_metrics = PMFMetrics(db)
        self.revenue_analytics = RevenueAnalytics(db)
        self.retention_analytics = RetentionAnalytics(db)
        self.behavior_tracker = UserBehaviorTracker(db)

        self._alerts_cache: list[Alert] = []
        self._alerts_cache_timestamp: float = 0.0
        self._alerts_cache_lock = asyncio.Lock()

    async def check_all_alerts(self, force_refresh: bool = False) -> list[Alert]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å alerts

        Args:
            force_refresh: –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–Ω–æ–≤–æ

        Returns: –°–ø–∏—Å–æ–∫ alerts
        """
        now = time.time()
        ttl = self.config.alerts_cache_ttl_seconds

        if not force_refresh and self._alerts_cache and (now - self._alerts_cache_timestamp) < ttl:
            return list(self._alerts_cache)

        async with self._alerts_cache_lock:
            now = time.time()
            if not force_refresh and self._alerts_cache and (now - self._alerts_cache_timestamp) < ttl:
                return list(self._alerts_cache)

            tasks = [
                self._run_check("revenue", self._check_revenue_alerts()),
                self._run_check("retention", self._check_retention_alerts()),
                self._run_check("pmf", self._check_pmf_alerts()),
                self._run_check("technical", self._check_technical_alerts()),
            ]

            results = await asyncio.gather(*tasks)

            alerts: list[Alert] = []
            for result in results:
                alerts.extend(result)

            self._alerts_cache = list(alerts)
            self._alerts_cache_timestamp = now
            return list(alerts)


    async def _run_check(self, name: str, coroutine: Awaitable[list[Alert]]) -> list[Alert]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç—Ä–∏–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫"""
        try:
            return await coroutine
        except Exception:
            logger.exception("Error checking %s alerts", name)
            return []

    async def _check_revenue_alerts(self) -> list[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ revenue –º–µ—Ç—Ä–∏–∫"""
        alerts = []

        try:
            # MRR drop
            current_mrr = await self.revenue_analytics.get_mrr_breakdown()

            if current_mrr.mrr_growth_rate < -self.config.mrr_drop_threshold:
                alerts.append(Alert(
                    severity="critical",
                    category="revenue",
                    title="üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞–¥–µ–Ω–∏–µ MRR",
                    message=f"MRR —É–ø–∞–ª –Ω–∞ {abs(current_mrr.mrr_growth_rate):.1f}% –≤ {current_mrr.month}",
                    metric_value=current_mrr.mrr_growth_rate,
                    threshold=-self.config.mrr_drop_threshold,
                    action_required="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å churn reasons, –ø—Ä–æ–≤–µ—Å—Ç–∏ retention campaign",
                    timestamp=int(datetime.now().timestamp())
                ))

            # Churn spike
            if current_mrr.customer_churn_rate > self.config.churn_spike_threshold:
                alerts.append(Alert(
                    severity="critical",
                    category="revenue",
                    title="üö® –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Ç–æ–∫–∞",
                    message=f"–£—Ä–æ–≤–µ–Ω—å –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {current_mrr.customer_churn_rate:.1f}% ({current_mrr.churned_customers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)",
                    metric_value=current_mrr.customer_churn_rate,
                    threshold=self.config.churn_spike_threshold,
                    action_required="–ó–∞–ø—É—Å—Ç–∏—Ç—å winback campaign, –ø—Ä–æ–≤–µ—Å—Ç–∏ exit interviews",
                    timestamp=int(datetime.now().timestamp())
                ))

            # Quick Ratio too low
            arr_metrics = await self.revenue_analytics.get_arr_metrics()

            if arr_metrics.quick_ratio < self.config.quick_ratio_min:
                alerts.append(Alert(
                    severity="warning",
                    category="revenue",
                    title="‚ö†Ô∏è –ù–∏–∑–∫–∏–π Quick Ratio",
                    message=f"Quick Ratio: {arr_metrics.quick_ratio:.2f} (—Ü–µ–ª—å: >{self.config.quick_ratio_min})",
                    metric_value=arr_metrics.quick_ratio,
                    threshold=self.config.quick_ratio_min,
                    action_required="–§–æ–∫—É—Å –Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ churn –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ expansion revenue",
                    timestamp=int(datetime.now().timestamp())
                ))

        except Exception:
            logger.exception("Error checking revenue alerts")

        return alerts

    async def _check_retention_alerts(self) -> list[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ retention –º–µ—Ç—Ä–∏–∫"""
        alerts = []

        try:
            # Cohort retention
            comparison = await self.cohort_analytics.compare_cohorts(months_back=3)

            if comparison.cohorts_data:
                latest_cohort = comparison.cohorts_data[0]

                if latest_cohort.day_30_retention < self.config.day_30_retention_min:
                    alerts.append(Alert(
                        severity="warning",
                        category="retention",
                        title="üìâ –ù–∏–∑–∫–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ 30-–π –¥–µ–Ω—å",
                        message=f"–ö–æ–≥–æ—Ä—Ç–∞ {latest_cohort.cohort_month}: {latest_cohort.day_30_retention:.1f}% —É–¥–µ—Ä–∂–∞–Ω–∏–µ",
                        metric_value=latest_cohort.day_30_retention,
                        threshold=self.config.day_30_retention_min,
                        action_required="–£–ª—É—á—à–∏—Ç—å onboarding, –¥–æ–±–∞–≤–∏—Ç—å engagement hooks",
                        timestamp=int(datetime.now().timestamp())
                    ))

            # Power user churn
            churned_power_users = await self._count_churned_power_users(days=7)

            if churned_power_users >= self.config.power_user_churn_threshold:
                alerts.append(Alert(
                    severity="critical",
                    category="retention",
                    title="üî¥ –£—Ö–æ–¥—è—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    message=f"{churned_power_users} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—à–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
                    metric_value=churned_power_users,
                    threshold=self.config.power_user_churn_threshold,
                    action_required="–°–†–û–ß–ù–û —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É—à–µ–¥—à–∏–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã",
                    timestamp=int(datetime.now().timestamp())
                ))

        except Exception:
            logger.exception("Error checking retention alerts")

        return alerts

    async def _count_churned_power_users(self, days: int = 7) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ power users —É—à–ª–∏"""
        async with self.db.pool.acquire() as conn:
            cursor = await conn.execute("""
                SELECT COUNT(*) as churned
                FROM users u
                WHERE u.total_requests > 50
                  AND (
                      SELECT COUNT(*) FROM payments
                      WHERE payments.user_id = u.user_id AND status = 'completed'
                  ) >= 2
                  AND u.subscription_until < strftime('%s', 'now')
                  AND u.last_active IS NOT NULL
                  AND (strftime('%s', 'now') - u.last_active) BETWEEN 0 AND ?
            """, (86400 * days,))
            row = await cursor.fetchone()
            await cursor.close()

            return row[0] if row else 0

    async def _check_pmf_alerts(self) -> list[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ PMF –º–µ—Ç—Ä–∏–∫"""
        alerts = []

        try:
            # NPS drop
            nps = await self.pmf_metrics.get_nps(days=30)

            if nps.nps_score < self.config.nps_min:
                alerts.append(Alert(
                    severity="critical",
                    category="pmf",
                    title="üî¥ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π NPS",
                    message=f"NPS Score: {nps.nps_score:+.0f} (–ö—Ä–∏—Ç–∏–∫–∏: {nps.detractor_rate:.1f}%)",
                    metric_value=nps.nps_score,
                    threshold=self.config.nps_min,
                    action_required="–û–ø—Ä–æ—Å–∏—Ç—å –∫—Ä–∏—Ç–∏–∫–æ–≤, –≤—ã—è–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
                    timestamp=int(datetime.now().timestamp())
                ))

            if (nps.previous_nps is not None) and (nps.nps_score < nps.previous_nps - self.config.nps_drop_threshold):
                alerts.append(Alert(
                    severity="warning",
                    category="pmf",
                    title="üìâ –ü–∞–¥–µ–Ω–∏–µ NPS",
                    message=f"NPS —É–ø–∞–ª —Å {nps.previous_nps:+.0f} –¥–æ {nps.nps_score:+.0f}",
                    metric_value=nps.nps_score - nps.previous_nps,
                    threshold=-self.config.nps_drop_threshold,
                    action_required="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    timestamp=int(datetime.now().timestamp())
                ))

            # DAU/MAU stickiness
            usage = await self.pmf_metrics.get_usage_intensity()

            if usage.dau_mau_ratio < self.config.dau_mau_min:
                alerts.append(Alert(
                    severity="warning",
                    category="pmf",
                    title="‚ö†Ô∏è –ù–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å",
                    message=f"DAU/MAU: {usage.dau_mau_ratio:.1f}% (—Ü–µ–ª—å: >{self.config.dau_mau_min}%)",
                    metric_value=usage.dau_mau_ratio,
                    threshold=self.config.dau_mau_min,
                    action_required="–î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    timestamp=int(datetime.now().timestamp())
                ))

        except Exception:
            logger.exception("Error checking PMF alerts")

        return alerts

    async def _check_technical_alerts(self) -> list[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ technical –º–µ—Ç—Ä–∏–∫"""
        alerts = []

        try:
            # Feature error rates
            engagements = await self.behavior_tracker.get_feature_engagement(days=7)

            for engagement in engagements:
                if engagement.success_rate < self.config.feature_success_rate_min:
                    alerts.append(Alert(
                        severity="critical",
                        category="technical",
                        title=f"üî¥ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫: {engagement.feature_name}",
                        message=f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {engagement.success_rate:.1f}% (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {engagement.total_uses})",
                        metric_value=engagement.success_rate,
                        threshold=self.config.feature_success_rate_min,
                        action_required=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –¥–ª—è {engagement.feature_name}, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏",
                        timestamp=int(datetime.now().timestamp())
                    ))

            # Friction points with high impact
            frictions = await self.behavior_tracker.identify_friction_points(days=7)

            for friction in frictions:
                if friction.impact_score > 80:
                    alerts.append(Alert(
                        severity="critical",
                        category="technical",
                        title=f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞: {friction.location}",
                        message=f"–í–ª–∏—è–Ω–∏–µ: {friction.impact_score}/100, –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ {friction.affected_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                        metric_value=friction.impact_score,
                        threshold=80,
                        action_required=f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å {friction.friction_type} –≤ {friction.location}",
                        timestamp=int(datetime.now().timestamp())
                    ))

            # Garant API limits (diagnostics): –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
            try:
                from src.core.bot_app import context as simple_context  # noqa: WPS433

                garant_client = getattr(simple_context, "garant_client", None)
                if getattr(garant_client, "enabled", False):
                    limits = await garant_client.get_limits()  # type: ignore[attr-defined]
                    warn_threshold = max(0, int(self.config.garant_min_remaining))
                    for item in limits or []:
                        # –ï—Å–ª–∏ —è–≤–Ω—ã–π –Ω–æ–ª—å ‚Äî –∫—Ä–∏—Ç–∏—á–Ω–æ; –µ—Å–ª–∏ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ‚Äî warning
                        if item.value <= 0:
                            alerts.append(Alert(
                                severity="critical",
                                category="technical",
                                title="üî¥ –ì–ê–†–ê–ù–¢: –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç",
                                message=f"{item.title}: 0 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤—ã–∑–æ–≤–æ–≤",
                                metric_value=item.value,
                                threshold=0,
                                action_required="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏, —É–≤–µ–ª–∏—á–∏—Ç—å –∫–≤–æ—Ç—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ—Å—è—Ü",
                                timestamp=int(datetime.now().timestamp()),
                            ))
                        elif item.value <= warn_threshold:
                            alerts.append(Alert(
                                severity="warning",
                                category="technical",
                                title="‚ö†Ô∏è –ì–ê–†–ê–ù–¢: –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫",
                                message=f"{item.title}: {item.value} –≤—ã–∑–æ–≤–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å",
                                metric_value=item.value,
                                threshold=warn_threshold,
                                action_required="–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–≤–æ—Ç—É",
                                timestamp=int(datetime.now().timestamp()),
                            ))
            except Exception:
                logger.debug("Garant limits check skipped", exc_info=True)

        except Exception:
            logger.exception("Error checking technical alerts")

        return alerts

    async def send_alerts(self, alerts: list[Alert]):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å alerts –∞–¥–º–∏–Ω–∞–º –≤ Telegram

        Args:
            alerts: –°–ø–∏—Å–æ–∫ alerts –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not alerts:
            return

        grouped = group_alerts_by_severity(alerts)
        critical = grouped.get("critical", [])
        warnings = grouped.get("warning", [])
        info = grouped.get("info", [])

        # Send to all admins
        for admin_id in self.admin_chat_ids:
            try:
                # Critical alerts first
                if critical:
                    message = "üö® <b>CRITICAL ALERTS</b>\n\n"
                    for alert in critical:
                        message += self._format_alert(alert) + "\n"

                    await self.bot.send_message(admin_id, message, parse_mode="HTML")

                # Warnings
                if warnings:
                    message = "‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</b>\n\n"
                    for alert in warnings:
                        message += self._format_alert(alert) + "\n"

                    await self.bot.send_message(admin_id, message, parse_mode="HTML")

                # Info (only if no critical/warnings)
                if info and not critical and not warnings:
                    message = "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                    for alert in info:
                        message += self._format_alert(alert) + "\n"

                    await self.bot.send_message(admin_id, message, parse_mode="HTML")

            except Exception:
                logger.exception("Error sending alert to admin %s", admin_id)

    def _format_alert(self, alert: Alert) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å alert –¥–ª—è Telegram"""
        title = html_escape(alert.title or "")
        message = html_escape(alert.message or "")
        action = html_escape(alert.action_required or "")
        text = f"<b>{title}</b>\n"
        text += f"{message}\n"
        text += f"<i>–î–µ–π—Å—Ç–≤–∏–µ: {action}</i>\n"
        return text

    async def monitoring_loop(self, check_interval_seconds: int = 3600):
        """
        Background task –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ alerts

        Args:
            check_interval_seconds: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (default: 1 —á–∞—Å)
        """
        while True:
            try:
                alerts = await self.check_all_alerts()

                if alerts:
                    await self.send_alerts(alerts)

                    # Log alerts
                    logger.info("Sent %d alerts at %s", len(alerts), datetime.now())

            except Exception:
                logger.exception("Error in monitoring loop")

            await asyncio.sleep(check_interval_seconds)

    async def send_daily_digest(self):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π digest –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫

        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–Ω–∞–ø—Ä., –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00)
        """
        try:
            # –°–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
            mrr = await self.revenue_analytics.get_mrr_breakdown()
            nps = await self.pmf_metrics.get_nps(days=30)
            usage = await self.pmf_metrics.get_usage_intensity()
            comparison = await self.cohort_analytics.compare_cohorts(months_back=3)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ digest
            text = "‚òÄÔ∏è <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º</b>\n"
            text += f"üìÖ {datetime.now().strftime('%Y-%m-%d')}\n\n"

            # Revenue
            text += "<b>üí∞ –í—ã—Ä—É—á–∫–∞</b>\n"
            text += f"  MRR: {mrr.total_mrr:,}‚ÇΩ ({mrr.mrr_growth_rate:+.1f}%)\n"
            text += f"  –ö–ª–∏–µ–Ω—Ç–æ–≤: {mrr.total_paying_customers}\n"
            text += f"  –û—Ç—Ç–æ–∫: {mrr.customer_churn_rate:.1f}%\n\n"

            # PMF
            text += "<b>üìä Product-Market Fit</b>\n"
            text += f"  NPS: {nps.nps_score:+.0f}\n"
            text += f"  DAU: {usage.dau} | WAU: {usage.wau} | MAU: {usage.mau}\n"
            text += f"  –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (DAU/MAU): {usage.dau_mau_ratio:.1f}%\n\n"

            # Retention
            if comparison.cohorts_data:
                latest = comparison.cohorts_data[0]
                text += "<b>üéØ –£–¥–µ—Ä–∂–∞–Ω–∏–µ</b>\n"
                text += f"  –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–≥–æ—Ä—Ç–∞ ({latest.cohort_month})\n"
                text += f"  –î–µ–Ω—å 30: {latest.day_30_retention:.1f}%\n"
                text += f"  –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {latest.conversion_rate:.1f}%\n\n"

            # Alerts
            alerts = await self.check_all_alerts()
            critical_count = len(group_alerts_by_severity(alerts).get("critical", []))

            if critical_count > 0:
                text += f"üö® <b>{critical_count} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤</b>\n"
                text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /alerts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π\n"

            # Send to admins
            for admin_id in self.admin_chat_ids:
                await self.bot.send_message(admin_id, text, parse_mode="HTML")

        except Exception:
            logger.exception("Error sending daily digest")


# Helper function –¥–ª—è –∑–∞–ø—É—Å–∫–∞ monitoring –≤ background
async def start_monitoring(db, bot, admin_chat_ids: list[int], config: AlertConfig | None = None):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å background monitoring task

    Usage in main():
    ```python
    # Create task
    alert_system = AutomatedAlerts(db, bot, admin_chat_ids=[ADMIN_ID])
    asyncio.create_task(alert_system.monitoring_loop(check_interval_seconds=3600))
    ```
    """
    alert_system = AutomatedAlerts(db, bot, admin_chat_ids, config)
    await alert_system.monitoring_loop()

__all__ = (
    "AutomatedAlerts",
    "start_monitoring",
)
