"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, –æ—Ç—Ç–æ–∫–∞
"""

from __future__ import annotations

import logging
import time
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Any

logger = logging.getLogger(__name__)


@dataclass
class UserSegment:
    """–°–µ–≥–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    segment_id: str
    name: str
    description: str
    user_count: int
    users: list[dict[str, Any]]
    metrics: dict[str, Any]


@dataclass
class ConversionMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    total_trial_users: int
    converted_to_paid: int
    conversion_rate: float
    avg_trial_requests_before_conversion: float
    avg_time_to_conversion_days: float


@dataclass
class ChurnMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç—Ç–æ–∫–∞"""
    total_expired: int
    renewed_count: int
    churned_count: int
    retention_rate: float
    avg_requests_before_churn: float
    churn_by_usage: dict[str, int]  # low/medium/high usage


class AdminAnalytics:
    """–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""

    def __init__(self, db):
        self.db = db

    async def get_user_segments(self) -> dict[str, UserSegment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

        segments = {}

        # 1. Power Users - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        segments['power_users'] = await self._get_power_users()

        # 2. At Risk - —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞
        segments['at_risk'] = await self._get_at_risk_users()

        # 3. Churned - —É—à–µ–¥—à–∏–µ
        segments['churned'] = await self._get_churned_users()

        # 4. Trial Converters - —É—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
        segments['trial_converters'] = await self._get_trial_converters()

        # 5. Freeloaders - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ trial –∏ –ø—Ä–æ–ø–∞–ª–∏
        segments['freeloaders'] = await self._get_freeloaders()

        # 6. New Users - –Ω–æ–≤—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        segments['new_users'] = await self._get_new_users()

        # 7. VIP - —Ç–æ–ø –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º
        segments['vip'] = await self._get_vip_users()

        return segments

    async def _get_power_users(self) -> UserSegment:
        """–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (> 5 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å)"""

        async with self.db.pool.acquire() as conn:
            now = int(time.time())
            week_ago = now - (7 * 86400)

            cursor = await conn.execute("""
                SELECT
                    u.user_id,
                    u.total_requests,
                    u.last_request_at,
                    u.subscription_until,
                    u.created_at,
                    COUNT(r.id) as week_requests,
                    AVG(r.response_time_ms) as avg_response_time
                FROM users u
                LEFT JOIN requests r ON u.user_id = r.user_id
                    AND r.created_at >= ?
                WHERE u.subscription_until > ?
                GROUP BY u.user_id
                HAVING week_requests > 35  -- > 5/–¥–µ–Ω—å –∑–∞ –Ω–µ–¥–µ–ª—é
                ORDER BY week_requests DESC
            """, (week_ago, now))

            rows = await cursor.fetchall()
            await cursor.close()

            users = []
            for row in rows:
                users.append({
                    'user_id': row[0],
                    'total_requests': row[1],
                    'last_active': datetime.fromtimestamp(row[2]).strftime('%Y-%m-%d %H:%M'),
                    'subscription_until': datetime.fromtimestamp(row[3]).strftime('%Y-%m-%d'),
                    'days_since_registration': (now - row[4]) // 86400,
                    'week_requests': row[5],
                    'avg_requests_per_day': round(row[5] / 7, 1),
                    'avg_response_time_ms': int(row[6]) if row[6] else 0
                })

            metrics = {
                'total_revenue_potential': len(users) * 300,  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
                'avg_requests_per_user': sum(u['week_requests'] for u in users) / max(len(users), 1),
                'most_active_user_id': users[0]['user_id'] if users else None
            }

            return UserSegment(
                segment_id='power_users',
                name='‚ö° Power Users',
                description='–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (>5 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å)',
                user_count=len(users),
                users=users,
                metrics=metrics
            )

    async def _get_at_risk_users(self) -> UserSegment:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞"""

        async with self.db.pool.acquire() as conn:
            now = int(time.time())
            week_ago = now - (7 * 86400)
            expires_soon = now + (7 * 86400)  # –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π

            cursor = await conn.execute("""
                SELECT
                    u.user_id,
                    u.total_requests,
                    u.last_request_at,
                    u.subscription_until,
                    COUNT(r.id) as week_requests
                FROM users u
                LEFT JOIN requests r ON u.user_id = r.user_id
                    AND r.created_at >= ?
                WHERE u.subscription_until > ?
                  AND u.subscription_until < ?
                GROUP BY u.user_id
                HAVING week_requests < 14  -- < 2/–¥–µ–Ω—å
                ORDER BY u.subscription_until ASC
            """, (week_ago, now, expires_soon))

            rows = await cursor.fetchall()
            await cursor.close()

            users = []
            for row in rows:
                days_until_expiry = (row[3] - now) // 86400
                users.append({
                    'user_id': row[0],
                    'total_requests': row[1],
                    'last_active': datetime.fromtimestamp(row[2]).strftime('%Y-%m-%d %H:%M'),
                    'days_until_expiry': days_until_expiry,
                    'week_requests': row[4],
                    'risk_level': 'high' if days_until_expiry < 3 else 'medium'
                })

            metrics = {
                'high_risk_count': sum(1 for u in users if u['risk_level'] == 'high'),
                'potential_revenue_loss': len(users) * 300
            }

            return UserSegment(
                segment_id='at_risk',
                name='‚ö†Ô∏è At Risk',
                description='–ú–∞–ª–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç, –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ',
                user_count=len(users),
                users=users,
                metrics=metrics
            )

    async def _get_churned_users(self) -> UserSegment:
        """–£—à–µ–¥—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É)"""

        async with self.db.pool.acquire() as conn:
            now = int(time.time())
            month_ago = now - (30 * 86400)

            cursor = await conn.execute("""
                SELECT
                    u.user_id,
                    u.total_requests,
                    u.last_request_at,
                    u.subscription_until,
                    u.created_at,
                    COUNT(t.id) as total_payments
                FROM users u
                LEFT JOIN payments t ON u.user_id = t.user_id
                WHERE u.subscription_until > ?
                  AND u.subscription_until < ?
                  AND u.last_request_at < u.subscription_until
                GROUP BY u.user_id
                HAVING total_payments > 0
                ORDER BY u.subscription_until DESC
            """, (month_ago, now))

            rows = await cursor.fetchall()
            await cursor.close()

            users = []
            for row in rows:
                days_since_expiry = (now - row[3]) // 86400
                lifetime_days = (row[3] - row[4]) // 86400
                users.append({
                    'user_id': row[0],
                    'total_requests': row[1],
                    'last_active': datetime.fromtimestamp(row[2]).strftime('%Y-%m-%d %H:%M'),
                    'expired_at': datetime.fromtimestamp(row[3]).strftime('%Y-%m-%d'),
                    'days_since_expiry': days_since_expiry,
                    'lifetime_days': lifetime_days,
                    'total_payments': row[5],
                    'ltv': row[5] * 300  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è lifetime value
                })

            metrics = {
                'avg_lifetime_days': sum(u['lifetime_days'] for u in users) / max(len(users), 1),
                'total_lost_revenue': sum(u['ltv'] for u in users)
            }

            return UserSegment(
                segment_id='churned',
                name='üìâ Churned',
                description='–ù–µ –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è',
                user_count=len(users),
                users=users,
                metrics=metrics
            )

    async def _get_trial_converters(self) -> UserSegment:
        """–£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å –∏–∑ trial –≤ paid"""

        async with self.db.pool.acquire() as conn:
            cursor = await conn.execute("""
                SELECT
                    u.user_id,
                    u.total_requests,
                    u.created_at,
                    u.subscription_until,
                    MIN(t.created_at) as first_payment_at,
                    COUNT(t.id) as payment_count
                FROM users u
                INNER JOIN payments t ON u.user_id = t.user_id
                    AND t.status = 'completed'
                GROUP BY u.user_id
                ORDER BY first_payment_at DESC
                LIMIT 100
            """)

            rows = await cursor.fetchall()
            await cursor.close()

            users = []
            for row in rows:
                time_to_conversion_days = (row[4] - row[2]) // 86400
                users.append({
                    'user_id': row[0],
                    'total_requests': row[1],
                    'registered_at': datetime.fromtimestamp(row[2]).strftime('%Y-%m-%d'),
                    'first_payment_at': datetime.fromtimestamp(row[4]).strftime('%Y-%m-%d'),
                    'time_to_conversion_days': time_to_conversion_days,
                    'payment_count': row[5],
                    'is_recurring': row[5] > 1
                })

            metrics = {
                'avg_time_to_conversion': sum(u['time_to_conversion_days'] for u in users) / max(len(users), 1),
                'recurring_customers': sum(1 for u in users if u['is_recurring']),
                'total_revenue': len(users) * 300
            }

            return UserSegment(
                segment_id='trial_converters',
                name='üí∞ Trial Converters',
                description='–£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –ø–ª–∞—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
                user_count=len(users),
                users=users,
                metrics=metrics
            )

    async def _get_freeloaders(self) -> UserSegment:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ trial –∏ –Ω–µ –∫—É–ø–∏–ª–∏"""

        async with self.db.pool.acquire() as conn:
            now = int(time.time())
            week_ago = now - (7 * 86400)

            cursor = await conn.execute("""
                SELECT
                    u.user_id,
                    u.total_requests,
                    u.trial_remaining,
                    u.last_request_at,
                    u.created_at
                FROM users u
                LEFT JOIN payments t ON u.user_id = t.user_id
                WHERE u.trial_remaining < 3
                  AND u.subscription_until <= ?
                  AND t.id IS NULL
                  AND u.last_request_at < ?
                ORDER BY u.total_requests DESC
            """, (now, week_ago))

            rows = await cursor.fetchall()
            await cursor.close()

            users = []
            for row in rows:
                days_inactive = (now - row[3]) // 86400
                users.append({
                    'user_id': row[0],
                    'total_requests': row[1],
                    'trial_remaining': row[2],
                    'days_inactive': days_inactive,
                    'registered_at': datetime.fromtimestamp(row[4]).strftime('%Y-%m-%d')
                })

            return UserSegment(
                segment_id='freeloaders',
                name='üö´ Freeloaders',
                description='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ trial, –Ω–µ –∫—É–ø–∏–ª–∏, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã',
                user_count=len(users),
                users=users,
                metrics={'potential_conversions': len(users)}
            )

    async def _get_new_users(self) -> UserSegment:
        """–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""

        async with self.db.pool.acquire() as conn:
            now = int(time.time())
            week_ago = now - (7 * 86400)

            cursor = await conn.execute("""
                SELECT
                    u.user_id,
                    u.total_requests,
                    u.trial_remaining,
                    u.created_at,
                    u.subscription_until
                FROM users u
                WHERE u.created_at >= ?
                ORDER BY u.created_at DESC
            """, (week_ago,))

            rows = await cursor.fetchall()
            await cursor.close()

            users = []
            for row in rows:
                users.append({
                    'user_id': row[0],
                    'total_requests': row[1],
                    'trial_remaining': row[2],
                    'registered_at': datetime.fromtimestamp(row[3]).strftime('%Y-%m-%d %H:%M'),
                    'has_subscription': row[4] > now
                })

            metrics = {
                'already_paid': sum(1 for u in users if u['has_subscription']),
                'avg_requests': sum(u['total_requests'] for u in users) / max(len(users), 1)
            }

            return UserSegment(
                segment_id='new_users',
                name='üÜï New Users',
                description='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π',
                user_count=len(users),
                users=users,
                metrics=metrics
            )

    async def _get_vip_users(self) -> UserSegment:
        """VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Ç–æ–ø –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""

        async with self.db.pool.acquire() as conn:
            cursor = await conn.execute("""
                SELECT
                    u.user_id,
                    u.total_requests,
                    u.subscription_until,
                    COUNT(t.id) as payment_count,
                    SUM(t.amount) as total_spent,
                    MIN(t.created_at) as first_payment,
                    MAX(t.created_at) as last_payment
                FROM users u
                INNER JOIN payments t ON u.user_id = t.user_id
                    AND t.status = 'completed'
                GROUP BY u.user_id
                HAVING payment_count >= 2
                ORDER BY total_spent DESC
                LIMIT 20
            """)

            rows = await cursor.fetchall()
            await cursor.close()

            users = []
            for row in rows:
                users.append({
                    'user_id': row[0],
                    'total_requests': row[1],
                    'subscription_until': datetime.fromtimestamp(row[2]).strftime('%Y-%m-%d'),
                    'payment_count': row[3],
                    'total_spent': row[4],
                    'first_payment': datetime.fromtimestamp(row[5]).strftime('%Y-%m-%d'),
                    'last_payment': datetime.fromtimestamp(row[6]).strftime('%Y-%m-%d')
                })

            return UserSegment(
                segment_id='vip',
                name='üëë VIP Users',
                description='–¢–æ–ø-20 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–ª–∞—Ç–µ–∂–µ–π',
                user_count=len(users),
                users=users,
                metrics={'total_vip_revenue': sum(u['total_spent'] for u in users)}
            )

    async def get_conversion_metrics(self) -> ConversionMetrics:
        """–ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ trial -> paid"""

        async with self.db.pool.acquire() as conn:
            # –í—Å–µ–≥–æ trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM users WHERE trial_remaining < 10"
            )
            total_trial = (await cursor.fetchone())[0]
            await cursor.close()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ paid
            cursor = await conn.execute("""
                SELECT
                    COUNT(DISTINCT u.user_id) as converted,
                    AVG(u.total_requests) as avg_requests,
                    AVG(t.created_at - u.created_at) as avg_time_to_conversion
                FROM users u
                INNER JOIN payments t ON u.user_id = t.user_id
                WHERE u.trial_remaining < 10
            """)
            row = await cursor.fetchone()
            await cursor.close()

            converted = row[0] or 0
            avg_requests = row[1] or 0
            avg_time = (row[2] or 0) / 86400  # –≤ –¥–Ω—è—Ö

            return ConversionMetrics(
                total_trial_users=total_trial,
                converted_to_paid=converted,
                conversion_rate=round((converted / max(total_trial, 1)) * 100, 2),
                avg_trial_requests_before_conversion=round(avg_requests, 1),
                avg_time_to_conversion_days=round(avg_time, 1)
            )

    async def get_churn_metrics(self, period_days: int = 30) -> ChurnMetrics:
        """–ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç—Ç–æ–∫–∞"""

        async with self.db.pool.acquire() as conn:
            now = int(time.time())
            period_start = now - (period_days * 86400)

            # –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            cursor = await conn.execute("""
                SELECT
                    COUNT(*) as total,
                    SUM(CASE WHEN renewed.user_id IS NOT NULL THEN 1 ELSE 0 END) as renewed
                FROM users u
                LEFT JOIN (
                    SELECT DISTINCT user_id
                    FROM payments
                    WHERE created_at >= ? AND status = 'completed'
                ) renewed ON u.user_id = renewed.user_id
                WHERE u.subscription_until >= ?
                  AND u.subscription_until < ?
            """, (period_start, period_start, now))

            row = await cursor.fetchone()
            await cursor.close()

            total_expired = row[0] or 0
            renewed = row[1] or 0
            churned = total_expired - renewed

            return ChurnMetrics(
                total_expired=total_expired,
                renewed_count=renewed,
                churned_count=churned,
                retention_rate=round((renewed / max(total_expired, 1)) * 100, 2),
                avg_requests_before_churn=0.0,  # TODO: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
                churn_by_usage={}  # TODO: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
            )

    async def get_daily_stats(self, days: int = 7) -> list[dict[str, Any]]:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""

        async with self.db.pool.acquire() as conn:
            now = int(time.time())
            period_start = now - (days * 86400)

            cursor = await conn.execute("""
                SELECT
                    DATE(created_at, 'unixepoch') as date,
                    COUNT(*) as requests,
                    COUNT(DISTINCT user_id) as active_users,
                    SUM(tokens_used) as total_tokens,
                    AVG(response_time_ms) as avg_response_time
                FROM requests
                WHERE created_at >= ?
                GROUP BY date
                ORDER BY date DESC
            """, (period_start,))

            rows = await cursor.fetchall()
            await cursor.close()

            return [
                {
                    'date': row[0],
                    'requests': row[1],
                    'active_users': row[2],
                    'total_tokens': row[3],
                    'avg_response_time_ms': int(row[4]) if row[4] else 0
                }
                for row in rows
            ]

    def format_segment_summary(self, segment: UserSegment, max_users: int = 5) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""

        summary = f"<b>{segment.name}</b>\n"
        summary += f"<i>{segment.description}</i>\n\n"
        summary += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{segment.user_count}</b>\n"

        if segment.metrics:
            summary += "\n<b>–ú–µ—Ç—Ä–∏–∫–∏:</b>\n"
            for key, value in segment.metrics.items():
                summary += f"‚Ä¢ {key.replace('_', ' ').title()}: {value}\n"

        if segment.users:
            summary += f"\n<b>–¢–æ–ø-{min(max_users, len(segment.users))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
            for user in segment.users[:max_users]:
                summary += f"\nüë§ ID: <code>{user['user_id']}</code>\n"
                for k, v in list(user.items())[1:4]:  # –ø–µ—Ä–≤—ã–µ 3 –ø–æ–ª—è –∫—Ä–æ–º–µ ID
                    summary += f"   ‚Ä¢ {k}: {v}\n"

        return summary

