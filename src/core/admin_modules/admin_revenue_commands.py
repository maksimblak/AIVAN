"""
Admin commands –¥–ª—è Revenue Analytics
"""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from src.core.admin_modules.admin_formatters import growth_emoji, ltv_cac_status, quick_ratio_status
from src.core.admin_modules.admin_utils import back_keyboard, edit_or_answer, render_dashboard, require_admin
from src.core.admin_modules.revenue_analytics import RevenueAnalytics


revenue_router = Router(name="revenue_admin")


async def _build_revenue_dashboard(db) -> tuple[str, InlineKeyboardMarkup]:
    analytics = RevenueAnalytics(db)

    mrr = await analytics.get_mrr_breakdown()
    arr_metrics = await analytics.get_arr_metrics()
    unit_econ = await analytics.get_unit_economics()

    lines = [
        "üí∞ <b>–î–∞—à–±–æ—Ä–¥ –≤—ã—Ä—É—á–∫–∏</b>",
        "",
        f"<b>üìä MRR ({mrr.month}):</b> {mrr.total_mrr:,}‚ÇΩ",
        f"  –†–æ—Å—Ç: {mrr.mrr_growth_rate:+.1f}% {growth_emoji(mrr.mrr_growth_rate)}",
        f"  –ß–∏—Å—Ç—ã–π –Ω–æ–≤—ã–π MRR: {mrr.net_new_mrr:+,}‚ÇΩ",
        "",
        "<b>üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ MRR:</b>",
        f"  –ù–æ–≤—ã–µ: +{mrr.new_mrr:,}‚ÇΩ ({mrr.new_customers} –∫–ª–∏–µ–Ω—Ç–æ–≤)",
        f"  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: +{mrr.expansion_mrr:,}‚ÇΩ",
        f"  –û—Ç—Ç–æ–∫: -{mrr.churn_mrr:,}‚ÇΩ ({mrr.churned_customers} –ø–æ—Ç–µ—Ä—è–Ω–æ)",
        f"  –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: -{mrr.contraction_mrr:,}‚ÇΩ",
        "",
        f"<b>üìà ARR:</b> {arr_metrics.arr:,}‚ÇΩ",
        f"  –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π ARR (12 –º–µ—Å): {arr_metrics.projected_arr:,}‚ÇΩ",
        f"  Quick Ratio: {arr_metrics.quick_ratio:.2f} {quick_ratio_status(arr_metrics.quick_ratio)}",
        "",
        f"<b>üë• –ö–ª–∏–µ–Ω—Ç—ã:</b> {mrr.total_paying_customers}",
        f"  ARPU: {mrr.arpu:,.0f}‚ÇΩ",
        f"  –û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤: {mrr.customer_churn_rate:.1f}%",
        "",
        "<b>üíé –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞:</b>",
        f"  LTV: {unit_econ.ltv:,.0f}‚ÇΩ",
        f"  CAC: {unit_econ.cac:,.0f}‚ÇΩ",
        f"  LTV/CAC: {unit_econ.ltv_cac_ratio:.2f}x {ltv_cac_status(unit_econ.ltv_cac_ratio)}",
        f"  –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {unit_econ.payback_period:.1f} –º–µ—Å.",
        f"  –í–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞: {unit_econ.gross_margin*100:.0f}%",
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è MRR", callback_data="revenue:mrr_history")],
            [InlineKeyboardButton(text="üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏", callback_data="revenue:forecast")],
            [InlineKeyboardButton(text="üõ§Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä runway", callback_data="revenue:runway")],
            [InlineKeyboardButton(text="üìà –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="revenue:unit_econ")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="revenue:refresh")],
        ]
    )

    joiner = chr(10)
    text = joiner.join(lines)
    return text, keyboard


@revenue_router.message(Command("revenue"))
@require_admin
async def cmd_revenue(message: Message, db, admin_ids: list[int]):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é revenue analytics"""

    async def build_dashboard():
        return await _build_revenue_dashboard(db)

    await render_dashboard(build_dashboard, message)


@revenue_router.callback_query(F.data == "revenue:refresh")
@require_admin
async def handle_revenue_refresh(callback: CallbackQuery, db, admin_ids: list[int]):
    """–û–±–Ω–æ–≤–∏—Ç—å revenue dashboard"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")

    async def build_dashboard():
        return await _build_revenue_dashboard(db)

    await render_dashboard(build_dashboard, callback)


@revenue_router.callback_query(F.data == "revenue:mrr_history")
@require_admin
async def handle_mrr_history(callback: CallbackQuery, db, admin_ids: list[int]):
    """MRR History –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã"""
    analytics = RevenueAnalytics(db)
    history = await analytics.get_mrr_history(months=12)

    lines = ["üìä <b>–ò—Å—Ç–æ—Ä–∏—è MRR (12 –º–µ—Å—è—Ü–µ–≤)</b>", ""]

    for entry in history:
        lines.append(f"<b>{entry.month}</b>")
        lines.append(f"  MRR: {entry.total_mrr:,}‚ÇΩ ({entry.mrr_growth_rate:+.1f}%)")
        lines.append(f"  –ù–æ–≤—ã–µ: +{entry.new_mrr:,} | –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: +{entry.expansion_mrr:,}")
        lines.append(f"  –û—Ç—Ç–æ–∫: -{entry.churn_mrr:,} | –ö–ª–∏–µ–Ω—Ç—ã: {entry.total_paying_customers}")
        lines.append("")

    if history:
        lines.append("<b>üìà –¢—Ä–µ–Ω–¥ MRR:</b>")
        max_mrr = max(entry.total_mrr for entry in history)
        scale = max_mrr or 1
        for entry in history[-6:]:
            ratio = entry.total_mrr / scale if scale else 0
            bar_length = max(0, min(20, int(round(ratio * 20))))
            bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
            lines.append(f"{entry.month}: {bar} {entry.total_mrr:,}‚ÇΩ")

    joiner = chr(10)
    text = joiner.join(lines).rstrip()
    await edit_or_answer(callback, text, back_keyboard("revenue:back"))
    await callback.answer()


@revenue_router.callback_query(F.data == "revenue:forecast")
@require_admin
async def handle_revenue_forecast(callback: CallbackQuery, db, admin_ids: list[int]):
    """Revenue forecast"""
    analytics = RevenueAnalytics(db)
    forecasts = await analytics.get_revenue_forecast(months_ahead=6)

    if not forecasts:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", show_alert=True)
        return

    baseline = forecasts[0]
    lines = [
        "üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ (6 –º–µ—Å—è—Ü–µ–≤)</b>",
        "",
        "<b>–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏:</b>",
        f"  –¢–µ–º–ø —Ä–æ—Å—Ç–∞: {baseline.assumed_growth_rate*100:+.1f}%/month",
        f"  –û—Ç—Ç–æ–∫: {baseline.assumed_churn_rate*100:.1f}%/month",
        "",
        "<b>üìä –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>",
    ]

    for fc in forecasts[:6]:
        lines.append(f"<b>{fc.month}</b> (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {fc.confidence*100:.0f}%)")
        lines.append(f"  –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π: {fc.mrr_forecast_low:,}‚ÇΩ")
        lines.append(f"  –ë–∞–∑–æ–≤—ã–π: {fc.mrr_forecast_mid:,}‚ÇΩ")
        lines.append(f"  –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: {fc.mrr_forecast_high:,}‚ÇΩ")
        lines.append("")

    recent = forecasts[:6]
    if recent:
        max_mrr = max((f.mrr_forecast_high for f in recent), default=0) or 1
        lines.append("<b>üìà –û–∂–∏–¥–∞–µ–º–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</b>")
        for fc in recent:
            ratio = fc.mrr_forecast_mid / max_mrr if max_mrr else 0
            bar_length = max(0, min(20, int(round(ratio * 20))))
            bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
            lines.append(f"{fc.month}: {bar} {fc.mrr_forecast_mid:,}‚ÇΩ")

    joiner = chr(10)
    text = joiner.join(lines).rstrip()
    await edit_or_answer(callback, text, back_keyboard("revenue:back"))
    await callback.answer()


@revenue_router.callback_query(F.data == "revenue:runway")
@require_admin
async def handle_runway_calculator(callback: CallbackQuery, db, admin_ids: list[int]):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞—Å—á–µ—Ç—É runway"""
    lines = [
        "üõ§Ô∏è <b>Runway Calculator</b>",
        "",
        "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ runway –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        "",
        "<code>/runway [cash] [monthly_burn]</code>",
        "",
        "<b>–ü—Ä–∏–º–µ—Ä:</b>",
        "<code>/runway 500000 -50000</code>",
        "",
        "–ì–¥–µ:",
        "‚Ä¢ cash - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö",
        "‚Ä¢ monthly_burn - –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ (negative)",
    ]

    joiner = chr(10)
    text = joiner.join(lines)
    await edit_or_answer(callback, text, back_keyboard("revenue:back"))
    await callback.answer()


@revenue_router.message(Command("runway"))
@require_admin
async def cmd_runway(message: Message, db, admin_ids: list[int]):
    """–†–∞—Å—Å—á–µ—Ç runway –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    args = (message.text or "").split()[1:]

    if len(args) < 2:
        error_text = """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/runway [cash] [monthly_burn]</code>
–ü—Ä–∏–º–µ—Ä: <code>/runway 500000 -50000</code>"""
        await message.answer(error_text, parse_mode="HTML")
        return

    try:
        current_cash = int(args[0])
        monthly_burn = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞")
        return

    analytics = RevenueAnalytics(db)
    runway = await analytics.calculate_runway(current_cash, monthly_burn)

    lines = [
        "üõ§Ô∏è <b>–ê–Ω–∞–ª–∏–∑ runway</b>",
        "",
        f"<b>üí∞ –¢–µ–∫—É—â–∏–π –∫–µ—à:</b> {current_cash:,}‚ÇΩ",
        f"<b>üî• –ú–µ—Å—è—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥:</b> {monthly_burn:,}‚ÇΩ",
        "",
        f"<b>‚è± Runway:</b> {runway['runway_months']} –º–µ—Å.",
        f"<b>üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:</b> {runway['runway_end_date']}",
        "",
        f"<b>üíé –¢–µ–∫—É—â–∏–π MRR:</b> {runway['current_mrr']:,}‚ÇΩ",
        f"<b>üéØ MRR —Ç–æ—á–∫–∏ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏:</b> {runway['breakeven_mrr']:,}‚ÇΩ",
        f"<b>üìà –†–æ—Å—Ç MRR:</b> {runway['mrr_growth_rate']:+.1f}%/–º–µ—Å",
        "",
    ]

    if runway.get('months_to_breakeven'):
        lines.append(f"<b>‚è≥ –ú–µ—Å—è—Ü–µ–≤ –¥–æ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏:</b> {runway['months_to_breakeven']}")
        lines.append("")
        if runway['months_to_breakeven'] < runway['runway_months']:
            lines.append("‚úÖ <b>–î–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞–Ω—å—à–µ, —á–µ–º –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –∫–µ—à!</b>")
        else:
            lines.append("üî¥ <b>–í–Ω–∏–º–∞–Ω–∏–µ: —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –¥–æ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏</b>")
            deficit = runway['months_to_breakeven'] - runway['runway_months']
            lines.append(f"–ù—É–∂–Ω–æ –µ—â—ë {deficit} –º–µ—Å. runway")
    else:
        lines.append("‚ö†Ô∏è –ü—Ä–∏ —Ç–µ–∫—É—â–µ–º —Ç–µ–º–ø–µ —Ä–æ—Å—Ç–∞ –¥–æ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–µ –¥–æ–π–¥—ë–º")

    joiner = chr(10)
    await message.answer(joiner.join(lines), parse_mode="HTML")


@revenue_router.callback_query(F.data == "revenue:unit_econ")
@require_admin
async def handle_unit_economics(callback: CallbackQuery, db, admin_ids: list[int]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π Unit Economics"""
    analytics = RevenueAnalytics(db)
    unit_econ = await analytics.get_unit_economics()

    lines = [
        "üíé <b>–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏</b>",
        "",
        "<b>üí∞ –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (LTV):</b>",
        f"  {unit_econ.ltv:,.0f}‚ÇΩ",
        "",
        "<b>üìä –†–∞—Å—á—ë—Ç:</b>",
        f"  –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫: {unit_econ.monthly_churn*100:.2f}%",
        f"  –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏: {unit_econ.avg_customer_lifetime_months:.1f} –º–µ—Å.",
        f"  ARPU: {unit_econ.ltv / unit_econ.avg_customer_lifetime_months:,.0f}‚ÇΩ/–º–µ—Å",
        "  LTV = ARPU √ó –°—Ä–æ–∫ –∂–∏–∑–Ω–∏",
        "",
        "<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (CAC):</b>",
        f"  {unit_econ.cac:,.0f}‚ÇΩ",
        "  <i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ—Ü–µ–Ω–∫–∞ –ø–æ LTV (–¥–æ–ª—è 30%)</i>",
        "",
        "<b>üéØ –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>",
        f"  –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ LTV/CAC: {unit_econ.ltv_cac_ratio:.2f}x {ltv_cac_status(unit_econ.ltv_cac_ratio)}",
        f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {unit_econ.payback_period:.1f} –º–µ—Å.",
        f"  –í–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞: {unit_econ.gross_margin*100:.0f}%",
        "",
        "<b>üí° –ë–µ–Ω—á–º–∞—Ä–∫–∏:</b>",
        "  LTV/CAC > 3 = ‚úÖ –û—Ç–ª–∏—á–Ω–æ",
        "  –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å < 12 –º–µ—Å. = ‚úÖ –•–æ—Ä–æ—à–æ",
        "  –í–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞ > 70% = ‚úÖ –•–æ—Ä–æ—à–æ",
        "",
    ]

    if unit_econ.ltv_cac_ratio < 3:
        lines.append("‚ö†Ô∏è <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> —É–ª—É—á—à–∏—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–ª–∏ —Å–Ω–∏–∑–∏—Ç—å CAC")
    elif unit_econ.payback_period > 12:
        lines.append("‚ö†Ô∏è <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> —É–≤–µ–ª–∏—á–∏—Ç—å ARPU –∏–ª–∏ —Å–Ω–∏–∑–∏—Ç—å CAC")
    else:
        lines.append("‚úÖ <b>–Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ!</b>")

    joiner = chr(10)
    text = joiner.join(lines)
    await edit_or_answer(callback, text, back_keyboard("revenue:back"))
    await callback.answer()


@revenue_router.callback_query(F.data == "revenue:back")
@require_admin
async def handle_back_to_main(callback: CallbackQuery, db, admin_ids: list[int]):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é revenue"""

    async def build_dashboard():
        return await _build_revenue_dashboard(db)

    await render_dashboard(build_dashboard, callback)
    await callback.answer()
