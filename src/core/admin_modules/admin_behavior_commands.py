"""
Admin –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —á—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –≥–¥–µ –æ—Ç–≤–∞–ª–∏–≤–∞—é—Ç—Å—è
"""

from __future__ import annotations

import logging
from html import escape as html_escape

from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from src.bot.ui_components import Emoji
from src.core.admin_modules.admin_utils import back_keyboard, render_dashboard, require_admin
from src.core.user_behavior_tracker import UserBehaviorTracker

logger = logging.getLogger(__name__)

behavior_router = Router()


def create_behavior_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏—á–∏", callback_data="behavior:popular"),
                InlineKeyboardButton(text="üíî –ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–µ —Ñ–∏—á–∏", callback_data="behavior:abandoned"),
            ],
            [
                InlineKeyboardButton(text="üî• –¢–æ—á–∫–∏ —Ç—Ä–µ–Ω–∏—è", callback_data="behavior:friction"),
                InlineKeyboardButton(text="üòä Feedback –ø–æ —Ñ–∏—á–∞–º", callback_data="behavior:feedback"),
            ],
            [
                InlineKeyboardButton(text="üõ£Ô∏è User Journey", callback_data="behavior:journey"),
                InlineKeyboardButton(text="‚è∞ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="behavior:peak_hours"),
            ],
            [
                InlineKeyboardButton(text="üéØ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å", callback_data="behavior:engagement"),
                InlineKeyboardButton(text="üìâ Underutilized", callback_data="behavior:underutilized"),
            ],
            [
                InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="admin_refresh"),
            ],
        ]
    )


@behavior_router.message(Command("behavior"))
@require_admin
async def cmd_behavior(message: Message, db, admin_ids: set[int]):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    tracker = UserBehaviorTracker(db)

    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
    top_features = await tracker.get_top_features(days=7, limit=5)
    frictions = await tracker.identify_friction_points(days=7)

    summary = "<b>üéØ –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê</b>\n\n"

    summary += "<b>üìä –¢–æ–ø-5 —Ñ–∏—á–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
    for i, feat in enumerate(top_features, 1):
        emoji = 'üî•' if i == 1 else '‚≠ê' if i <= 3 else '‚úÖ'
        summary += f"{emoji} {feat['feature']}: {feat['uses']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π ({feat['unique_users']} –ø–æ–ª—å–∑.)\n"

    summary += f"\n<b>üî• –¢–æ—á–µ–∫ —Ç—Ä–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ:</b> {len(frictions)}\n"

    if frictions:
        top_friction = frictions[0]
        summary += f"–°–∞–º–∞—è –∫—Ä–∏—Ç–∏—á–Ω–∞—è: <b>{top_friction.location}</b> (impact: {top_friction.impact_score:.0f}/100)\n"

    summary += "\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:</i>"

    async def build_dashboard():
        return summary, create_behavior_menu()

    await render_dashboard(build_dashboard, message)


@behavior_router.callback_query(F.data == "behavior:popular")
@require_admin
async def handle_popular_features(callback: CallbackQuery, db, admin_ids: set[int]):
    """–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏—á–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    tracker = UserBehaviorTracker(db)
    top_features = await tracker.get_top_features(days=30, limit=10)

    output = "<b>üìä –ü–û–ü–£–õ–Ø–†–ù–´–ï –§–ò–ß–ò (30 –¥–Ω–µ–π)</b>\n\n"

    for i, feat in enumerate(top_features, 1):
        medal = 'ü•á' if i == 1 else 'ü•à' if i == 2 else 'ü•â' if i == 3 else f"{i}."

        output += f"{medal} <b>{feat['feature']}</b>\n"
        output += f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {feat['uses']}\n"
        output += f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {feat['unique_users']}\n"
        output += f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {feat['success_rate']:.1f}%\n"

        if feat['avg_duration_ms'] > 0:
            output += f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {feat['avg_duration_ms'] / 1000:.1f}—Å\n"

        output += "\n"

    # Insights
    if top_features:
        total_uses = sum(f['uses'] for f in top_features)
        top_3_uses = sum(f['uses'] for f in top_features[:3])
        concentration = (top_3_uses / total_uses) * 100

        output += "<b>üí° –ò–Ω—Å–∞–π—Ç—ã:</b>\n"
        output += f"‚Ä¢ –¢–æ–ø-3 —Ñ–∏—á–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç {concentration:.0f}% –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"

        if concentration > 80:
            output += "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –¥—Ä—É–≥–∏–µ —Ñ–∏—á–∏\n"

    async def build_dashboard():
        return output, back_keyboard("behavior:menu")

    await render_dashboard(build_dashboard, callback)
    await callback.answer()


@behavior_router.callback_query(F.data == "behavior:friction")
@require_admin
async def handle_friction_points(callback: CallbackQuery, db, admin_ids: set[int]):
    """–¢–æ—á–∫–∏ —Ç—Ä–µ–Ω–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞—Å—Ç—Ä–µ–≤–∞—é—Ç"""
    tracker = UserBehaviorTracker(db)
    frictions = await tracker.identify_friction_points(days=14)

    output = tracker.format_friction_report(frictions)

    if frictions:
        output += "\n<b>üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"

        for friction in frictions[:3]:
            if friction.friction_type == 'error':
                output += f"‚Ä¢ {friction.location}: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥–∏, —É–ª—É—á—à–∏—Ç—å error handling\n"
            elif friction.friction_type == 'abandon':
                output += f"‚Ä¢ {friction.location}: —É–ø—Ä–æ—Å—Ç–∏—Ç—å UX, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
            elif friction.friction_type == 'timeout':
                output += f"‚Ä¢ {friction.location}: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            elif friction.friction_type == 'confusion':
                output += f"‚Ä¢ {friction.location}: —É–ª—É—á—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, –¥–æ–±–∞–≤–∏—Ç—å —Ç—É—Ç–æ—Ä–∏–∞–ª\n"

    async def build_dashboard():
        return output, back_keyboard("behavior:menu")

    await render_dashboard(build_dashboard, callback)
    await callback.answer()


@behavior_router.callback_query(F.data == "behavior:engagement")
@require_admin
async def handle_engagement(callback: CallbackQuery, db, admin_ids: set[int]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
    tracker = UserBehaviorTracker(db)
    engagements = await tracker.get_feature_engagement(days=30)

    output = tracker.format_engagement_report(engagements)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if engagements:
        avg_repeat = sum(e.repeat_usage_rate for e in engagements) / len(engagements)
        avg_satisfaction = sum(e.satisfaction_score for e in engagements) / len(engagements)

        output += "<b>üìà –û–±—â–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        output += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π repeat usage: {avg_repeat:.1f}%\n"
        output += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_satisfaction:.0f}/100\n\n"

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∏—á
        rising = [e for e in engagements if e.trend == 'rising']
        declining = [e for e in engagements if e.trend == 'declining']

        if rising:
            output += f"üìà –†–∞—Å—Ç—É—â–∏–µ —Ñ–∏—á–∏: {', '.join(e.feature_name for e in rising)}\n"
        if declining:
            output += f"üìâ –ü–∞–¥–∞—é—â–∏–µ —Ñ–∏—á–∏: {', '.join(e.feature_name for e in declining)}\n"

    async def build_dashboard():
        return output, back_keyboard("behavior:menu")

    await render_dashboard(build_dashboard, callback)
    await callback.answer()


@behavior_router.callback_query(F.data == "behavior:underutilized")
@require_admin
async def handle_underutilized(callback: CallbackQuery, db, admin_ids: set[int]):
    """–§–∏—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è"""
    tracker = UserBehaviorTracker(db)
    underutilized = await tracker.get_underutilized_features(days=30)

    output = "<b>üíî –ù–ï–î–û–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –§–ò–ß–ò</b>\n\n"

    if not underutilized:
        output += "‚úÖ –í—Å–µ —Ñ–∏—á–∏ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!\n"
    else:
        unused = [f for f in underutilized if f['status'] == 'unused']
        low_use = [f for f in underutilized if f['status'] == 'underutilized']

        if unused:
            output += "<b>üö´ –°–æ–≤—Å–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è (0 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π):</b>\n"
            for feat in unused:
                output += f"‚Ä¢ {feat['feature']}\n"
            output += "\n"

        if low_use:
            output += "<b>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–¥–∫–æ (<10 —Ä–∞–∑ –∑–∞ –º–µ—Å—è—Ü):</b>\n"
            for feat in low_use:
                output += f"‚Ä¢ {feat['feature']}: {feat['uses']} —Ä–∞–∑\n"
            output += "\n"

        output += "<b>üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
        output += "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∑–Ω–∞—é—Ç –æ —Ñ–∏—á–µ (–ø–ª–æ—Ö–∞—è discovery)\n"
        output += "‚Ä¢ –§–∏—á–∞ –Ω–µ –Ω—É–∂–Ω–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
        output += "‚Ä¢ –°–ª–æ–∂–Ω—ã–π UX –∏–ª–∏ –±–∞—Ä—å–µ—Ä –≤—Ö–æ–¥–∞\n"
        output += "‚Ä¢ –§–∏—á–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º\n\n"

        output += "<b>üîß –ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
        output += "1. –£–ª—É—á—à–∏—Ç—å onboarding –∏ tutorials\n"
        output += "2. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ —Ñ–∏—á–∏ –≤ bot flow\n"
        output += "3. –ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø—Ä–æ—Å - –Ω—É–∂–Ω–∞ –ª–∏ —Ñ–∏—á–∞?\n"
        output += "4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–∞\n"

    async def build_dashboard():
        return output, back_keyboard("behavior:menu")

    await render_dashboard(build_dashboard, callback)
    await callback.answer()


@behavior_router.callback_query(F.data == "behavior:peak_hours")
@require_admin
async def handle_peak_hours(callback: CallbackQuery, db, admin_ids: set[int]):
    """–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    tracker = UserBehaviorTracker(db)
    hourly_stats = await tracker.get_usage_by_hour(days=7)

    output = "<b>‚è∞ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú (7 –¥–Ω–µ–π)</b>\n\n"

    # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
    if hourly_stats:
        sorted_hours = sorted(hourly_stats.items(), key=lambda x: x[1]['total_events'], reverse=True)

        output += "<b>üî• –¢–æ–ø-5 –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤:</b>\n"
        for hour, stats in sorted_hours[:5]:
            output += f"{hour:02d}:00 - {stats['total_events']} —Å–æ–±—ã—Ç–∏–π ({stats['unique_users']} –ø–æ–ª—å–∑.)\n"

        output += "\n<b>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:</b>\n"

        morning = sum(stats['total_events'] for h, stats in hourly_stats.items() if 6 <= h < 12)
        day = sum(stats['total_events'] for h, stats in hourly_stats.items() if 12 <= h < 18)
        evening = sum(stats['total_events'] for h, stats in hourly_stats.items() if 18 <= h < 24)
        night = sum(stats['total_events'] for h, stats in hourly_stats.items() if h < 6)

        total = morning + day + evening + night

        if total > 0:
            output += f"üåÖ –£—Ç—Ä–æ (6-12): {morning} ({morning/total*100:.1f}%)\n"
            output += f"‚òÄÔ∏è –î–µ–Ω—å (12-18): {day} ({day/total*100:.1f}%)\n"
            output += f"üåÜ –í–µ—á–µ—Ä (18-24): {evening} ({evening/total*100:.1f}%)\n"
            output += f"üåô –ù–æ—á—å (0-6): {night} ({night/total*100:.1f}%)\n\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        peak_hour = sorted_hours[0][0]
        output += "<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        output += f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ –ø–∏–∫–∞ ({peak_hour:02d}:00)\n"
        output += f"‚Ä¢ –î–µ–ª–∞–π—Ç–µ –∞–Ω–æ–Ω—Å—ã –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã\n"
        output += f"‚Ä¢ –£—Å–∏–ª–∏–≤–∞–π—Ç–µ support –≤ –ø–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è\n"

    async def build_dashboard():
        return output, back_keyboard("behavior:menu")

    await render_dashboard(build_dashboard, callback)
    await callback.answer()


@behavior_router.callback_query(F.data == "behavior:feedback")
@require_admin
async def handle_feature_feedback(callback: CallbackQuery, db, admin_ids: set[int]):
    """Feedback –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ–∏—á–∞–º"""
    tracker = UserBehaviorTracker(db)

    # –ü–æ–ª—É—á–∞–µ–º feedback –ø–æ —Ç–æ–ø —Ñ–∏—á–∞–º
    top_features = await tracker.get_top_features(days=30, limit=5)

    output = "<b>üòä FEEDBACK –ü–û –§–ò–ß–ê–ú</b>\n\n"

    for feat in top_features:
        feature_name = feat['feature']
        feedback = await tracker.get_feature_feedback(feature_name, days=30)

        sentiment_emoji = 'üòç' if feedback.net_sentiment > 50 else 'üòä' if feedback.net_sentiment > 0 else 'üòê' if feedback.net_sentiment > -50 else 'üòû'

        output += f"<b>{feature_name}</b> {sentiment_emoji}\n"
        output += f"  üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {feedback.positive_signals}\n"
        output += f"  üëé –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {feedback.negative_signals}\n"
        output += f"  üìä Net sentiment: {feedback.net_sentiment:+.0f}\n"

        if feedback.explicit_feedback:
            output += f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(feedback.explicit_feedback)}\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 1-2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            for comment in feedback.explicit_feedback[:2]:
                truncated = comment[:80] + "..." if len(comment) > 80 else comment
                output += f"     ‚Ä¢ <i>{html_escape(truncated)}</i>\n"

        output += "\n"

    async def build_dashboard():
        return output, back_keyboard("behavior:menu")

    await render_dashboard(build_dashboard, callback)
    await callback.answer()


@behavior_router.callback_query(F.data == "behavior:journey")
@require_admin
async def handle_user_journey(callback: CallbackQuery, db, admin_ids: set[int]):
    """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∏—á–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º user_id –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    output = "<b>üõ£Ô∏è –ê–ù–ê–õ–ò–ó USER JOURNEY</b>\n\n"
    output += "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
    output += "<code>/journey &lt;user_id&gt;</code>\n\n"

    output += "<b>üìä –¢–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:</b>\n"
    output += "‚Ä¢ –£—Å–ø–µ—à–Ω—ã–π –ø—É—Ç—å: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí trial ‚Üí –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Üí voice ‚Üí payment\n"
    output += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ø—É—Ç—å: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí trial ‚Üí –æ—à–∏–±–∫–∞ ‚Üí abandonment\n\n"

    output += "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /journey —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º user_id –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</i>"

    async def build_dashboard():
        return output, back_keyboard("behavior:menu")

    await render_dashboard(build_dashboard, callback)
    await callback.answer()


@behavior_router.message(Command("journey"))
@require_admin
async def cmd_user_journey(message: Message, db, admin_ids: set[int]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    args = (message.text or "").split()
    if len(args) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /journey <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /journey 123456789"
        )
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer(f"{Emoji.ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        return

    tracker = UserBehaviorTracker(db)
    journey = await tracker.get_user_journey(user_id)

    output = f"<b>üõ£Ô∏è USER JOURNEY #{user_id}</b>\n\n"

    if not journey.journey_steps:
        output += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    else:
        output += f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω' if journey.completed else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}\n"
        output += f"<b>–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:</b> {journey.total_time_seconds // 60} –º–∏–Ω—É—Ç\n"

        if journey.drop_off_point:
            output += f"<b>Drop-off point:</b> ‚ö†Ô∏è {journey.drop_off_point}\n"

        if journey.friction_points:
            output += f"<b>Friction points:</b> {', '.join(journey.friction_points)}\n"

        output += f"\n<b>üìç –ü—É—Ç—å ({len(journey.journey_steps)} —à–∞–≥–æ–≤):</b>\n"

        for step in journey.journey_steps[:15]:  # –ø–µ—Ä–≤—ã–µ 15 —à–∞–≥–æ–≤
            emoji = '‚úÖ' if step['success'] else '‚ùå'
            output += f"{step['step_number']}. {emoji} {step['feature']}\n"

        if len(journey.journey_steps) > 15:
            output += f"... –∏ –µ—â–µ {len(journey.journey_steps) - 15} —à–∞–≥–æ–≤\n"

    await message.answer(output, parse_mode=ParseMode.HTML)


@behavior_router.callback_query(F.data == "behavior:menu")
@require_admin
async def back_to_behavior_menu(callback: CallbackQuery, db, admin_ids: set[int]):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    tracker = UserBehaviorTracker(db)
    top_features = await tracker.get_top_features(days=7, limit=5)
    frictions = await tracker.identify_friction_points(days=7)

    summary = "<b>üéØ –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê</b>\n\n"

    summary += "<b>üìä –¢–æ–ø-5 —Ñ–∏—á–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
    for i, feat in enumerate(top_features, 1):
        emoji = 'üî•' if i == 1 else '‚≠ê' if i <= 3 else '‚úÖ'
        summary += f"{emoji} {feat['feature']}: {feat['uses']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"

    summary += f"\n<b>üî• –¢–æ—á–µ–∫ —Ç—Ä–µ–Ω–∏—è:</b> {len(frictions)}\n"

    summary += "\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:</i>"

    async def build_dashboard():
        return summary, create_behavior_menu()

    await render_dashboard(build_dashboard, callback)
    await callback.answer()
