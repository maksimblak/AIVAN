"""
Admin commands –¥–ª—è Cohort Analysis
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from src.core.admin_modules.admin_utils import FEATURE_KEYS, edit_or_answer, require_admin
from src.core.admin_modules.cohort_analytics import CohortAnalytics
from src.core.admin_modules.admin_formatters import format_trend


cohort_router = Router(name="cohort_admin")


@cohort_router.message(Command("cohort"))
@require_admin
async def cmd_cohort(message: Message, db, admin_ids: list[int]):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é cohort analysis"""
    analytics = CohortAnalytics(db)

    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç
    comparison = await analytics.compare_cohorts(months_back=6)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üìä <b>Cohort Analysis - Retention Dynamics</b>\n\n"

    text += f"üèÜ <b>–õ—É—á—à–∞—è –∫–æ–≥–æ—Ä—Ç–∞:</b> {comparison.best_cohort}\n"
    text += f"üìâ <b>–•—É–¥—à–∞—è –∫–æ–≥–æ—Ä—Ç–∞:</b> {comparison.worst_cohort}\n\n"

    text += f"üìà <b>–¢—Ä–µ–Ω–¥ retention:</b> {format_trend(comparison.retention_trend)}\n"
    text += f"üí∞ <b>–¢—Ä–µ–Ω–¥ conversion:</b> {format_trend(comparison.conversion_trend)}\n\n"

    text += "<b>üîç –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:</b>\n"
    for insight in comparison.key_insights[:5]:
        text += f"‚Ä¢ {insight}\n"

    text += "\n<b>üìÖ –ö–æ–≥–æ—Ä—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤):</b>\n\n"

    for cohort in comparison.cohorts_data[:6]:
        text += f"<b>{cohort.cohort_month}</b> ({cohort.cohort_size} users)\n"
        text += f"  Day 1: {cohort.day_1_retention:.1f}% | Day 7: {cohort.day_7_retention:.1f}%\n"
        text += f"  Day 30: {cohort.day_30_retention:.1f}% | Day 90: {cohort.day_90_retention:.1f}%\n"
        text += f"  Conversion: {cohort.conversion_rate:.1f}% | ARPU: {cohort.arpu:.0f}‚ÇΩ\n\n"

    # –ö–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏ –∫–æ–≥–æ—Ä—Ç—ã", callback_data="cohort:select_month")],
        [InlineKeyboardButton(text="üéØ Feature Adoption", callback_data="cohort:feature_adoption")],
        [InlineKeyboardButton(text="üìà Retention Curves", callback_data="cohort:retention_curves")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cohort:refresh")]
    ])

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)



@cohort_router.callback_query(F.data == "cohort:refresh")
@require_admin
async def handle_cohort_refresh(callback: CallbackQuery, db, admin_ids: list[int]):
    """–û–±–Ω–æ–≤–∏—Ç—å cohort analysis"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    analytics = CohortAnalytics(db)
    comparison = await analytics.compare_cohorts(months_back=6)

    text = "üìä <b>Cohort Analysis - Retention Dynamics</b>\n\n"
    text += f"üèÜ <b>–õ—É—á—à–∞—è –∫–æ–≥–æ—Ä—Ç–∞:</b> {comparison.best_cohort}\n"
    text += f"üìâ <b>–•—É–¥—à–∞—è –∫–æ–≥–æ—Ä—Ç–∞:</b> {comparison.worst_cohort}\n\n"
    text += f"üìà <b>–¢—Ä–µ–Ω–¥ retention:</b> {format_trend(comparison.retention_trend)}\n"
    text += f"üí∞ <b>–¢—Ä–µ–Ω–¥ conversion:</b> {format_trend(comparison.conversion_trend)}\n\n"

    text += "<b>üîç –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:</b>\n"
    for insight in comparison.key_insights[:5]:
        text += f"‚Ä¢ {insight}\n"

    text += "\n<b>üìÖ –ö–æ–≥–æ—Ä—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤):</b>\n\n"
    for cohort in comparison.cohorts_data[:6]:
        text += f"<b>{cohort.cohort_month}</b> ({cohort.cohort_size} users)\n"
        text += f"  Day 1: {cohort.day_1_retention:.1f}% | Day 7: {cohort.day_7_retention:.1f}%\n"
        text += f"  Day 30: {cohort.day_30_retention:.1f}% | Day 90: {cohort.day_90_retention:.1f}%\n"
        text += f"  Conversion: {cohort.conversion_rate:.1f}% | ARPU: {cohort.arpu:.0f}‚ÇΩ\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏ –∫–æ–≥–æ—Ä—Ç—ã", callback_data="cohort:select_month")],
        [InlineKeyboardButton(text="üéØ Feature Adoption", callback_data="cohort:feature_adoption")],
        [InlineKeyboardButton(text="üìà Retention Curves", callback_data="cohort:retention_curves")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cohort:refresh")]
    ])

    await edit_or_answer(callback, text, keyboard)


@cohort_router.callback_query(F.data == "cohort:select_month")
@require_admin
async def handle_select_month(callback: CallbackQuery, db, admin_ids: list[int]):
    """–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    analytics = CohortAnalytics(db)
    comparison = await analytics.compare_cohorts(months_back=6)

    # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–≥–æ—Ä—Ç—ã
    buttons = []
    for cohort in comparison.cohorts_data[:6]:
        buttons.append([
            InlineKeyboardButton(
                text=f"{cohort.cohort_month} ({cohort.cohort_size} users)",
                callback_data=f"cohort:details:{cohort.cohort_month}"
            )
        ])

    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cohort:back")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await edit_or_answer(callback, "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ—Ä—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:</b>", keyboard)
    await callback.answer()


@cohort_router.callback_query(F.data.startswith("cohort:details:"))
@require_admin
async def handle_cohort_details(callback: CallbackQuery, db, admin_ids: list[int]):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–≥–æ—Ä—Ç—ã"""
    cohort_month = callback.data.split(":")[-1]

    analytics = CohortAnalytics(db)
    cohort = await analytics.get_cohort_metrics(cohort_month)

    text = f"üìä <b>–î–µ—Ç–∞–ª–∏ –∫–æ–≥–æ—Ä—Ç—ã {cohort.cohort_month}</b>\n\n"

    text += f"üë• <b>–†–∞–∑–º–µ—Ä –∫–æ–≥–æ—Ä—Ç—ã:</b> {cohort.cohort_size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"

    text += "<b>üìà Retention Rates:</b>\n"
    text += f"  Day 1:  {cohort.day_1_retention:.1f}%\n"
    text += f"  Day 7:  {cohort.day_7_retention:.1f}%\n"
    text += f"  Day 30: {cohort.day_30_retention:.1f}%\n"
    text += f"  Day 90: {cohort.day_90_retention:.1f}%\n\n"

    text += "<b>üí∞ Revenue Metrics:</b>\n"
    text += f"  Paid users: {cohort.paid_users}\n"
    text += f"  Conversion rate: {cohort.conversion_rate:.1f}%\n"
    text += f"  Total revenue: {cohort.total_revenue:,}‚ÇΩ\n"
    text += f"  ARPU: {cohort.arpu:.0f}‚ÇΩ\n\n"

    text += "<b>üéØ Engagement:</b>\n"
    text += f"  Avg requests/user: {cohort.avg_requests_per_user:.1f}\n"
    text += f"  Avg lifetime: {cohort.avg_lifetime_days:.1f} –¥–Ω–µ–π\n"
    text += f"  Power users: {cohort.power_users_count}\n"
    text += f"  Avg features used: {cohort.avg_features_used:.1f}\n\n"

    text += "<b>üî• Top Features:</b>\n"
    for feature, adoption in cohort.top_features[:5]:
        text += f"  ‚Ä¢ {feature}: {adoption:.1f}% adoption\n"

    text += f"\n<b>üìâ Churn:</b>\n"
    text += f"  Churned users: {cohort.churned_count}\n"
    text += f"  Churn rate: {cohort.churn_rate:.1f}%\n"
    if cohort.avg_days_to_churn:
        text += f"  Avg days to churn: {cohort.avg_days_to_churn:.1f}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="cohort:select_month")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cohort:back")]
    ])

    await edit_or_answer(callback, text, keyboard)
    await callback.answer()


@cohort_router.callback_query(F.data == "cohort:feature_adoption")
@require_admin
async def handle_feature_adoption(callback: CallbackQuery, db, admin_ids: list[int]):
    """Feature adoption –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º"""
    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    features = FEATURE_KEYS

    buttons = []
    for feature in features:
        buttons.append([
            InlineKeyboardButton(
                text=feature.replace("_", " ").title(),
                callback_data=f"cohort:feature:{feature}"
            )
        ])

    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cohort:back")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await edit_or_answer(callback, "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—á—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ adoption –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º:</b>", keyboard)
    await callback.answer()


@cohort_router.callback_query(F.data.startswith("cohort:feature:"))
@require_admin
async def handle_feature_details(callback: CallbackQuery, db, admin_ids: list[int]):
    """–î–µ—Ç–∞–ª–∏ adoption —Ñ–∏—á–∏"""
    feature_name = callback.data.split(":")[-1]

    analytics = CohortAnalytics(db)
    adoption = await analytics.get_feature_adoption_by_cohort(feature_name, months_back=6)

    text = f"üéØ <b>Feature Adoption: {feature_name.replace('_', ' ').title()}</b>\n\n"

    text += "<b>üìä Adoption Rate –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º:</b>\n"
    for cohort_month, rate in sorted(adoption.cohort_adoption.items(), reverse=True):
        text += f"  {cohort_month}: {rate:.1f}%\n"

    text += "\n<b>‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
    for cohort_month, days in sorted(adoption.avg_days_to_first_use.items(), reverse=True):
        text += f"  {cohort_month}: {days:.1f} –¥–Ω–µ–π\n"

    text += f"\n<b>üîó –í–ª–∏—è–Ω–∏–µ –Ω–∞ Retention:</b>\n"
    text += f"  –° —Ñ–∏—á–µ–π: {adoption.users_with_feature_retention:.1f}%\n"
    text += f"  –ë–µ–∑ —Ñ–∏—á–∏: {adoption.users_without_feature_retention:.1f}%\n"
    text += f"  Retention Lift: <b>{adoption.retention_lift:+.1f}%</b>\n\n"

    if adoption.retention_lift > 10:
        text += "‚úÖ <b>–≠—Ç–∞ —Ñ–∏—á–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç retention!</b>\n"
    elif adoption.retention_lift > 0:
        text += "‚ÑπÔ∏è –§–∏—á–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ retention\n"
    else:
        text += "‚ö†Ô∏è –§–∏—á–∞ –Ω–µ —É–ª—É—á—à–∞–µ—Ç retention - –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏—á–∞–º", callback_data="cohort:feature_adoption")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cohort:back")]
    ])

    await edit_or_answer(callback, text, keyboard)
    await callback.answer()


@cohort_router.callback_query(F.data == "cohort:retention_curves")
@require_admin
async def handle_retention_curves(callback: CallbackQuery, db, admin_ids: list[int]):
    """Retention curves –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"""
    analytics = CohortAnalytics(db)
    comparison = await analytics.compare_cohorts(months_back=6)

    text = "üìà <b>Retention Curves</b>\n\n"
    text += "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ retention –ø–æ –¥–Ω—è–º –¥–ª—è –≤—Å–µ—Ö –∫–æ–≥–æ—Ä—Ç:\n\n"

    for cohort in comparison.cohorts_data[:6]:
        text += f"<b>{cohort.cohort_month}</b>\n"

        # ASCII visualization
        day_1_bar = "‚ñà" * int(cohort.day_1_retention / 10) + "‚ñë" * (10 - int(cohort.day_1_retention / 10))
        day_7_bar = "‚ñà" * int(cohort.day_7_retention / 10) + "‚ñë" * (10 - int(cohort.day_7_retention / 10))
        day_30_bar = "‚ñà" * int(cohort.day_30_retention / 10) + "‚ñë" * (10 - int(cohort.day_30_retention / 10))
        day_90_bar = "‚ñà" * int(cohort.day_90_retention / 10) + "‚ñë" * (10 - int(cohort.day_90_retention / 10))

        text += f"  D1:  {day_1_bar} {cohort.day_1_retention:.0f}%\n"
        text += f"  D7:  {day_7_bar} {cohort.day_7_retention:.0f}%\n"
        text += f"  D30: {day_30_bar} {cohort.day_30_retention:.0f}%\n"
        text += f"  D90: {day_90_bar} {cohort.day_90_retention:.0f}%\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cohort:back")]
    ])

    await edit_or_answer(callback, text, keyboard)
    await callback.answer()


@cohort_router.callback_query(F.data == "cohort:back")
@require_admin
async def handle_back_to_main(callback: CallbackQuery, db, admin_ids: list[int]):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é cohort"""
    analytics = CohortAnalytics(db)
    comparison = await analytics.compare_cohorts(months_back=6)

    text = "üìä <b>Cohort Analysis - Retention Dynamics</b>\n\n"
    text += f"üèÜ <b>–õ—É—á—à–∞—è –∫–æ–≥–æ—Ä—Ç–∞:</b> {comparison.best_cohort}\n"
    text += f"üìâ <b>–•—É–¥—à–∞—è –∫–æ–≥–æ—Ä—Ç–∞:</b> {comparison.worst_cohort}\n\n"
    text += f"üìà <b>–¢—Ä–µ–Ω–¥ retention:</b> {format_trend(comparison.retention_trend)}\n"
    text += f"üí∞ <b>–¢—Ä–µ–Ω–¥ conversion:</b> {format_trend(comparison.conversion_trend)}\n\n"

    text += "<b>üîç –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:</b>\n"
    for insight in comparison.key_insights[:5]:
        text += f"‚Ä¢ {insight}\n"

    text += "\n<b>üìÖ –ö–æ–≥–æ—Ä—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤):</b>\n\n"
    for cohort in comparison.cohorts_data[:6]:
        text += f"<b>{cohort.cohort_month}</b> ({cohort.cohort_size} users)\n"
        text += f"  Day 1: {cohort.day_1_retention:.1f}% | Day 7: {cohort.day_7_retention:.1f}%\n"
        text += f"  Day 30: {cohort.day_30_retention:.1f}% | Day 90: {cohort.day_90_retention:.1f}%\n"
        text += f"  Conversion: {cohort.conversion_rate:.1f}% | ARPU: {cohort.arpu:.0f}‚ÇΩ\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏ –∫–æ–≥–æ—Ä—Ç—ã", callback_data="cohort:select_month")],
        [InlineKeyboardButton(text="üéØ Feature Adoption", callback_data="cohort:feature_adoption")],
        [InlineKeyboardButton(text="üìà Retention Curves", callback_data="cohort:retention_curves")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cohort:refresh")]
    ])

    await edit_or_answer(callback, text, keyboard)
    await callback.answer()
