from __future__ import annotations

import math
import time
from datetime import datetime
from typing import Any, Callable, Mapping, Sequence

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from src.bot.ui_components import Emoji
from src.core.simple_bot import context as ctx
from src.core.simple_bot.formatting import (
    _format_number,
    _format_response_time,
    _format_stat_row,
    _format_trend_value,
)
from src.core.simple_bot.formatting import _format_currency, _format_datetime
from src.core.simple_bot.payments import get_plan_pricing, plan_stars_amount
from src.core.subscription_payments import (
    SubscriptionPayloadError,
    parse_subscription_payload,
)

PERIOD_OPTIONS: Sequence[int] = (7, 30, 90)
PROGRESS_BAR_LENGTH = 10
FEATURE_LABELS: Mapping[str, str] = {
    "legal_question": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
    "document_processing": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "judicial_practice": "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
    "document_draft": "–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "voice_message": "–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã",
    "ocr_processing": "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
    "document_chat": "–ß–∞—Ç—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
}
DAY_NAMES: Mapping[str, str] = {
    "0": "–ü–Ω",
    "1": "–í—Ç",
    "2": "–°—Ä",
    "3": "–ß—Ç",
    "4": "–ü—Ç",
    "5": "–°–±",
    "6": "–í—Å",
}


def normalize_stats_period(days: int) -> int:
    if days <= 0:
        return PERIOD_OPTIONS[0]
    for option in PERIOD_OPTIONS:
        if days <= option:
            return option
    return PERIOD_OPTIONS[-1]


def build_progress_bar(used: int, total: int) -> str:
    if total is None or total <= 0:
        return "<code>[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà]</code> ‚àû / <b>–ë–µ–∑–ª–∏–º–∏—Ç</b>"

    total = max(total, 0)
    used = max(0, min(used, total))

    ratio = used / total if total else 0.0
    filled = min(PROGRESS_BAR_LENGTH, max(0, int(round(ratio * PROGRESS_BAR_LENGTH))))
    bar = f"[{'‚ñà' * filled}{'‚ñë' * (PROGRESS_BAR_LENGTH - filled)}]"
    bar_markup = f"<code>{bar}</code>"

    remaining = max(0, total - used)
    remaining_pct = max(0, min(100, int(round((remaining / total) * 100)))) if total else 0

    return f"{bar_markup} {used}/{total} ¬∑ –æ—Å—Ç–∞–ª–æ—Å—å <b>{remaining}</b> ({remaining_pct}%)"


def progress_line(label: str, used: int, total: int) -> str:
    return f"<b>{label}</b> {build_progress_bar(used, total)}"


def translate_payment_status(status: str) -> str:
    status_map = {
        "pending": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ",
        "processing": "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞",
        "succeeded": "‚úÖ –£—Å–ø–µ—à–Ω–æ",
        "success": "‚úÖ –£—Å–ø–µ—à–Ω–æ",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
        "failed": "‚ùå –û—à–∏–±–∫–∞",
        "cancelled": "üö´ –û—Ç–º–µ–Ω—ë–Ω",
        "canceled": "üö´ –û—Ç–º–µ–Ω—ë–Ω",
        "refunded": "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç",
        "unknown": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    }
    return status_map.get(status.lower(), status)


def translate_plan_name(plan_id: str) -> str:
    plan_map = {
        "basic": "–ë–∞–∑–æ–≤—ã–π",
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        "premium": "–ü—Ä–µ–º–∏—É–º",
        "pro": "–ü—Ä–æ",
        "trial": "–¢—Ä–∏–∞–ª",
    }
    period_map = {
        "1m": "1 –º–µ—Å—è—Ü",
        "3m": "3 –º–µ—Å—è—Ü–∞",
        "6m": "6 –º–µ—Å—è—Ü–µ–≤",
        "12m": "1 –≥–æ–¥",
        "1y": "1 –≥–æ–¥",
    }

    parts = plan_id.split("_")
    if len(parts) >= 2:
        plan_name = plan_map.get(parts[0].lower(), parts[0].capitalize())
        period = period_map.get(parts[1].lower(), parts[1])
        return f"{plan_name} ‚Ä¢ {period}"

    return plan_map.get(plan_id.lower(), plan_id)


def describe_primary_summary(summary: str, unit: str) -> str:
    if not summary or summary == "‚Äî":
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if "(" in summary and summary.endswith(")"):
        label, count = summary.rsplit("(", 1)
        label = label.strip()
        count = count[:-1].strip()
        if count.isdigit():
            return f"{label} ‚Äî {count} {unit}"
        return f"{label} ‚Äî {count}"
    return summary


def describe_secondary_summary(summary: str, unit: str) -> str:
    if not summary:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    parts: list[str] = []
    for raw in summary.split(","):
        item = raw.strip()
        if not item:
            continue
        tokens = item.split()
        if len(tokens) >= 2 and tokens[-1].isdigit():
            count = tokens[-1]
            label = " ".join(tokens[:-1])
            parts.append(f"{label} ‚Äî {count}")
        else:
            parts.append(item)
    if not parts:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    return "; ".join(parts)


def peak_summary(
    counts: Mapping[str, int],
    *,
    mapping: Mapping[str, str] | None = None,
    limit: int = 3,
) -> tuple[str, str]:
    if not counts:
        return "‚Äî", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    best_keys = sorted(counts.items(), key=lambda item: item[1], reverse=True)[:limit]
    primary_parts: list[str] = []
    secondary_parts: list[str] = []
    for idx, (raw_key, value) in enumerate(best_keys, start=1):
        label = mapping.get(raw_key, raw_key) if mapping else raw_key
        entry = f"{label} ({value})"
        if idx == 1:
            primary_parts.append(entry)
        secondary_parts.append(entry)

    primary = ", ".join(primary_parts) if primary_parts else "‚Äî"
    secondary = ", ".join(secondary_parts)
    return primary, secondary


def top_labels(
    counts: Mapping[str, int],
    *,
    mapping: Mapping[str, str] | None = None,
    limit: int = 3,
    formatter: Callable[[str], str] | None = None,
) -> str:
    if not counts:
        return "‚Äî"
    top_items = sorted(counts.items(), key=lambda item: item[1], reverse=True)[:limit]
    labels: list[str] = []
    for key, value in top_items:
        label = mapping.get(key, key) if mapping else key
        if formatter:
            label = formatter(label)
        labels.append(f"{label}√ó{value}")
    return ", ".join(labels)


def build_recommendations(
    *,
    trial_remaining: int,
    has_subscription: bool,
    subscription_days_left: int,
    period_requests: int,
    previous_requests: int,
) -> list[str]:
    tips: list[str] = []
    if not has_subscription:
        if trial_remaining > 0:
            tips.append(
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è {trial_remaining} –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–∏–∞–ª–∞ –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /buy."
            )
        else:
            tips.append("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî /buy.")
    else:
        if subscription_days_left <= 5:
            tips.append("–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ.")

    if period_requests == 0:
        tips.append("–ó–∞–¥–∞–π—Ç–µ –±–æ—Ç—É –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞—á–Ω–∏—Ç–µ —Å /start –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
    elif period_requests < previous_requests:
        tips.append("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∑–∏–ª–∞—Å—å ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.")

    if not tips:
        tips.append("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å ‚Äî –±–æ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã.")
    return tips[:3]


__all__ = [
    "PERIOD_OPTIONS",
    "PROGRESS_BAR_LENGTH",
    "FEATURE_LABELS",
    "DAY_NAMES",
    "normalize_stats_period",
    "build_progress_bar",
    "progress_line",
    "translate_payment_status",
    "translate_plan_name",
    "describe_primary_summary",
    "describe_secondary_summary",
    "peak_summary",
    "top_labels",
    "build_recommendations",
    "build_stats_keyboard",
    "generate_user_stats_response",
]


def build_stats_keyboard(has_subscription: bool) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []
    if not has_subscription:
        buttons.append([InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="get_subscription")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="my_profile")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def generate_user_stats_response(
    user_id: int,
    days: int,
    *,
    stats: dict[str, Any] | None = None,
    user: Any | None = None,
    divider: str = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
) -> tuple[str, InlineKeyboardMarkup]:
    db = ctx.db
    if db is None:
        raise RuntimeError("Database is not available")

    normalized_days = normalize_stats_period(days)
    if user is None:
        user = await db.ensure_user(
            user_id,
            default_trial=ctx.TRIAL_REQUESTS,
            is_admin=user_id in ctx.ADMIN_IDS,
        )

    if stats is None:
        stats = await db.get_user_statistics(user_id, days=normalized_days)
    if stats.get("error"):
        raise RuntimeError(stats.get("error"))

    plan_id = stats.get("subscription_plan") or getattr(user, "subscription_plan", None)
    plan_info = get_plan_pricing(plan_id) if plan_id else None

    subscription_until_ts = int(stats.get("subscription_until", 0) or 0)
    now_ts = int(time.time())
    has_subscription = subscription_until_ts > now_ts
    subscription_days_left = (
        max(0, math.ceil((subscription_until_ts - now_ts) / 86400)) if has_subscription else 0
    )

    subscription_status_text = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    if has_subscription:
        until_text = _format_datetime(subscription_until_ts, default="‚Äî")
        subscription_status_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {until_text} (‚âà{subscription_days_left} –¥–Ω.)"
    elif subscription_until_ts:
        until_text = _format_datetime(subscription_until_ts, default="‚Äî")
        subscription_status_text = f"‚è∞ –ò—Å—Ç–µ–∫–ª–∞ {until_text}"

    trial_remaining = int(stats.get("trial_remaining", getattr(user, "trial_remaining", 0)) or 0)

    if plan_info:
        plan_label = plan_info.plan.name
    elif plan_id:
        plan_label = plan_id
    elif trial_remaining > 0:
        plan_label = "–¢—Ä–∏–∞–ª"
    else:
        plan_label = "‚Äî"

    period_requests = int(stats.get("period_requests", 0) or 0)
    previous_requests = int(stats.get("previous_period_requests", 0) or 0)
    period_successful = int(stats.get("period_successful", 0) or 0)
    previous_successful = int(stats.get("previous_period_successful", 0) or 0)
    period_tokens = int(stats.get("period_tokens", 0) or 0)
    avg_response_time_ms = int(stats.get("avg_response_time_ms", 0) or 0)

    success_rate = (period_successful / period_requests * 100) if period_requests else 0.0

    day_counts = stats.get("day_of_week_counts") or {}
    hour_counts = stats.get("hour_of_day_counts") or {}
    type_stats = stats.get("request_types") or {}

    day_primary, day_secondary = peak_summary(day_counts, mapping=DAY_NAMES)
    hour_primary, hour_secondary = peak_summary(
        hour_counts, formatter=lambda raw: f"{int(raw):02d}:00" if raw.isdigit() else raw
    )

    last_transaction = stats.get("last_transaction")

    created_at_ts = stats.get("created_at") or getattr(user, "created_at", 0)
    updated_at_ts = stats.get("updated_at") or getattr(user, "updated_at", 0)
    last_request_ts = stats.get("last_request_at", 0)

    subscription_balance_raw = stats.get("subscription_requests_balance")
    if subscription_balance_raw is None:
        subscription_balance_raw = getattr(user, "subscription_requests_balance", None)
    subscription_balance = int(subscription_balance_raw or 0)

    lines = [
        f"{Emoji.STATS} <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        "",
        f"üìÖ <i>–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {normalized_days} –¥–Ω–µ–π</i>",
        "",
        divider,
        "",
        "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>",
        "",
        _format_stat_row("  üìÜ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", _format_datetime(created_at_ts)),
        _format_stat_row("  üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å", _format_datetime(last_request_ts)),
        _format_stat_row("  üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", subscription_status_text),
        _format_stat_row("  üè∑Ô∏è –ü–ª–∞–Ω", plan_label),
    ]

    lines.extend(["", divider, "", "üîã <b>–õ–∏–º–∏—Ç—ã</b>", ""])
    trial_requests = ctx.TRIAL_REQUESTS
    if trial_requests > 0:
        trial_used = max(0, trial_requests - trial_remaining)
        lines.append(progress_line("–¢—Ä–∏–∞–ª", trial_used, trial_requests))
    else:
        lines.append(_format_stat_row("–¢—Ä–∏–∞–ª", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))

    if plan_info and plan_info.plan.request_quota > 0:
        used = max(0, plan_info.plan.request_quota - subscription_balance)
        lines.append(progress_line("  üìä –ü–æ–¥–ø–∏—Å–∫–∞", used, plan_info.plan.request_quota))
    elif has_subscription:
        lines.append(_format_stat_row("  üìä –ü–æ–¥–ø–∏—Å–∫–∞", "–±–µ–∑–ª–∏–º–∏—Ç ‚ôæÔ∏è"))

    lines.extend(
        [
            "",
            divider,
            "",
            "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
            "",
            _format_stat_row("  üìù –ó–∞–ø—Ä–æ—Å–æ–≤", _format_trend_value(period_requests, previous_requests)),
            _format_stat_row("  ‚úÖ –£—Å–ø–µ—Ö", f"{success_rate:.1f}% ({period_successful}/{period_requests or 1})"),
            _format_stat_row(
                "  ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è",
                _format_response_time(avg_response_time_ms),
            ),
            _format_stat_row("  üî¢ –¢–æ–∫–µ–Ω–æ–≤", _format_number(period_tokens)),
            "",
        ]
    )

    if day_primary != "‚Äî":
        lines.append(_format_stat_row("  üìÖ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å", describe_primary_summary(day_primary, "–æ–±—Ä–∞—â–µ–Ω–∏–π")))
        if day_secondary.strip():
            lines.append(_format_stat_row("  üìÜ –î—Ä—É–≥–∏–µ –¥–Ω–∏", describe_secondary_summary(day_secondary, "–æ–±—Ä–∞—â–µ–Ω–∏–π")))
    else:
        lines.append(_format_stat_row("  üìÖ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))

    if hour_primary != "‚Äî":
        lines.append(_format_stat_row("  üïê –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å", describe_primary_summary(hour_primary, "–æ–±—Ä–∞—â–µ–Ω–∏–π")))
        if hour_secondary.strip():
            lines.append(_format_stat_row("  üïë –î—Ä—É–≥–∏–µ —á–∞—Å—ã", describe_secondary_summary(hour_secondary, "–æ–±—Ä–∞—â–µ–Ω–∏–π")))
    else:
        lines.append(_format_stat_row("  üïê –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))

    lines.extend(["", divider, "", "üìã <b>–¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤</b>", ""])
    if type_stats:
        top_types = sorted(type_stats.items(), key=lambda item: item[1], reverse=True)[:5]
        for req_type, count in top_types:
            share_pct = (count / period_requests * 100) if period_requests else 0.0
            label = FEATURE_LABELS.get(req_type, req_type)
            lines.append(_format_stat_row(f"  ‚Ä¢ {label}", f"{count} ({share_pct:.0f}%)"))
    else:
        lines.append(_format_stat_row("  ‚Ä¢ –¢–∏–ø—ã", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))

    if last_transaction:
        lines.extend(["", divider, "", "üí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂</b>", ""])
        currency = last_transaction.get("currency", "RUB") or "RUB"
        amount_minor = last_transaction.get("amount_minor_units") or last_transaction.get("amount")
        lines.append(_format_stat_row("  üí∞ –°—É–º–º–∞", _format_currency(amount_minor, currency)))
        translated_status = translate_payment_status(last_transaction.get("status", "unknown"))
        lines.append(_format_stat_row("  üìä –°—Ç–∞—Ç—É—Å", translated_status))
        lines.append(_format_stat_row("  üìÖ –î–∞—Ç–∞", _format_datetime(last_transaction.get("created_at"))))
        payload_raw = last_transaction.get("payload")
        if payload_raw:
            try:
                payload = parse_subscription_payload(payload_raw)
                if payload.plan_id:
                    translated_plan = translate_plan_name(payload.plan_id)
                    lines.append(_format_stat_row("  üè∑Ô∏è –¢–∞—Ä–∏—Ñ", translated_plan))
            except SubscriptionPayloadError:
                pass

    keyboard = build_stats_keyboard(has_subscription)
    return "\n".join(lines), keyboard
