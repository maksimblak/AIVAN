from __future__ import annotations

import logging
from typing import Optional

from aiogram import Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    User,
)

from src.bot.ui_components import Emoji
from src.core.exceptions import ValidationException
from src.core.bot_app import context as simple_context
from src.core.bot_app.common import ensure_valid_user_id, get_user_session, get_safe_db_method

__all__ = [
    "format_user_display",
    "ensure_rating_snapshot",
    "send_rating_request",
    "handle_pending_feedback",
    "cmd_ratings_stats",
    "register_feedback_handlers",
]

logger = logging.getLogger("ai-ivan.simple.feedback")


def format_user_display(user: User | None) -> str:
    if user is None:
        return ""
    parts: list[str] = []
    if user.username:
        parts.append(f"@{user.username}")
    name = " ".join(filter(None, [user.first_name, user.last_name])).strip()
    if name and name not in parts:
        parts.append(name)
    if not parts and user.first_name:
        parts.append(user.first_name)
    if not parts:
        parts.append(str(user.id))
    return " ".join(parts)


async def ensure_rating_snapshot(request_id: int, telegram_user: User | None, answer_text: str) -> None:
    if not answer_text.strip() or telegram_user is None:
        return

    db = simple_context.db
    if db is None:
        return

    add_rating_fn = get_safe_db_method("add_rating", default_return=False)
    if not add_rating_fn:
        return

    username = format_user_display(telegram_user)
    await add_rating_fn(
        request_id,
        telegram_user.id,
        0,
        None,
        username=username,
        answer_text=answer_text,
    )


def _create_rating_keyboard(request_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data=f"rate_like_{request_id}"),
                InlineKeyboardButton(text="üëé –£–ª—É—á—à–∏—Ç—å", callback_data=f"rate_dislike_{request_id}"),
            ]
        ]
    )


async def send_rating_request(
    message: Message,
    request_id: int,
    *,
    answer_snapshot: Optional[str] = None,
) -> None:
    if not message.from_user:
        return

    user_session = get_user_session(message.from_user.id)
    if answer_snapshot:
        user_session.last_answer_snapshot = answer_snapshot.strip()
    else:
        user_session.last_answer_snapshot = None

    keyboard = _create_rating_keyboard(request_id)
    await message.answer(
        f"{Emoji.STAR} <b>–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç</b>\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ.",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard,
    )


async def handle_pending_feedback(message: Message, user_session, text_override: str | None = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏."""
    if not message.from_user:
        return

    feedback_source = text_override if text_override is not None else (message.text or "")
    if not feedback_source or not user_session.pending_feedback_request_id:
        return

    try:
        user_id = ensure_valid_user_id(message.from_user.id, context="handle_pending_feedback")
    except ValidationException as exc:
        logger.warning("Ignore feedback: invalid user id (%s)", exc)
        user_session.pending_feedback_request_id = None
        return

    request_id = user_session.pending_feedback_request_id
    feedback_text = feedback_source.strip()

    user_session.pending_feedback_request_id = None

    add_rating_fn = get_safe_db_method("add_rating", default_return=False)
    if not add_rating_fn:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –æ—Ç–∑—ã–≤–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    get_rating_fn = get_safe_db_method("get_rating", default_return=None)
    existing_rating = await get_rating_fn(request_id, user_id) if get_rating_fn else None

    rating_value = -1
    answer_snapshot = ""
    if existing_rating:
        if existing_rating.rating not in (None, 0):
            rating_value = existing_rating.rating
        if getattr(existing_rating, "answer_text", None):
            answer_snapshot = existing_rating.answer_text or ""

    if not answer_snapshot:
        session_snapshot = getattr(user_session, "last_answer_snapshot", None)
        if session_snapshot:
            answer_snapshot = session_snapshot

    username_display = format_user_display(message.from_user)

    success = await add_rating_fn(
        request_id,
        user_id,
        rating_value,
        feedback_text,
        username=username_display,
        answer_text=answer_snapshot,
    )
    if success:
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤!\n\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ª—É—á—à–µ.",
            parse_mode=ParseMode.HTML,
        )
        logger.info(
            "Received feedback for request %s from user %s: %s",
            request_id,
            user_id,
            feedback_text,
        )
        user_session.last_answer_snapshot = None
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤")


async def handle_rating_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    if not callback.data or not callback.from_user:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    try:
        user_id = ensure_valid_user_id(callback.from_user.id, context="handle_rating_callback")
    except ValidationException as exc:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id in rating callback: %s", exc)
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
        return

    user_session = get_user_session(user_id)

    try:
        parts = callback.data.split("_")
        if len(parts) != 3:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        action = parts[1]
        if action not in {"like", "dislike"}:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        request_id = int(parts[2])
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    get_rating_fn = get_safe_db_method("get_rating", default_return=None)
    existing_rating = await get_rating_fn(request_id, user_id) if get_rating_fn else None

    if existing_rating and existing_rating.rating not in (None, 0):
        await callback.answer("–ü–æ —ç—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        return

    add_rating_fn = get_safe_db_method("add_rating", default_return=False)
    if not add_rating_fn:
        await callback.answer("–°–µ—Ä–≤–∏—Å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    rating_value = 1 if action == "like" else -1
    answer_snapshot = ""
    if existing_rating and getattr(existing_rating, "answer_text", None):
        answer_snapshot = existing_rating.answer_text or ""
    if not answer_snapshot:
        session_snapshot = getattr(user_session, "last_answer_snapshot", None)
        if session_snapshot:
            answer_snapshot = session_snapshot
    username_display = format_user_display(callback.from_user)

    success = await add_rating_fn(
        request_id,
        user_id,
        rating_value,
        None,
        username=username_display,
        answer_text=answer_snapshot,
    )
    if not success:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
        return

    if action == "like":
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –†–∞–¥—ã, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–µ–∑–Ω—ã–º.")
        await callback.message.edit_text(
            "üí¨ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b> ‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ–ª–µ–∑–Ω–æ–µ",
            parse_mode=ParseMode.HTML,
        )
        return

    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    feedback_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    callback_data=f"feedback_{request_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data=f"skip_feedback_{request_id}",
                )
            ],
        ]
    )
    await callback.message.edit_text(
        "üí¨ <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?</b>\n\n–í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ:",
        reply_markup=feedback_keyboard,
        parse_mode=ParseMode.HTML,
    )


async def handle_feedback_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    if not callback.data or not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        user_id = ensure_valid_user_id(callback.from_user.id, context="handle_feedback_callback")
    except ValidationException as exc:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id in feedback callback: %s", exc)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    try:
        data = callback.data

        if data.startswith("feedback_"):
            action = "feedback"
            request_id = int(data.removeprefix("feedback_"))
        elif data.startswith("skip_feedback_"):
            action = "skip"
            request_id = int(data.removeprefix("skip_feedback_"))
        else:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        if action == "skip":
            await callback.message.edit_text(
                "üí¨ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b> üëé –û—Ç–º–µ—á–µ–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è", parse_mode=ParseMode.HTML
            )
            await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
            return

        user_session = get_user_session(user_id)
        if not hasattr(user_session, "pending_feedback_request_id"):
            user_session.pending_feedback_request_id = None
        user_session.pending_feedback_request_id = request_id

        await callback.message.edit_text(
            "üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n\n"
            "<i>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>",
            parse_mode=ParseMode.HTML,
        )
        await callback.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

    except Exception as exc:
        logger.error("Error in handle_feedback_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def register_feedback_handlers(dp: Dispatcher) -> None:
    dp.callback_query.register(handle_rating_callback, F.data.startswith("rate_"))
    dp.callback_query.register(
        handle_feedback_callback, F.data.startswith(("feedback_", "skip_feedback_"))
    )
    dp.message.register(cmd_ratings_stats, Command("ratings"))


async def cmd_ratings_stats(message: Message) -> None:
    """Show aggregate rating stats (admin only)."""
    if not message.from_user:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –±–æ—Ç–æ–º")
        return

    try:
        user_id = ensure_valid_user_id(message.from_user.id, context="cmd_ratings_stats")
    except ValidationException as exc:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id in cmd_ratings_stats: %s", exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    if user_id not in simple_context.ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    stats_fn = get_safe_db_method("get_ratings_statistics", default_return={})
    low_rated_fn = get_safe_db_method("get_low_rated_requests", default_return=[])
    if not stats_fn or not low_rated_fn:
        await message.answer("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    try:
        stats_7d = await stats_fn(7)
        stats_30d = await stats_fn(30)
        low_rated = await low_rated_fn(5)

        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤</b>

üìÖ <b>–ó–∞ 7 –¥–Ω–µ–π:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {stats_7d.get('total_ratings', 0)}
‚Ä¢ üëç –õ–∞–π–∫–æ–≤: {stats_7d.get('total_likes', 0)}
‚Ä¢ üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {stats_7d.get('total_dislikes', 0)}
‚Ä¢ üìà –†–µ–π—Ç–∏–Ω–≥ –ª–∞–π–∫–æ–≤: {stats_7d.get('like_rate', 0):.1f}%
‚Ä¢ üí¨ –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {stats_7d.get('feedback_count', 0)}

üìÖ <b>–ó–∞ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {stats_30d.get('total_ratings', 0)}
‚Ä¢ üëç –õ–∞–π–∫–æ–≤: {stats_30d.get('total_likes', 0)}
‚Ä¢ üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {stats_30d.get('total_dislikes', 0)}
‚Ä¢ üìà –†–µ–π—Ç–∏–Ω–≥ –ª–∞–π–∫–æ–≤: {stats_30d.get('like_rate', 0):.1f}%
‚Ä¢ üí¨ –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {stats_30d.get('feedback_count', 0)}"""

        if low_rated:
            stats_text += "\n\n‚ö†Ô∏è <b>–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</b>\n"
            for req in low_rated[:3]:
                stats_text += (
                    f"‚Ä¢ ID {req['request_id']}: "
                    f"—Ä–µ–π—Ç–∏–Ω–≥ {req['avg_rating']:.1f} ({req['rating_count']} –æ—Ü–µ–Ω–æ–∫)\n"
                )

        await message.answer(stats_text, parse_mode=ParseMode.HTML)
    except Exception as exc:  # noqa: BLE001
        logger.error("Error in cmd_ratings_stats: %s", exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")

