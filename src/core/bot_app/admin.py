from __future__ import annotations

import logging

from aiogram import Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

from src.core.bot_app import context as simple_context
from src.core.bot_app.common import ensure_valid_user_id
from src.core.exceptions import ValidationException

__all__ = ["register_admin_handlers"]

logger = logging.getLogger("ai-ivan.simple.admin")


async def cmd_error_stats(message: Message) -> None:
    """Provide aggregated error statistics to administrators."""
    if not message.from_user:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –±–æ—Ç–æ–º")
        return

    try:
        user_id = ensure_valid_user_id(message.from_user.id, context="cmd_error_stats")
    except ValidationException as exc:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id in cmd_error_stats: %s", exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    if user_id not in simple_context.ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    error_handler = simple_context.error_handler
    if not error_handler:
        await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    stats = error_handler.get_error_stats()
    if not stats:
        await message.answer("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
        return

    lines = ["üö® <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫</b>"]
    for error_type, count in sorted(stats.items(), key=lambda item: item[0]):
        lines.append(f"‚Ä¢ {error_type}: {count}")

    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML)


def register_admin_handlers(dp: Dispatcher) -> None:
    """Register administrative commands."""
    dp.message.register(cmd_error_stats, Command("errors"))
