from __future__ import annotations

import logging

from aiogram import Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery

from core.bot_app.ui_components import Emoji

__all__ = [
    "register_retention_handlers",
]

logger = logging.getLogger("ai-ivan.simple.retention")


async def handle_retention_quick_question(callback: CallbackQuery) -> None:
    """Handle 'quick_question' retention button."""
    try:
        await callback.answer()
        await callback.message.answer(
            f"{Emoji.ROBOT} <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–µ–≥–æ.\n\n"
            f"{Emoji.INFO} <i>–ü—Ä–∏–º–µ—Ä:</i> –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞—Ä—É—à–∏–ª–∏ –ø—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è?",
            parse_mode=ParseMode.HTML,
        )
    except Exception as exc:  # noqa: BLE001
        logger.error("Error in handle_retention_quick_question: %s", exc, exc_info=True)


async def handle_retention_show_features(callback: CallbackQuery) -> None:
    """Handle 'show_features' retention button."""
    try:
        await callback.answer()

        features_text = (
            f"{Emoji.ROBOT} <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n\n"
            f"{Emoji.QUESTION} <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n"
            "–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º —Ç–µ–º–∞–º\n\n"
            "üìÑ <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</b>\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º\n"
            "‚Ä¢ –†–µ–∂–∏–º ¬´—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞¬ª ‚Äî –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"
            "üìö <b>–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n"
            "–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n\n"
            f"{Emoji.MICROPHONE} <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n"
            "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî –ø–æ–ª—É—á–∏—à—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç\n\n"
            f"{Emoji.INFO} –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!"
        )

        await callback.message.answer(features_text, parse_mode=ParseMode.HTML)
    except Exception as exc:  # noqa: BLE001
        logger.error("Error in handle_retention_show_features: %s", exc, exc_info=True)


def register_retention_handlers(dp: Dispatcher) -> None:
    """Register retention-related handlers."""
    dp.callback_query.register(handle_retention_quick_question, F.data == "quick_question")
    dp.callback_query.register(handle_retention_show_features, F.data == "show_features")
