from __future__ import annotations

import logging
from datetime import datetime
from html import escape as html_escape
from pathlib import Path
from typing import Any, Optional

from aiogram import Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, Message

from core.bot_app.ui_components import Emoji, sanitize_telegram_html
from src.core.bot_app import context as ctx
from src.core.bot_app.common import ensure_valid_user_id, get_user_session
from src.core.bot_app.payments import get_plan_pricing
from src.core.bot_app.stats import generate_user_stats_response, normalize_stats_period
from src.core.exceptions import DatabaseException, ErrorContext, ValidationException

logger = logging.getLogger("ai-ivan.simple.menus")

_PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent.parent
_PROFILE_HEADER_IMAGE_PATH = _PROJECT_ROOT / "images" / "my_profile.png"
_LEGAL_QUESTION_IMAGE_PATH = _PROJECT_ROOT / "images" / "lawsuit_question.png"
_SEARCH_PRACTICE_IMAGE_PATH = _PROJECT_ROOT / "images" / "search_analize_lawsuit.png"

__all__ = [
    "register_menu_handlers",
    "cmd_start",
    "cmd_status",
    "cmd_mystats",
]

SECTION_DIVIDER = "<code>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</code>"
HEAVY_DIVIDER = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
_USER_NAME_PLACEHOLDER = "__USER_NAME__"


def _load_header_media(image_path: Path, log_hint: str) -> FSInputFile | None:
    try:
        if image_path.is_file():
            return FSInputFile(image_path)
    except OSError as exc:
        logger.debug("%s header image is unavailable: %s", log_hint, exc)
    return None


def _profile_header_media() -> FSInputFile | None:
    return _load_header_media(_PROFILE_HEADER_IMAGE_PATH, "Profile")


def _legal_question_header_media() -> FSInputFile | None:
    return _load_header_media(_LEGAL_QUESTION_IMAGE_PATH, "Legal question")


def _search_practice_header_media() -> FSInputFile | None:
    return _load_header_media(_SEARCH_PRACTICE_IMAGE_PATH, "Search practice")


def _extract_start_payload(message: Message) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç payload –∫–æ–º–∞–Ω–¥—ã /start (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    text = (message.text or "").strip()
    if not text:
        return ""

    lower_text = text.lower()
    if not lower_text.startswith("/start"):
        return ""

    command, separator, remainder = text.partition(" ")
    if separator:
        return remainder.strip()

    lines = text.splitlines()[1:]
    for line in lines:
        stripped = line.strip()
        if stripped:
            return stripped
    return ""


def _main_menu_text() -> str:
    return (
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
        f"{HEAVY_DIVIDER}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )


def _main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="legal_question")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data="search_practice")],
            [InlineKeyboardButton(text="üóÇÔ∏è –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data="document_processing")],
            [
                InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile"),
                InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_info"),
            ],
        ]
    )


async def _callback_rate_limit_guard(callback: CallbackQuery) -> bool:
    if not callback.from_user:
        return True

    limiter = ctx.rate_limiter
    if limiter is None:
        return True

    allowed = await limiter.allow(callback.from_user.id)
    if allowed:
        return True

    try:
        await callback.answer(
            f"{Emoji.WARNING} –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ.",
            show_alert=True,
        )
    except TelegramBadRequest:
        pass
    return False


async def _try_send_welcome_media(
    message: Message,
    caption_html: str,
    keyboard: Optional[InlineKeyboardMarkup],
) -> bool:
    welcome_media = ctx.WELCOME_MEDIA
    if not welcome_media:
        return False

    media_type = (welcome_media.media_type or "video").lower()
    media_source = None
    supports_streaming = False

    if welcome_media.file_id:
        media_source = welcome_media.file_id
        supports_streaming = media_type == "video"
    elif welcome_media.path and welcome_media.path.exists():
        media_source = FSInputFile(welcome_media.path)
        supports_streaming = media_type == "video"
    else:
        return False

    try:
        if media_type == "animation":
            await message.answer_animation(
                animation=media_source,
                caption=caption_html,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
            )
        elif media_type == "photo":
            await message.answer_photo(
                photo=media_source,
                caption=caption_html,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
            )
        else:
            await message.answer_video(
                video=media_source,
                caption=caption_html,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
                supports_streaming=supports_streaming,
            )
        return True
    except Exception as exc:  # noqa: BLE001
        logger.warning("Failed to send welcome media: %s", exc)
        return False


async def cmd_start(message: Message) -> None:
    if not message.from_user:
        return

    error_handler = ctx.error_handler
    try:
        user_id = ensure_valid_user_id(message.from_user.id, context="cmd_start")
    except ValidationException as exc:
        context = ErrorContext(function_name="cmd_start", chat_id=message.chat.id if message.chat else None)
        if error_handler:
            await error_handler.handle_exception(exc, context)
        else:
            logger.warning("Validation error in cmd_start: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    db = ctx.db
    user_record: Any | None = None
    if db is not None and hasattr(db, "ensure_user"):
        user_record = await db.ensure_user(
            user_id,
            default_trial=ctx.TRIAL_REQUESTS,
            is_admin=user_id in ctx.ADMIN_IDS,
        )

    show_welcome = True
    if user_record is not None and getattr(user_record, "welcome_shown", 0):
        show_welcome = False

    referral_feedback: str | None = None
    referral_payload = _extract_start_payload(message)
    referral_candidate = referral_payload.split()[0] if referral_payload else ""
    if referral_candidate.lower().startswith("ref_") and len(referral_candidate) > 4:
        referral_code = referral_candidate[4:].strip()
        if referral_code and db is not None and hasattr(db, "apply_referral_code"):
            try:
                applied, reason = await db.apply_referral_code(user_id, referral_code)
            except DatabaseException as exc:
                logger.error("Failed to apply referral code for user %s: %s", user_id, exc)
            except Exception as exc:  # noqa: BLE001
                logger.error("Unexpected error applying referral code for user %s: %s", user_id, exc)
            else:
                if applied:
                    referral_feedback = (
                        f"{Emoji.SUCCESS} <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!</b>\n"
                        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ –¥—Ä—É–∑–µ–π."
                    )
                elif reason == "invalid_code":
                    referral_feedback = (
                        f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é."
                    )
                elif reason == "self_referral":
                    referral_feedback = (
                        f"{Emoji.WARNING} –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥."
                    )
                elif reason in {"already_linked", "already_has_referrer"}:
                    referral_feedback = (
                        f"{Emoji.IDEA} –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ."
                    )

    get_user_session(user_id)

    if referral_feedback:
        await message.answer(referral_feedback, parse_mode=ParseMode.HTML)

    main_menu_keyboard = _main_menu_keyboard()

    if show_welcome:
        raw_user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        safe_user_name = html_escape(raw_user_name)
        welcome_template = f"""<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {_USER_NAME_PLACEHOLDER}!</b>
    
    –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ò–ò-–ò–í–ê–ù</b>, —è –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
    
    <b>–ß–¢–û –Ø –£–ú–ï–Æ:</b>
    
    <b>–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã</b>
    ‚Äî —Å–æ—Å—Ç–∞–≤–ª—è—é –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –¥–∞—é –±—ã—Å—Ç—Ä—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è—é –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏
    –∏ ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä¬ª.
    
    <b>–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏</b>
    ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∏–ª–ª–∏–æ–Ω—ã –¥–µ–ª –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è: –∫–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –∏ –∫–∞–∫ —Å—É–¥
    —Ç—Ä–∞–∫—Ç—É–µ—Ç –Ω–æ—Ä–º—É.
    
    <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</b>
    ‚Äî –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é (–≤ —Ç–æ–º —á–∏—Å–ª–µ –≥–æ–ª–æ—Å–æ–º) –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è—é –¥–æ–≥–æ–≤–æ—Ä—ã –Ω–∞ —Ä–∏—Å–∫–∏,
    –¥–µ–ª–∞—é —Å–∞–º–º–∞—Ä–∏.
    
    <b>–ü–†–ò–ú–ï–†–´ –û–ë–†–ê–©–ï–ù–ò–ô:</b>
    
    üí¨ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞–∑–∞–ª–∞ –≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ ‚Äî –ø–æ–¥–±–µ—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞
    —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É".
    üí¨ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏ 228 –∏ 228.1 –£–ö –†–§".
    üí¨ "–ù–∞–π–¥–∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ –≤–∑—ã—Å–∫–∞–Ω–∏—é –Ω–µ—É—Å—Ç–æ–π–∫–∏ —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞".
    üí¨ "–ú–æ–≥—É—Ç –ª–∏ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –æ—Å–ø–æ—Ä–∏—Ç—å –∑–∞–≤–µ—â–∞–Ω–∏–µ –ø–æ—Å–ª–µ 6 –º–µ—Å—è—Ü–µ–≤?".
    
    <b> –ü–û–ü–†–û–ë–£–ô–¢–ï –ü–†–Ø–ú–û –°–ï–ô–ß–ê–° </b>üëáüëáüëá"""
        welcome_html = sanitize_telegram_html(welcome_template).replace(
            _USER_NAME_PLACEHOLDER,
            safe_user_name,
        )
    
        media_sent = await _try_send_welcome_media(
            message=message,
            caption_html=welcome_html,
            keyboard=None,
        )
    
        if not media_sent:
            await message.answer(welcome_html, parse_mode=ParseMode.HTML)

        if db is not None and hasattr(db, "mark_welcome_shown"):
            try:
                await db.mark_welcome_shown(user_id)
            except DatabaseException as exc:
                logger.warning("Failed to mark welcome as shown for user %s: %s", user_id, exc)
            except Exception as exc:  # noqa: BLE001
                logger.warning("Unexpected error marking welcome as shown for user %s: %s", user_id, exc)

    await message.answer(
        _main_menu_text(),
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu_keyboard,
    )
    logger.info("User %s started bot", message.from_user.id)


def _profile_menu_text(
    user: Any | None,
    *,
    status_text: str | None = None,
    tariff_text: str | None = None,
    hint_text: str | None = None,
) -> str:
    username = sanitize_telegram_html(
        getattr(user, "full_name", None) or getattr(user, "first_name", "") or ""
    )
    status_text = status_text or "‚≠ï <i>–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</i>"
    tariff_text = tariff_text or "<b>–¢—Ä–∏–∞–ª</b>"
    hint_text = hint_text or ""

    return (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"{HEAVY_DIVIDER}\n\n"
        f"üôÇ {username}\n"
        f"üîî –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üè∑Ô∏è –¢–∞—Ä–∏—Ñ: {tariff_text}\n"
        f"{hint_text}"
    )


def _profile_menu_keyboard(
    subscribe_label: str | None = None,
    *,
    has_subscription: bool = False,
) -> InlineKeyboardMarkup:
    if has_subscription:
        change_button = InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="buy_catalog")
        cancel_label = subscribe_label or "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        cancel_button = InlineKeyboardButton(text=cancel_label, callback_data="cancel_subscription")
        back_button = InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")
        return InlineKeyboardMarkup(inline_keyboard=[[change_button], [cancel_button], [back_button]])

    first_label = subscribe_label or "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=first_label, callback_data="get_subscription")],
            [
                InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"),
                InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral_program"),
            ],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
        ]
    )


async def handle_my_profile_callback(callback: CallbackQuery) -> None:
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not await _callback_rate_limit_guard(callback):
        return

    db = ctx.db
    try:
        await callback.answer()

        status_text = None
        tariff_text = None
        hint_text = None
        subscribe_label = "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        has_subscription = False

        if db is not None:
            try:
                user_id = callback.from_user.id
                user_record = await db.ensure_user(
                    user_id,
                    default_trial=ctx.TRIAL_REQUESTS,
                    is_admin=user_id in ctx.ADMIN_IDS,
                )
                has_subscription = await db.has_active_subscription(user_id)
                cancel_flag = bool(getattr(user_record, "subscription_cancelled", 0))

                plan_id = getattr(user_record, "subscription_plan", None)
                plan_info = get_plan_pricing(plan_id) if plan_id else None
                if plan_info:
                    tariff_text = plan_info.plan.name
                elif plan_id and plan_id not in (None, "‚Äî"):
                    tariff_text = str(plan_id)
                else:
                    tariff_text = "—Ç—Ä–∏–∞–ª"

                if has_subscription and getattr(user_record, "subscription_until", 0):
                    until_dt = datetime.fromtimestamp(int(user_record.subscription_until))
                    purchase_ts = int(getattr(user_record, "subscription_last_purchase_at", 0) or 0)
                    if purchase_ts:
                        purchase_dt = datetime.fromtimestamp(purchase_ts)
                        status_text = (
                            f"–ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ {purchase_dt:%d.%m.%y} (–¥–æ—Å—Ç—É–ø –¥–æ {until_dt:%d.%m.%y})"
                        )
                    else:
                        status_text = f"–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {until_dt:%d.%m.%y}"

                    if cancel_flag:
                        hint_text = "–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚Äî –¥–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è."
                        subscribe_label = "‚úÖ –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞"
                    else:
                        hint_text = "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç ‚Äî –∫–æ–º–∞–Ω–¥–∞ /buy"
                        subscribe_label = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
                else:
                    trial_remaining = int(getattr(user_record, "trial_remaining", 0) or 0)
                    status_text = "‚≠ï <i>–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</i>"
                    tariff_text = f" <b>–¢—Ä–∏–∞–ª</b> ‚Ä¢ <i>{trial_remaining} –∑–∞–ø—Ä–æ—Å–æ–≤</i>"
                    hint_text = ""
            except Exception as profile_error:  # pragma: no cover
                logger.debug("Failed to build profile header: %s", profile_error, exc_info=True)

        profile_text = _profile_menu_text(
            callback.from_user,
            status_text=status_text,
            tariff_text=tariff_text,
            hint_text=hint_text,
        )
        reply_markup = _profile_menu_keyboard(subscribe_label, has_subscription=has_subscription)
        message = callback.message
        bot = callback.bot
        profile_media = _profile_header_media()

        if profile_media and bot:
            chat_id = message.chat.id if message and message.chat else callback.from_user.id
            try:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=profile_media,
                    caption=profile_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup,
                )
                if message:
                    try:
                        await message.delete()
                    except TelegramBadRequest:
                        logger.debug(
                            "Failed to delete profile menu message %s", message.message_id
                        )
                        try:
                            await message.edit_reply_markup(reply_markup=None)
                        except TelegramBadRequest:
                            logger.debug(
                                "Failed to clear profile menu keyboard for message %s",
                                message.message_id,
                            )
                return
            except Exception as photo_error:  # noqa: BLE001
                logger.warning(
                    "Failed to send profile header image: %s", photo_error, exc_info=True
                )

        if message:
            await message.edit_text(
                profile_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
            )
        elif bot:
            await bot.send_message(
                chat_id=callback.from_user.id,
                text=profile_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
            )

    except Exception as exc:
        logger.error("Error in handle_my_profile_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_my_stats_callback(callback: CallbackQuery) -> None:
    if not callback.from_user or callback.message is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if not await _callback_rate_limit_guard(callback):
        return

    db = ctx.db
    try:
        await callback.answer()

        if db is None:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                parse_mode=ParseMode.HTML,
                reply_markup=_profile_menu_keyboard(),
            )
            return

        user_id = callback.from_user.id
        user = await db.ensure_user(
            user_id, default_trial=ctx.TRIAL_REQUESTS, is_admin=user_id in ctx.ADMIN_IDS
        )
        stats = await db.get_user_statistics(user_id, days=30)

        try:
            status_text, keyboard = await generate_user_stats_response(
                user_id,
                days=30,
                stats=stats,
                user=user,
                divider=SECTION_DIVIDER,
            )
        except RuntimeError as stats_error:
            logger.error("Failed to build user stats: %s", stats_error)
            await callback.message.edit_text(
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                parse_mode=ParseMode.HTML,
                reply_markup=_profile_menu_keyboard(),
            )
            return

        await callback.message.edit_text(
            status_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard,
        )

    except Exception as exc:
        logger.error("Error in handle_my_stats_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def _resolve_bot_username() -> str:
    username = (ctx.BOT_USERNAME or "").strip()
    if username.startswith("@"):
        username = username[1:]
    if username:
        return username
    try:
        env_username = ctx.settings().get_str("TELEGRAM_BOT_USERNAME")
    except Exception:
        env_username = None
    if env_username:
        env_username = env_username.strip()
        if env_username.startswith("https://t.me/"):
            env_username = env_username[len("https://t.me/") :]
        elif env_username.startswith("t.me/"):
            env_username = env_username[len("t.me/") :]
        if env_username.startswith("@"):
            env_username = env_username[1:]
        if env_username:
            return env_username
    return ""


async def _ensure_bot_username(bot) -> str:
    username = _resolve_bot_username()
    if username or bot is None:
        return username

    fallback_username = ""
    try:
        bot_info = await bot.get_me()
    except Exception as exc:  # noqa: BLE001
        logger.warning("Could not resolve bot username dynamically: %s", exc)
    else:
        fallback_username = (bot_info.username or "").strip()
        if fallback_username.startswith("@"):
            fallback_username = fallback_username[1:]
        if fallback_username:
            ctx.BOT_USERNAME = fallback_username
    return fallback_username


def _build_referral_link(referral_code: str | None) -> tuple[str | None, str | None]:
    if not referral_code or referral_code == "SYSTEM_ERROR":
        return None, None
    safe_code = html_escape(referral_code)
    username = _resolve_bot_username()
    if username:
        return f"https://t.me/{username}?start=ref_{safe_code}", referral_code
    try:
        fallback_base = ctx.settings().get_str("TELEGRAM_REFERRAL_BASE_URL")
    except Exception:
        fallback_base = None
    if fallback_base:
        base = fallback_base.strip().rstrip("/")
        if base:
            if not base.startswith("http"):
                base = f"https://{base.lstrip('/')}"
            return f"{base}?start=ref_{safe_code}", referral_code
    return None, referral_code


async def handle_referral_program_callback(callback: CallbackQuery) -> None:
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not await _callback_rate_limit_guard(callback):
        return

    db = ctx.db
    try:
        await callback.answer()

        if db is None:
            await callback.message.edit_text(
                "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                parse_mode=ParseMode.HTML,
                reply_markup=_profile_menu_keyboard(),
            )
            return

        user_id = callback.from_user.id
        user = await db.get_user(user_id)

        if not user:
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                parse_mode=ParseMode.HTML,
                reply_markup=_profile_menu_keyboard(),
            )
            return

        referral_code: str | None = None
        stored_code = (getattr(user, "referral_code", None) or "").strip()

        if stored_code and stored_code != "SYSTEM_ERROR":
            referral_code = stored_code
        else:
            try:
                generated_code = (await db.generate_referral_code(user_id) or "").strip()
            except Exception as exc:
                logger.error("Error with referral code: %s", exc)
                generated_code = ""
            if generated_code and generated_code != "SYSTEM_ERROR":
                referral_code = generated_code
                try:
                    setattr(user, "referral_code", referral_code)
                except Exception:
                    pass

        referral_link, share_code = _build_referral_link(referral_code)

        if not referral_link and share_code and callback.bot:
            fallback_username = await _ensure_bot_username(callback.bot)
            if fallback_username:
                resolved_link, _ = _build_referral_link(referral_code)
                if resolved_link:
                    referral_link = resolved_link

        try:
            referrals = await db.get_user_referrals(user_id)
        except Exception as exc:
            logger.error("Error getting referrals: %s", exc)
            referrals = []

        total_referrals = len(referrals)
        active_referrals = sum(1 for ref in referrals if ref.get("has_active_subscription", False))

        referral_bonus_days = getattr(user, "referral_bonus_days", 0)
        referrals_count = getattr(user, "referrals_count", 0)

        referral_lines: list[str] = [
            "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>",
            HEAVY_DIVIDER,
            "",
            "üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã</b>",
            "",
            f"  üéâ –ë–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π: <b>{referral_bonus_days}</b>",
            f"  üë´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>",
            f"  ‚úÖ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{active_referrals}</b>",
            "",
        ]

        if referral_link:
            referral_lines.extend(
                [
                    HEAVY_DIVIDER,
                    "",
                    "üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>",
                    "",
                    f"<code>{referral_link}</code>",
                    "",
                ]
            )
        elif share_code:
            referral_lines.extend(
                [
                    HEAVY_DIVIDER,
                    "",
                    "üîó <b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥</b>",
                    "",
                    f"<code>ref_{html_escape(share_code)}</code>",
                    "",
                    "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏\n—É–∫–∞–∑–∞–ª–∏ –∫–æ–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞</i>",
                    "",
                ]
            )
        else:
            referral_lines.extend(
                [
                    HEAVY_DIVIDER,
                    "",
                    "‚ö†Ô∏è <b>–°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>",
                    "",
                    "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å\n–≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                    "",
                ]
            )

        referral_lines.extend(
            [
                HEAVY_DIVIDER,
                "",
                "üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>",
                "",
                "  1Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏",
                "  2Ô∏è‚É£ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ 3 –¥–Ω—è",
                "  3Ô∏è‚É£ –î—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç —Å–∫–∏–¥–∫—É 20%",
                "",
                HEAVY_DIVIDER,
                "",
                "üìà <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>",
                "",
            ]
        )

        if referrals:
            referral_lines.append(f"  üìä –í—Å–µ–≥–æ: <b>{total_referrals}</b>")
            referral_lines.append(f"  üíé –° –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{active_referrals}</b>")
            for ref in referrals[:5]:
                join_date = datetime.fromtimestamp(ref["joined_at"]).strftime("%d.%m.%Y")
                status = "üíé" if ref.get("has_active_subscription") else "üë§"
                referral_lines.append(f"{status} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{ref['user_id']} - {join_date}")
        else:
            referral_lines.append("‚Ä¢ –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç")

        referral_text = "\n".join(referral_lines)

        keyboard_buttons: list[list[InlineKeyboardButton]] = []
        if share_code:
            copy_text = "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" if referral_link else "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
            keyboard_buttons.append(
                [
                    InlineKeyboardButton(
                        text=copy_text,
                        callback_data=f"copy_referral_{share_code}",
                    )
                ]
            )

        keyboard_buttons.append(
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="my_profile")]
        )

        referral_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            referral_text,
            parse_mode=ParseMode.HTML,
            reply_markup=referral_keyboard,
        )

    except Exception as exc:
        logger.error("Error in handle_referral_program_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_copy_referral_callback(callback: CallbackQuery) -> None:
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not await _callback_rate_limit_guard(callback):
        return

    try:
        callback_data = callback.data or ""
        if callback_data.startswith("copy_referral_"):
            referral_code = callback_data.replace("copy_referral_", "")
            referral_link, share_code = _build_referral_link(referral_code)

            if referral_link:
                await callback.answer(f"üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!\n{referral_link}", show_alert=True)
                return
            if share_code:
                if callback.bot:
                    fallback_username = await _ensure_bot_username(callback.bot)
                    if fallback_username:
                        referral_link, _ = _build_referral_link(referral_code)
                if referral_link:
                    await callback.answer(f"üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!\n{referral_link}", show_alert=True)
                    return
                await callback.answer(f"üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!\nref_{share_code}", show_alert=True)
                return

            await callback.answer("‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return

        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞")

    except Exception as exc:
        logger.error("Error in handle_copy_referral_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_back_to_main_callback(callback: CallbackQuery) -> None:
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not await _callback_rate_limit_guard(callback):
        return

    try:
        await callback.answer()
        message = callback.message
        if message:
            try:
                await message.edit_reply_markup(reply_markup=None)
            except TelegramBadRequest:
                logger.debug("Failed to clear reply_markup for message %s", message.message_id)
        chat_id = message.chat.id if message else callback.from_user.id
        await callback.bot.send_message(
            chat_id=chat_id,
            text=_main_menu_text(),
            parse_mode=ParseMode.HTML,
            reply_markup=_main_menu_keyboard(),
        )
    except Exception as exc:
        logger.error("Error in handle_back_to_main_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_legal_question_callback(callback: CallbackQuery) -> None:
    """Handle 'legal_question' menu button."""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not await _callback_rate_limit_guard(callback):
        return

    try:
        await callback.answer()

        instruction_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
            ]
        )

        question_text_lines = [
            "‚öñÔ∏è <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å</b>",
            HEAVY_DIVIDER,
            "",
            "üß† <i>–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–∞–≤–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é,",
            "   –∏ —è –¥–∞–º —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</i>",
            "",
            HEAVY_DIVIDER,
            "",
            "üìã <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>",
            "",
            "üìä <b>–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏</b>",
            "   ‚îî –û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤",
            "   ‚îî –í—ã—è–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π",
            "",
            "üìö <b>–ü—Ä–∞–≤–æ–≤–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</b>",
            "   ‚îî –°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º—ã –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
            "   ‚îî –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
            "",
            "üéØ <b>–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π</b>",
            "   ‚îî –ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "   ‚îî –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã",
            "",
            HEAVY_DIVIDER,
            "",
            "‚úçÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º",
            "   —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç...</i>",
        ]

        question_text = "\n".join(question_text_lines)
        reply_markup = instruction_keyboard
        message = callback.message
        bot = callback.bot
        header_media = _legal_question_header_media()
        message_handled = False

        if header_media and bot:
            chat_id = None
            if message and message.chat:
                chat_id = message.chat.id
            elif callback.from_user:
                chat_id = callback.from_user.id

            if chat_id is not None:
                try:
                    if len(question_text) <= 1024:
                        await bot.send_photo(
                            chat_id=chat_id,
                            photo=header_media,
                            caption=question_text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup,
                        )
                    else:
                        await bot.send_photo(
                            chat_id=chat_id,
                            photo=header_media,
                            caption="‚öñÔ∏è <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å</b>",
                            parse_mode=ParseMode.HTML,
                        )
                        await bot.send_message(
                            chat_id=chat_id,
                            text=question_text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup,
                        )
                    message_handled = True

                    if message:
                        try:
                            await message.delete()
                        except TelegramBadRequest:
                            try:
                                await message.edit_reply_markup(reply_markup=None)
                            except TelegramBadRequest:
                                pass
                except Exception as media_error:  # noqa: BLE001
                    logger.warning(
                        "Failed to send legal question header image: %s",
                        media_error,
                        exc_info=True,
                    )

        if not message_handled:
            if message:
                await message.edit_text(
                    question_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup,
                )
            elif bot and callback.from_user:
                await bot.send_message(
                    chat_id=callback.from_user.id,
                    text=question_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup,
                )

        user_session = get_user_session(callback.from_user.id)
        setattr(user_session, "practice_search_mode", False)
        setattr(user_session, "document_preparation_mode", False)
    except Exception as exc:  # noqa: BLE001
        logger.error("Error in handle_legal_question_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_search_practice_callback(callback: CallbackQuery) -> None:
    """Handle 'search_practice' menu button."""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not await _callback_rate_limit_guard(callback):
        return

    try:
        await callback.answer()

        instruction_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        )

        practice_text_lines = [
            "üîç <b>–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏</b>",
            HEAVY_DIVIDER,
            "",
            "‚öñÔ∏è <i>–ü–æ–¥–±–µ—Ä—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—É–¥–µ–±–Ω—ã–µ –∞–∫—Ç—ã –ø–æ–¥ –≤–∞—à –≤–æ–ø—Ä–æ—Å</i>",
            "   ‚Äî –í–µ—Ä—Ö–æ–≤–Ω—ã–π –°—É–¥, –∫–∞—Å—Å–∞—Ü–∏—è, –∞–ø–µ–ª–ª—è—Ü–∏—è, –∞—Ä–±–∏—Ç—Ä–∞–∂ –∏ –æ–±—â–∞—è —é—Ä–∏—Å–¥–∏–∫—Ü–∏—è",
            "",
            HEAVY_DIVIDER,
            "",
            "üìã <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>",
            "",
            "üí° <b>–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä</b>",
            "   ‚îî 2‚Äì3 –∫–ª—é—á–µ–≤—ã—Ö —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è",
            "   ‚îî –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∫ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
            "",
            "üìä <b>–ì–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä</b>",
            "   ‚îî 6+ –¥–µ–ª –ø–æ —Ç–µ–º–µ (–≤ —Ç. —á. –≤—ã—Å—à–∏–µ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏)",
            "   ‚îî –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∏",
            "   ‚îî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤/—à–∞–Ω—Å–æ–≤",
            "",
            "üìÑ <b>–ü–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</b>",
            "   ‚îî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —à–∞–±–ª–æ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
            "   ‚îî –ü—Ä–æ–µ–∫—Ç –∏—Å–∫–∞/–æ—Ç–∑—ã–≤–∞/–∂–∞–ª–æ–±—ã —Å –Ω–æ—Ä–º–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É",
            "",
            "‚ûï <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É</b>",
            "   ‚îî Excel‚Äë–æ—Ç—á—ë—Ç —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –¥–µ–ª",
            "   ‚îî –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ –ø–µ—Ä–∏–æ–¥—É",
            "",
            HEAVY_DIVIDER,
            "",
            "‚úçÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
            "   —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...</i>",
        ]
        practice_text = "\n".join(practice_text_lines)
        reply_markup = instruction_keyboard
        message = callback.message
        bot = callback.bot
        header_media = _search_practice_header_media()
        message_handled = False

        if header_media and bot:
            chat_id = None
            if message and message.chat:
                chat_id = message.chat.id
            elif callback.from_user:
                chat_id = callback.from_user.id

            if chat_id is not None:
                try:
                    if len(practice_text) <= 1024:
                        await bot.send_photo(
                            chat_id=chat_id,
                            photo=header_media,
                            caption=practice_text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup,
                        )
                    else:
                        await bot.send_photo(
                            chat_id=chat_id,
                            photo=header_media,
                            caption="üîç <b>–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏</b>",
                            parse_mode=ParseMode.HTML,
                        )
                        await bot.send_message(
                            chat_id=chat_id,
                            text=practice_text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=reply_markup,
                        )
                    message_handled = True

                    if message:
                        try:
                            await message.delete()
                        except TelegramBadRequest:
                            try:
                                await message.edit_reply_markup(reply_markup=None)
                            except TelegramBadRequest:
                                pass
                except Exception as media_error:  # noqa: BLE001
                    logger.warning(
                        "Failed to send search practice header image: %s",
                        media_error,
                        exc_info=True,
                    )

        if not message_handled:
            if message:
                await message.edit_text(
                    practice_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup,
                )
            elif bot and callback.from_user:
                await bot.send_message(
                    chat_id=callback.from_user.id,
                    text=practice_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup,
                )

        user_session = get_user_session(callback.from_user.id)
        if not hasattr(user_session, "practice_search_mode"):
            user_session.practice_search_mode = False
        user_session.practice_search_mode = True

    except Exception as exc:  # noqa: BLE001
        logger.error("Error in handle_search_practice_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_prepare_documents_callback(callback: CallbackQuery) -> None:
    """Handle 'prepare_documents' menu button."""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not await _callback_rate_limit_guard(callback):
        return

    try:
        await callback.answer()

        prepare_text_lines = [
            "üìÑ <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>",
            HEAVY_DIVIDER,
            "",
            "üìë <i>–ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ",
            "   –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</i>",
            "",
            HEAVY_DIVIDER,
            "",
            "üìã <b>–¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>",
            "",
            "‚öñÔ∏è –ò—Å–∫–æ–≤—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è",
            "üìù –•–æ–¥–∞—Ç–∞–π—Å—Ç–≤–∞ –∏ –∑–∞–ø—Ä–æ—Å—ã",
            "üìß –ñ–∞–ª–æ–±—ã –∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è",
            "üìú –î–æ–≥–æ–≤–æ—Ä—ã –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
            "",
            HEAVY_DIVIDER,
            "",
            "‚úçÔ∏è <i>–û–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω",
            "   –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –¥–µ–ª–∞...</i>",
        ]
        await callback.message.answer(
            "\n".join(prepare_text_lines),
            parse_mode=ParseMode.HTML,
        )

        user_session = get_user_session(callback.from_user.id)
        if not hasattr(user_session, "document_preparation_mode"):
            user_session.document_preparation_mode = False
        user_session.document_preparation_mode = True

    except Exception as exc:  # noqa: BLE001
        logger.error("Error in handle_prepare_documents_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_help_info_callback(callback: CallbackQuery) -> None:
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not await _callback_rate_limit_guard(callback):
        return

    try:
        await callback.answer()

        configured_support = (ctx.SUPPORT_USERNAME or "").strip()
        if configured_support and not configured_support.startswith("@"):
            configured_support = f"@{configured_support}"
        fallback_bot = (ctx.BOT_USERNAME or "").strip()
        fallback_contact = f"@{fallback_bot}" if fallback_bot else "‚Äî"
        support_contact = configured_support or fallback_contact

        support_text_lines = [
            "üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>",
            HEAVY_DIVIDER,
            "",
            "üí¨ <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>",
            "   ‚îî –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @support_username",
            "",
            HEAVY_DIVIDER,
            "",
            "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>",
            "",
            "ü§ñ <b>–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</b>",
            "   ‚îú –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            "   ‚îî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
            "",
            "üìÑ <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>",
            "   ‚îú –§–æ—Ä–º–∞—Ç—ã: PDF, DOCX, DOC, TXT",
            "   ‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë",
            "   ‚îî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞",
            "",
            "‚è≥ <b>–î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞</b>",
            "   ‚îú –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: 2-3 –º–∏–Ω—É—Ç—ã",
            "   ‚îî –ë–æ–ª—å—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: –¥–æ 5 –º–∏–Ω—É—Ç",
            "",
            "üí¨ <b>–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É?</b>",
            "   ‚îú –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å",
            "   ‚îú –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
            "   ‚îî –ë–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã",
            "",
            "üîÑ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É?</b>",
            "   ‚îú –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            '   ‚îî –ò–ª–∏ –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"',
            "",
            "üí∞ <b>–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å?</b>",
            '   ‚îî –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ—Ñ–∏–ª—å"',
            "",
            "üéØ <b>–ö–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–Ω–∏–º–∞–µ—Ç –±–æ—Ç?</b>",
            "   ‚îú –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã",
            "   ‚îú –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤",
            "   ‚îú –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            "   ‚îî –ü–æ–º–æ—â—å —Å –∑–∞–¥–∞—á–∞–º–∏",
            "",
            "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?</b>",
            "   ‚îú –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã",
            "   ‚îî –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º",
        ]
        support_text = "\n".join(support_text_lines).replace("@support_username", support_contact)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]]
        )

        await callback.message.answer(support_text, parse_mode=ParseMode.HTML, reply_markup=keyboard)
        logger.info("Support info requested by user %s", callback.from_user.id)

    except Exception as exc:
        logger.error("Error in handle_help_info_callback: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def cmd_status(message: Message) -> None:
    db = ctx.db
    if db is None:
        await message.answer("–°—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    if not message.from_user:
        await message.answer("–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    error_handler = ctx.error_handler
    try:
        user_id = ensure_valid_user_id(message.from_user.id, context="cmd_status")
    except ValidationException as exc:
        context = ErrorContext(function_name="cmd_status", chat_id=message.chat.id if message.chat else None)
        if error_handler:
            await error_handler.handle_exception(exc, context)
        else:
            logger.warning("Validation error in cmd_status: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    user = await db.ensure_user(
        user_id,
        default_trial=ctx.TRIAL_REQUESTS,
        is_admin=user_id in ctx.ADMIN_IDS,
    )
    until_ts = int(getattr(user, "subscription_until", 0) or 0)
    now_ts = int(datetime.now().timestamp())
    has_active = until_ts > now_ts
    plan_id = getattr(user, "subscription_plan", None)
    plan_info = get_plan_pricing(plan_id) if plan_id else None
    if plan_info:
        plan_label = plan_info.plan.name
    elif plan_id:
        plan_label = plan_id
    elif has_active:
        plan_label = "–ë–µ–∑–ª–∏–º–∏—Ç"
    else:
        plan_label = "–Ω–µ—Ç"

    if until_ts > 0:
        until_dt = datetime.fromtimestamp(until_ts)
        if has_active:
            left_days = max(0, (until_dt - datetime.now()).days)
            until_text = f"{until_dt:%Y-%m-%d} (‚âà{left_days} –¥–Ω.)"
        else:
            until_text = f"–ò—Å—Ç–µ–∫–ª–∞ {until_dt:%Y-%m-%d}"
    else:
        until_text = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

    quota_balance_raw = getattr(user, "subscription_requests_balance", None)
    quota_balance = int(quota_balance_raw) if quota_balance_raw is not None else None

    lines = [
        f"{Emoji.STATS} <b>–°—Ç–∞—Ç—É—Å</b>",
        "",
        f"ID: <code>{user_id}</code>",
        f"–†–æ–ª—å: {'–∞–¥–º–∏–Ω' if getattr(user, 'is_admin', False) else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}",
        f"–¢—Ä–∏–∞–ª: {getattr(user, 'trial_remaining', 0)} –∑–∞–ø—Ä–æ—Å(–æ–≤)",
        "–ü–æ–¥–ø–∏—Å–∫–∞:",
    ]
    if plan_info or plan_id or until_ts:
        lines.append(f"‚Ä¢ –ü–ª–∞–Ω: {plan_label}")
        lines.append(f"‚Ä¢ –î–æ—Å—Ç—É–ø –¥–æ: {until_text}")
        if plan_info and quota_balance is not None:
            lines.append(f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {max(0, quota_balance)}")
        elif plan_id and quota_balance is not None:
            lines.append(f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {max(0, quota_balance)}")
        elif has_active and not plan_id:
            lines.append("‚Ä¢ –õ–∏–º–∏—Ç: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    else:
        lines.append("‚Ä¢ –ù–µ –∞–∫—Ç–∏–≤–Ω–∞")

    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML)


async def cmd_mystats(message: Message) -> None:
    db = ctx.db
    if db is None:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    if not message.from_user:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        return

    days = 30
    if message.text:
        parts = message.text.strip().split()
        if len(parts) >= 2:
            try:
                days = int(parts[1])
            except ValueError:
                days = 30

    days = normalize_stats_period(days)

    try:
        stats_text, keyboard = await generate_user_stats_response(
            message.from_user.id,
            days,
            divider=SECTION_DIVIDER,
        )
        await message.answer(stats_text, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    except Exception as exc:  # noqa: BLE001
        logger.error("Error in cmd_mystats: %s", exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def register_menu_handlers(dp: Dispatcher) -> None:
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_status, Command("status"))
    dp.message.register(cmd_mystats, Command("mystats"))

    dp.callback_query.register(handle_my_profile_callback, F.data == "my_profile")
    dp.callback_query.register(handle_my_stats_callback, F.data == "my_stats")
    dp.callback_query.register(handle_back_to_main_callback, F.data == "back_to_main")
    dp.callback_query.register(handle_legal_question_callback, F.data == "legal_question")
    dp.callback_query.register(handle_search_practice_callback, F.data == "search_practice")
    dp.callback_query.register(handle_prepare_documents_callback, F.data == "prepare_documents")
    dp.callback_query.register(handle_referral_program_callback, F.data == "referral_program")
    dp.callback_query.register(handle_copy_referral_callback, F.data.startswith("copy_referral_"))
    dp.callback_query.register(handle_help_info_callback, F.data == "help_info")
