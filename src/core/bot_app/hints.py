"""
–°–∏—Å—Ç–µ–º–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞
–ö–∞–∂–¥–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
"""

from __future__ import annotations

import logging
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from src.core.db_advanced import DatabaseAdvanced

logger = logging.getLogger(__name__)


# –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏)
ONBOARDING_HINTS = [
    {
        "key": "search_practice",
        "text": 'üí° <i>–ï—â—ë —è —É–º–µ—é –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ: "–ü–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏—è –ø–æ –≤–∑—ã—Å–∫–∞–Ω–∏—é –Ω–µ—É—Å—Ç–æ–π–∫–∏ —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞"</i>',
        "context": ["text_question", "general"],
    },
    {
        "key": "document_analysis",
        "text": "üìÑ <i>–ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—É—Ç—å –º–Ω–µ –¥–æ–≥–æ–≤–æ—Ä, –∏—Å–∫ –∏–ª–∏ —Å—É–¥–µ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî —Ä–∞–∑–±–µ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ–±—ä—è—Å–Ω—é –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã</i>",
        "context": ["text_question", "after_search", "general"],
    },
    {
        "key": "risk_analysis",
        "text": "‚ö†Ô∏è <i>–ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å –≤ –¥–æ–≥–æ–≤–æ—Ä–µ, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ ‚Äî —è –ø–æ–∫–∞–∂—É –≤—Å–µ —Ä–∏—Å–∫–∏ –∏ –ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏</i>",
        "context": ["text_question", "after_doc_analysis", "after_summary", "general"],
    },
    {
        "key": "lawsuit_analysis",
        "text": "‚öñÔ∏è <i>–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∏—Å–∫–æ–≤—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è ‚Äî –æ—Ü–µ–Ω—é —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö, –Ω–∞–π–¥—É —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ —É—Å–∏–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é</i>",
        "context": ["text_question", "after_doc_analysis", "after_risk", "general"],
    },
    {
        "key": "doc_generation",
        "text": '‚ú® <i>–ö—Å—Ç–∞—Ç–∏, –º–æ–≥—É –ø–æ–º–æ—á—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é, –∂–∞–ª–æ–±—É –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–µ–Ω—é "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"</i>',
        "context": ["text_question", "after_search", "after_risk", "general"],
    },
    {
        "key": "anonymize",
        "text": "üîí <i>–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—Å–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ, —è –æ–±–µ–∑–ª–∏—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>",
        "context": ["after_doc_analysis", "general"],
    },
    {
        "key": "ocr",
        "text": "üì∑ <i>–£ –≤–∞—Å –±—É–º–∞–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç? –ü—Ä–æ—Å—Ç–æ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –∏ —Å–º–æ–≥—É —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å</i>",
        "context": ["after_summary", "general"],
    },
    {
        "key": "help_command",
        "text": "üéØ <i>–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é</i>",
        "context": ["general"],
    },
]


async def get_next_onboarding_hint(
    db: DatabaseAdvanced | None,
    user_id: int,
    context: str = "general",
) -> tuple[str | None, str | None]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        db: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context: –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ('text_question', 'after_search', –∏ —Ç.–¥.)

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∫–ª—é—á –ø–æ–¥—Å–∫–∞–∑–∫–∏) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –≤—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã
    """
    if db is None:
        return None, None

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        shown_hints = await db.get_shown_hints(user_id)

        # –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø–æ–¥–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        for hint in ONBOARDING_HINTS:
            hint_key = hint["key"]

            # –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if hint_key in shown_hints:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            if context in hint["context"]:
                return hint["text"], hint_key

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, –∏—â–µ–º –ª—é–±—É—é –Ω–µ–ø–æ–¥–∫–∞–∑–∞–Ω–Ω—É—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º "general"
        for hint in ONBOARDING_HINTS:
            hint_key = hint["key"]
            if hint_key not in shown_hints and "general" in hint["context"]:
                return hint["text"], hint_key

        # –í—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã
        return None, None

    except Exception as e:
        logger.error(f"Error getting next onboarding hint: {e}")
        return None, None


async def mark_hint_as_shown(
    db: DatabaseAdvanced | None,
    user_id: int,
    hint_key: str,
) -> None:
    """
    –ü–æ–º–µ—Ç–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é

    Args:
        db: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hint_key: –ö–ª—é—á –ø–æ–¥—Å–∫–∞–∑–∫–∏
    """
    if db is None:
        return

    try:
        await db.mark_hint_shown(user_id, hint_key)
        logger.debug(f"Marked hint '{hint_key}' as shown for user {user_id}")
    except Exception as e:
        logger.error(f"Error marking hint as shown: {e}")


async def should_show_hint(
    db: DatabaseAdvanced | None,
    user_id: int,
) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É

    Args:
        db: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        True, –µ—Å–ª–∏ –ø–æ—Ä–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
    """
    if db is None:
        return False

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(user_id)
        if not user:
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        total_requests = getattr(user, "total_requests", 0)

        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        if total_requests < 1:
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        shown_hints = await db.get_shown_hints(user_id)

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã - –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        if len(shown_hints) >= len(ONBOARDING_HINTS):
            return False

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 2-3 –∑–∞–ø—Ä–æ—Å–∞
        # (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å, –Ω–æ –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º)
        requests_per_hint = 2
        expected_hints_count = total_requests // requests_per_hint

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
        return len(shown_hints) < expected_hints_count

    except Exception as e:
        logger.error(f"Error checking if should show hint: {e}")
        return False


async def get_onboarding_hint(
    db: DatabaseAdvanced | None,
    user_id: int,
    context: str = "general",
) -> str | None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞

    Args:
        db: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context: –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    """
    if db is None:
        return None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
        if not await should_show_hint(db, user_id):
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        hint_text, hint_key = await get_next_onboarding_hint(db, user_id, context)

        if hint_text and hint_key:
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é
            await mark_hint_as_shown(db, user_id, hint_key)
            return hint_text

        return None

    except Exception as e:
        logger.error(f"Error in get_onboarding_hint: {e}")
        return None


# –ì–æ—Ç–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
QUICK_HINTS = {
    "first_message": "üí° <i>–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ –∏ –Ω–∞–π–¥—ë–º —Ä–µ—à–µ–Ω–∏–µ</i>",
    "document_uploaded": "üí° <i>–ú–æ–≥—É –±—ã—Å—Ç—Ä–æ –≤—ã–¥–µ–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ, –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∏—Å–∫–∏ –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç</i>",
    "long_text": "üìÑ <i>–ë–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç? –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ —Ñ–∞–π–ª–æ–º ‚Äî —Ç–∞–∫ —è —Å–º–æ–≥—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ —Å –Ω–∏–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å</i>",
    "general": "üí° <i>–ù–∞–ø–æ–º–Ω—é: –æ—Ç–≤–µ—á–∞—é –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—â—É –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –ø–æ–º–æ–≥–∞—é —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã</i>",
}


__all__ = [
    "get_onboarding_hint",
    "get_next_onboarding_hint",
    "mark_hint_as_shown",
    "should_show_hint",
    "get_contextual_hint",
    "ONBOARDING_HINTS",
    "QUICK_HINTS",
]


async def get_contextual_hint(
    db: DatabaseAdvanced | None,
    user_id: int,
    *,
    context: str = "general",
) -> str | None:
    """
    –í–µ—Ä–Ω—É—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.

    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É (—á–∞—Å—Ç–æ—Ç–∞, —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ).
    –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π
    ¬´–±—ã—Å—Ç—Ä—ã–π¬ª –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    """

    allow_hint = True
    if db is not None:
        allow_hint = await should_show_hint(db, user_id)

    if not allow_hint:
        return None

    hint = await get_onboarding_hint(db, user_id, context=context)
    if hint:
        return hint

    return QUICK_HINTS.get(context) or QUICK_HINTS.get("general")
