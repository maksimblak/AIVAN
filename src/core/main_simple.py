"""
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ –ò–ò-–ò–≤–∞–Ω
–¢–æ–ª—å–∫–æ /start –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
"""

from __future__ import annotations

import asyncio
import json
import logging
import math
import time
import tempfile
from contextlib import suppress
from datetime import datetime
from pathlib import Path
import uuid
from typing import TYPE_CHECKING, Any, Awaitable, Callable, Mapping, Optional, Sequence

from src.core.excel_export import build_practice_excel
from src.core.safe_telegram import send_html_text
from src.documents.document_manager import DocumentManager

if TYPE_CHECKING:
    from src.core.db_advanced import DatabaseAdvanced, TransactionStatus

import re
from html import escape as html_escape

from aiogram import Bot, Dispatcher, F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    BotCommand,
    BotCommandScopeChat,
    CallbackQuery,
    ErrorEvent,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
    User,
)

from src.bot.promt import JUDICIAL_PRACTICE_SEARCH_PROMPT, LEGAL_SYSTEM_PROMPT
from src.documents.document_drafter import (
    DocumentDraftingError,
    build_docx_from_markdown,
    format_plan_summary,
    generate_document,
    plan_document,
)
from src.bot.status_manager import ProgressStatus, progress_router
from src.bot.retention_notifier import RetentionNotifier
from src.bot.stream_manager import StreamingCallback, StreamManager
from src.bot.ui_components import Emoji, sanitize_telegram_html
from src.core.attachments import QuestionAttachment
from src.core.audio_service import AudioService
from src.core.access import AccessService
from src.core.db_advanced import DatabaseAdvanced, TransactionStatus
from src.core.exceptions import (
    ErrorContext,
    ErrorHandler,
    ErrorType,
    NetworkException,
    OpenAIException,
    SystemException,
    ValidationException,
)
from src.core.middlewares.error_middleware import ErrorHandlingMiddleware
from src.core.openai_service import OpenAIService
from src.core.payments import CryptoPayProvider, convert_rub_to_xtr
from src.core.subscription_payments import (
    build_subscription_payload,
    parse_subscription_payload,
    SubscriptionPayloadError,
)
from src.core.admin_modules.admin_commands import setup_admin_commands
from src.core.session_store import SessionStore, UserSession
from src.core.validation import InputValidator, ValidationSeverity
from src.core.runtime import AppRuntime, DerivedRuntime, SubscriptionPlanPricing, WelcomeMedia
from src.core.settings import AppSettings
from src.core.app_context import set_settings
from src.documents.base import ProcessingError
from src.bot.ratelimit import RateLimiter
from src.bot.typing_indicator import send_typing_once, typing_action

SAFE_LIMIT = 3900  # Buffer below Telegram 4096 character limit
QUESTION_ATTACHMENT_MAX_BYTES = 4 * 1024 * 1024  # 4MB per attachment (base64-safe)

VOICE_REPLY_CAPTION = (
    f"{Emoji.MICROPHONE} <b>–ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤</b>"
    f"\n{Emoji.INFO} –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–ª—É—à–∞—Ç—å."
)

PERIOD_OPTIONS = (7, 30, 90)
PROGRESS_BAR_LENGTH = 10
FEATURE_LABELS = {
    "legal_question": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
    "document_processing": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "judicial_practice": "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
    "document_draft": "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "voice_message": "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
    "ocr_processing": "—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
    "document_chat": "–ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º",
}

SECTION_DIVIDER = "<code>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</code>"

def _build_stats_keyboard(has_subscription: bool) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []
    if not has_subscription:
        buttons.append([InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="get_subscription")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="my_profile")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


DAY_NAMES = {
    "0": "–í—Å",
    "1": "–ü–Ω",
    "2": "–í—Ç",
    "3": "–°—Ä",
    "4": "–ß—Ç",
    "5": "–ü—Ç",
    "6": "–°–±",
}

def _format_user_display(user: User | None) -> str:
    if user is None:
        return ""
    parts: list[str] = []
    if user.username:
        parts.append(f"@{user.username}")
    name = " ".join(filter(None, [user.first_name, user.last_name])).strip()
    if name and name not in parts:
        parts.append(name)
    if not parts and user.first_name:
        parts.append(user.first_name)
    if not parts:
        parts.append(str(user.id))
    return " ".join(parts)

# Runtime-managed globals (synchronised via refresh_runtime_globals)
# Defaults keep module usable before runtime initialisation.
WELCOME_MEDIA: WelcomeMedia | None = None
BOT_TOKEN = ""
BOT_USERNAME = ""
USE_ANIMATION = True
USE_STREAMING = True
config: Any | None = None
MAX_MESSAGE_LENGTH = 4000
DB_PATH = ""
TRIAL_REQUESTS = 0
SUB_DURATION_DAYS = 0
RUB_PROVIDER_TOKEN = ""
SUB_PRICE_RUB = 0
SUB_PRICE_RUB_KOPEKS = 0
STARS_PROVIDER_TOKEN = ""
SUB_PRICE_XTR = 0
DYNAMIC_PRICE_XTR = 0
SUBSCRIPTION_PLANS: tuple[SubscriptionPlanPricing, ...] = ()
SUBSCRIPTION_PLAN_MAP: dict[str, SubscriptionPlanPricing] = {}
DEFAULT_SUBSCRIPTION_PLAN: SubscriptionPlanPricing | None = None
ADMIN_IDS: set[int] = set()
USER_SESSIONS_MAX = 0
USER_SESSION_TTL_SECONDS = 0

# Service-like dependencies
db = None
rate_limiter = None
access_service = None
openai_service = None
audio_service = None
session_store = None
crypto_provider = None
robokassa_provider = None
yookassa_provider = None
error_handler = None
document_manager = None
response_cache = None
stream_manager = None
metrics_collector = None
task_manager = None
health_checker = None
scaling_components = None
judicial_rag = None
retention_notifier = None


async def _ensure_rating_snapshot(request_id: int, telegram_user: User | None, answer_text: str) -> None:
    if db is None or not answer_text.strip():
        return
    if telegram_user is None:
        return
    add_rating_fn = _get_safe_db_method("add_rating", default_return=False)
    if not add_rating_fn:
        return
    username = _format_user_display(telegram_user)
    await add_rating_fn(
        request_id,
        telegram_user.id,
        0,
        None,
        username=username,
        answer_text=answer_text,
    )

# ============ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ============

logger = logging.getLogger("ai-ivan.simple")

_runtime: AppRuntime | None = None


def set_runtime(runtime: AppRuntime) -> None:
    global _runtime
    _runtime = runtime
    set_settings(runtime.settings)
    _sync_runtime_globals()


def get_runtime() -> AppRuntime:
    if _runtime is None:
        raise RuntimeError("Application runtime is not initialized")
    return _runtime


def settings() -> AppSettings:
    return get_runtime().settings


def derived() -> DerivedRuntime:
    return get_runtime().derived


def _sync_runtime_globals() -> None:
    if _runtime is None:
        return
    cfg = _runtime.settings
    drv = _runtime.derived
    g = globals()
    g.update({
        'WELCOME_MEDIA': drv.welcome_media,
        'BOT_TOKEN': cfg.telegram_bot_token,
        'USE_ANIMATION': cfg.use_status_animation,
        'USE_STREAMING': cfg.use_streaming,
        'MAX_MESSAGE_LENGTH': drv.max_message_length,
        'SAFE_LIMIT': drv.safe_limit,
        'DB_PATH': cfg.db_path,
        'TRIAL_REQUESTS': cfg.trial_requests,
        'SUB_DURATION_DAYS': cfg.sub_duration_days,
        'RUB_PROVIDER_TOKEN': cfg.telegram_provider_token_rub,
        'SUB_PRICE_RUB': cfg.subscription_price_rub,
        'SUB_PRICE_RUB_KOPEKS': drv.subscription_price_rub_kopeks,
        'STARS_PROVIDER_TOKEN': cfg.telegram_provider_token_stars,
        'SUB_PRICE_XTR': cfg.subscription_price_xtr,
        'DYNAMIC_PRICE_XTR': drv.dynamic_price_xtr,
        'SUBSCRIPTION_PLANS': drv.subscription_plans,
        'SUBSCRIPTION_PLAN_MAP': drv.subscription_plan_map,
        'DEFAULT_SUBSCRIPTION_PLAN': drv.default_subscription_plan,
        'ADMIN_IDS': drv.admin_ids,
        'USER_SESSIONS_MAX': cfg.user_sessions_max,
        'USER_SESSION_TTL_SECONDS': cfg.user_session_ttl_seconds,
        'db': _runtime.db,
        'rate_limiter': _runtime.rate_limiter,
        'access_service': _runtime.access_service,
        'openai_service': _runtime.openai_service,
        'audio_service': _runtime.audio_service,
        'session_store': _runtime.session_store,
        'crypto_provider': _runtime.crypto_provider,
        'robokassa_provider': _runtime.robokassa_provider,
        'yookassa_provider': _runtime.yookassa_provider,
        'error_handler': _runtime.error_handler,
        'document_manager': _runtime.document_manager,
        'response_cache': _runtime.response_cache,
        'stream_manager': _runtime.stream_manager,
        'metrics_collector': _runtime.metrics_collector,
        'task_manager': _runtime.task_manager,
        'health_checker': _runtime.health_checker,
        'scaling_components': _runtime.scaling_components,
        'judicial_rag': _runtime.get_dependency('judicial_rag'),
    })


def refresh_runtime_globals() -> None:
    _sync_runtime_globals()

class ResponseTimer:
    def __init__(self) -> None:
        self._t0: float | None = None
        self.duration = 0.0

    def start(self) -> None:
        self._t0 = time.monotonic()

    def stop(self) -> None:
        if self._t0 is not None:
            self.duration = max(0.0, time.monotonic() - self._t0)

    def get_duration_text(self) -> str:
        s = int(self.duration)
        return f"{s//60:02d}:{s%60:02d}"


class DocumentProcessingStates(StatesGroup):
    waiting_for_document = State()
    processing_document = State()




class DocumentDraftStates(StatesGroup):
    waiting_for_request = State()
    asking_details = State()
    generating = State()


# ============ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú ============


def get_user_session(user_id: int) -> UserSession:
    if session_store is None:
        raise RuntimeError("Session store not initialized")
    return session_store.get_or_create(user_id)


def _ensure_valid_user_id(raw_user_id: int | None, *, context: str) -> int:
    """Validate and normalise user id, raising ValidationException when invalid."""

    result = InputValidator.validate_user_id(raw_user_id)
    if result.is_valid and result.cleaned_data:
        return int(result.cleaned_data)

    errors = ', '.join(result.errors or ['–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'])
    try:
        normalized_user_id = int(raw_user_id) if raw_user_id is not None else None
    except (TypeError, ValueError):
        normalized_user_id = None

    raise ValidationException(
        errors,
        ErrorContext(user_id=normalized_user_id, function_name=context),
    )


def _get_safe_db_method(method_name: str, default_return=None):
    """Return DB coroutine when available."""

    _ = default_return  # backward compatibility

    if db is None or not hasattr(db, method_name):
        return None

    return getattr(db, method_name)

# ============ –£–¢–ò–õ–ò–¢–´ ============


def chunk_text(text: str, max_length: int | None = None) -> list[str]:
    """Split long Telegram messages into chunks respecting limits."""
    limit = max_length or derived().max_message_length
    if len(text) <= limit:
        return [text]

    chunks: list[str] = []
    current_chunk = ''

    for paragraph in text.split('\n\n'):
        if len(current_chunk + paragraph + '\n\n') <= limit:
            current_chunk += paragraph + '\n\n'
        elif current_chunk:
            chunks.append(current_chunk.strip())
            current_chunk = paragraph + '\n\n'
        else:
            while len(paragraph) > limit:
                chunks.append(paragraph[:limit])
                paragraph = paragraph[limit:]
            current_chunk = paragraph + '\n\n'

    if current_chunk:
        chunks.append(current_chunk.strip())

    return chunks


def _resolve_bot_username() -> str:
    """Return cached bot username or fallback from settings."""
    username = (BOT_USERNAME or '').strip()
    if username.startswith('@'):
        username = username[1:]
    if username:
        return username
    try:
        env_username = settings().get_str('TELEGRAM_BOT_USERNAME')
    except Exception:
        env_username = None
    if env_username:
        env_username = env_username.strip()
        if env_username.startswith('https://t.me/'):
            env_username = env_username[len('https://t.me/'):]
        elif env_username.startswith('t.me/'):
            env_username = env_username[len('t.me/'):]
        if env_username.startswith('@'):
            env_username = env_username[1:]
        if env_username:
            return env_username
    return ''


def _build_referral_link(referral_code: str | None) -> tuple[str | None, str | None]:
    """Compose deep link for referral code; returns (link, code)."""
    if not referral_code or referral_code == 'SYSTEM_ERROR':
        return None, None
    safe_code = html_escape(referral_code)
    username = _resolve_bot_username()
    if username:
        return f'https://t.me/{username}?start=ref_{safe_code}', referral_code
    try:
        fallback_base = settings().get_str('TELEGRAM_REFERRAL_BASE_URL')
    except Exception:
        fallback_base = None
    if fallback_base:
        base = fallback_base.strip().rstrip('/')
        if base:
            if not base.startswith('http'):
                base = f"https://{base.lstrip('/')}"
            return f"{base}?start=ref_{safe_code}", referral_code
    return None, referral_code


# –£–¥–∞–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è md_links_to_anchors –∏–∑ ui_components



    

def _split_plain_text(text: str, limit: int = SAFE_LIMIT) -> list[str]:
    if not text:
        return []

    if len(text) <= limit:
        return [text]

    line_sep = chr(10)
    paragraph_sep = line_sep * 2
    chunks: list[str] = []
    current: list[str] = []

    def flush_current() -> None:
        if current:
            chunks.append(paragraph_sep.join(current))
            current.clear()

    paragraphs: list[str] = []
    buffer: list[str] = []
    for line in text.splitlines():
        if line.strip():
            buffer.append(line)
        else:
            if buffer:
                paragraphs.append(line_sep.join(buffer))
                buffer.clear()
    if buffer:
        paragraphs.append(line_sep.join(buffer))

    for paragraph in paragraphs:
        paragraph = paragraph.strip()
        if not paragraph:
            continue
        joined = paragraph_sep.join(current + [paragraph])
        if len(joined) <= limit:
            current.append(paragraph)
            continue
        flush_current()
        if len(paragraph) > limit:
            for i in range(0, len(paragraph), limit):
                chunks.append(paragraph[i : i + limit])
        else:
            current.append(paragraph)
    flush_current()

    return chunks


def _split_html_safely(html: str, hard_limit: int = SAFE_LIMIT) -> list[str]:
    """
    –†–µ–∂–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π HTML –∞–∫–∫—É—Ä–∞—Ç–Ω–æ:
      1) –ø–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ  -> <br><br>
      2) –ø–æ –æ–¥–∏–Ω–æ—á–Ω–æ–º—É <br>
      3) –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º (. ! ?)
      4) –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ ‚Äî –∂—ë—Å—Ç–∫–∞—è –Ω–∞—Ä–µ–∑–∫–∞.
    –°—Ç–∞—Ä–∞–µ–º—Å—è –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å —Ç–µ–≥–∏; —Ä–µ–∂–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö <br> –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞.
    """
    if not html:
        return []

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    h = re.sub(r"<br\s*/?>", "<br>", html, flags=re.IGNORECASE)

    chunks: list[str] = []

    def _pack(parts: list[str], sep: str) -> list[str]:
        out, cur, ln = [], [], 0
        for p in parts:
            add = p
            # —É—á—Ç—ë–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            sep_len = len(sep) if cur else 0
            if ln + sep_len + len(add) <= hard_limit:
                if cur:
                    cur.append(sep)
                cur.append(add)
                ln += sep_len + len(add)
            else:
                if cur:
                    out.append("".join(cur))
                cur, ln = [add], len(add)
        if cur:
            out.append("".join(cur))
        return out

    # 1) –∫—Ä—É–ø–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã: <br><br>
    paras = re.split(r"(?:<br>\s*){2,}", h)
    tmp = _pack(paras, "<br><br>")

    # 2) –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—Å—ë –µ—â—ë –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞ ‚Äî —Ä–µ–∂–µ–º –ø–æ –æ–¥–∏–Ω–æ—á–Ω—ã–º <br>
    next_stage: list[str] = []
    for block in tmp:
        if len(block) <= hard_limit:
            next_stage.append(block)
            continue
        lines = block.split("<br>")
        next_stage.extend(_pack(lines, "<br>"))

    # 3) –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –¥–ª–∏–Ω–Ω–æ ‚Äî —Ä–µ–∂–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    final: list[str] = []
    sent_re = re.compile(r"(?<=[\.\!\?])\s+")
    for block in next_stage:
        if len(block) <= hard_limit:
            final.append(block)
            continue
        sentences = sent_re.split(block)
        if len(sentences) > 1:
            final.extend(_pack(sentences, " "))
        else:
            # 4) –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –∂—ë—Å—Ç–∫–∞—è –Ω–∞—Ä–µ–∑–∫–∞ –±–µ–∑ —É—á—ë—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            for i in range(0, len(block), hard_limit):
                final.append(block[i : i + hard_limit])

    return [b.strip() for b in final if b.strip()]




async def _download_telegram_file(bot: Bot, file_id: str) -> bytes:
    file_info = await bot.get_file(file_id)
    file_path = getattr(file_info, "file_path", None)
    if not file_path:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Telegram.")
    file_content = await bot.download_file(file_path)
    return file_content.read()


async def _collect_question_attachments(message: Message) -> list[QuestionAttachment]:
    bot = message.bot
    if bot is None:
        raise ValueError("–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.")

    if message.media_group_id:
        raise ValueError("–°–µ–π—á–∞—Å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –≤–º–µ—Å—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º.")

    attachments: list[QuestionAttachment] = []
    size_limit_mb = max(1, QUESTION_ATTACHMENT_MAX_BYTES // (1024 * 1024))

    if message.document:
        document = message.document
        declared_size = document.file_size or 0
        if declared_size > QUESTION_ATTACHMENT_MAX_BYTES:
            raise ValueError(
                f"–§–∞–π–ª '{document.file_name or document.file_unique_id}' –±–æ–ª—å—à–µ {size_limit_mb} –ú–ë."
            )
        data = await _download_telegram_file(bot, document.file_id)
        if len(data) > QUESTION_ATTACHMENT_MAX_BYTES:
            raise ValueError(
                f"–§–∞–π–ª '{document.file_name or document.file_unique_id}' –±–æ–ª—å—à–µ {size_limit_mb} –ú–ë."
            )
        attachments.append(
            QuestionAttachment(
                filename=document.file_name or f"document_{document.file_unique_id}",
                mime_type=document.mime_type or "application/octet-stream",
                data=data,
            )
        )
        return attachments

    if message.photo:
        photo = message.photo[-1]
        declared_size = photo.file_size or 0
        if declared_size > QUESTION_ATTACHMENT_MAX_BYTES:
            raise ValueError(f"–§–æ—Ç–æ –±–æ–ª—å—à–µ {size_limit_mb} –ú–ë.")
        data = await _download_telegram_file(bot, photo.file_id)
        if len(data) > QUESTION_ATTACHMENT_MAX_BYTES:
            raise ValueError(f"–§–æ—Ç–æ –±–æ–ª—å—à–µ {size_limit_mb} –ú–ë.")
        attachments.append(
            QuestionAttachment(
                filename=f"photo_{photo.file_unique_id}.jpg",
                mime_type="image/jpeg",
                data=data,
            )
        )
    return attachments


async def _validate_question_or_reply(message: Message, text: str, user_id: int) -> str | None:
    result = InputValidator.validate_question(text, user_id)
    if not result.is_valid:
        bullet = "\n‚Ä¢ "
        error_msg = bullet.join(result.errors)
        if result.severity == ValidationSeverity.CRITICAL:
            await message.answer(
                f"{Emoji.ERROR} <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏</b>\n\n‚Ä¢ {error_msg}\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å</i>",
                parse_mode=ParseMode.HTML,
            )
        else:
            await message.answer(
                f"{Emoji.WARNING} <b>–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ</b>\n\n‚Ä¢ {error_msg}",
                parse_mode=ParseMode.HTML,
            )
        return None

    if result.warnings:
        bullet = "\n‚Ä¢ "
        logger.warning("Validation warnings for user %s: %s", user_id, bullet.join(result.warnings))

    cleaned = (result.cleaned_data or "").strip()
    if not cleaned:
        await message.answer(
            f"{Emoji.WARNING} <b>–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            parse_mode=ParseMode.HTML,
        )
        return None
    return cleaned


async def _rate_limit_guard(user_id: int, message: Message) -> bool:
    if rate_limiter is None:
        return True
    allowed = await rate_limiter.allow(user_id)
    if allowed:
        return True
    await message.answer(
        f"{Emoji.WARNING} <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        parse_mode=ParseMode.HTML,
    )
    return False




async def _delete_status_message(bot: Bot, chat_id: int, message_id: int, attempts: int = 3) -> bool:
    """Attempt to remove the progress message with basic retry/backoff."""
    for attempt in range(max(1, attempts)):
        try:
            await bot.delete_message(chat_id, message_id)
            return True
        except TelegramRetryAfter as exc:
            await asyncio.sleep(exc.retry_after)
        except TelegramBadRequest as exc:
            low = str(exc).lower()
            if "message to delete not found" in low or "message can't be deleted" in low:
                return False
            if attempt == attempts - 1:
                logger.warning("Unable to delete status message: %s", exc)
            await asyncio.sleep(0.2 * (attempt + 1))
        except Exception as exc:  # noqa: BLE001
            if attempt == attempts - 1:
                logger.warning("Unexpected error deleting status message: %s", exc)
            await asyncio.sleep(0.2 * (attempt + 1))
    return False


async def _start_status_indicator(message):
    status = ProgressStatus(
        message.bot,
        message.chat.id,
        show_checklist=True,
        show_context_toggle=False,   # ‚üµ –ø—Ä—è—á–µ–º –∫–Ω–æ–ø–∫—É
        min_edit_interval=0.9,
        auto_advance_stages=True,
        # percent_thresholds=[1, 10, 30, 50, 70, 85, 95],
    )
    await status.start(auto_cycle=True, interval=2.7)  # approx. 4 min until auto-complete
    return status

async def _stop_status_indicator(status: ProgressStatus | None, ok: bool) -> None:
    if status is None:
        return

    message_id = getattr(status, "message_id", None)

    try:
        if ok:
            if hasattr(status, "_last_edit_ts"):
                status._last_edit_ts = 0.0  # allow immediate update on completion
            await status.complete()
        else:
            await status.fail("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
    except Exception as exc:  # noqa: BLE001
        logger.debug("Failed to finalize status indicator: %s", exc)
        return

    if ok and message_id:
        await _delete_status_message(status.bot, status.chat_id, message_id)

# ============ –§–£–ù–ö–¶–ò–ò –†–ï–ô–¢–ò–ù–ì–ê –ò UI ============


def _format_datetime(ts: int | None, *, default: str = "–ù–∏–∫–æ–≥–¥–∞") -> str:
    if not ts or ts <= 0:
        return default
    try:
        return datetime.fromtimestamp(ts).strftime("%d.%m.%Y %H:%M")
    except Exception:
        return default


def _format_response_time(ms: int) -> str:
    if ms <= 0:
        return "‚Äî"
    if ms < 1000:
        return f"{ms} –º—Å"
    seconds = ms / 1000
    if seconds < 60:
        return f"{seconds:.1f} —Å"
    minutes = seconds / 60
    return f"{minutes:.1f} –º–∏–Ω"


def _format_number(value: int | float) -> str:
    if value is None:
        return "0"
    if isinstance(value, float):
        return f"{value:,.1f}".replace(",", " ")
    return f"{int(value):,}".replace(",", " ")


def _format_trend_value(current: int, previous: int) -> str:
    delta = current - previous
    if previous <= 0:
        if current == 0:
            return "0"
        return f"{current} (‚ñ≤)"
    if delta == 0:
        return f"{current} (=)"
    sign = "+" if delta > 0 else ""
    pct = (delta / previous) * 100
    pct_sign = "+" if pct > 0 else ""
    return f"{current} ({sign}{delta} / {pct_sign}{pct:.0f}%)"


def _normalize_stats_period(days: int) -> int:
    if days <= 0:
        return PERIOD_OPTIONS[0]
    for option in PERIOD_OPTIONS:
        if days <= option:
            return option
    return PERIOD_OPTIONS[-1]


def _build_progress_bar(used: int, total: int) -> str:
    if total is None or total <= 0:
        return "<code>[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà]</code> ‚àû / <b>–ë–µ–∑–ª–∏–º–∏—Ç</b>"

    total = max(total, 0)
    used = max(0, min(used, total))

    ratio = used / total if total else 0.0
    filled = min(PROGRESS_BAR_LENGTH, max(0, int(round(ratio * PROGRESS_BAR_LENGTH))))
    bar = f"[{'‚ñà' * filled}{'‚ñë' * (PROGRESS_BAR_LENGTH - filled)}]"
    bar_markup = f"<code>{bar}</code>"

    remaining = max(0, total - used)
    if total:
        remaining_pct = max(0, min(100, int(round((remaining / total) * 100))))
    else:
        remaining_pct = 0

    return f"{bar_markup} {used}/{total} ¬∑ –æ—Å—Ç–∞–ª–æ—Å—å <b>{remaining}</b> ({remaining_pct}%)"


def _progress_line(label: str, used: int, total: int) -> str:
    return f"<b>{label}</b> {_build_progress_bar(used, total)}"


def _format_stat_row(label: str, value: str) -> str:
    return f"<b>{label}</b> ¬∑ {value}"


def _translate_payment_status(status: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    status_map = {
        "pending": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ",
        "processing": "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞",
        "succeeded": "‚úÖ –£—Å–ø–µ—à–Ω–æ",
        "success": "‚úÖ –£—Å–ø–µ—à–Ω–æ",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
        "failed": "‚ùå –û—à–∏–±–∫–∞",
        "cancelled": "üö´ –û—Ç–º–µ–Ω—ë–Ω",
        "canceled": "üö´ –û—Ç–º–µ–Ω—ë–Ω",
        "refunded": "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç",
        "unknown": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    }
    return status_map.get(status.lower(), status)


def _translate_plan_name(plan_id: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–∑–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞—Ä–∏—Ñ–æ–≤
    plan_map = {
        "basic": "–ë–∞–∑–æ–≤—ã–π",
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        "premium": "–ü—Ä–µ–º–∏—É–º",
        "pro": "–ü—Ä–æ",
        "trial": "–¢—Ä–∏–∞–ª",
    }

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
    period_map = {
        "1m": "1 –º–µ—Å—è—Ü",
        "3m": "3 –º–µ—Å—è—Ü–∞",
        "6m": "6 –º–µ—Å—è—Ü–µ–≤",
        "12m": "1 –≥–æ–¥",
        "1y": "1 –≥–æ–¥",
    }

    # –†–∞–∑–±–∏—Ä–∞–µ–º plan_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, "standard_1m" -> "–°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Ä¢ 1 –º–µ—Å—è—Ü")
    parts = plan_id.split("_")
    if len(parts) >= 2:
        plan_name = plan_map.get(parts[0].lower(), parts[0].capitalize())
        period = period_map.get(parts[1].lower(), parts[1])
        return f"{plan_name} ‚Ä¢ {period}"

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ —Ü–µ–ª–∏–∫–æ–º
    return plan_map.get(plan_id.lower(), plan_id)


def _describe_primary_summary(summary: str, unit: str) -> str:
    if not summary or summary == "‚Äî":
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if "(" in summary and summary.endswith(")"):
        label, count = summary.rsplit("(", 1)
        label = label.strip()
        count = count[:-1].strip()
        if count.isdigit():
            return f"{label} ‚Äî {count} {unit}"
        return f"{label} ‚Äî {count}"
    return summary


def _describe_secondary_summary(summary: str, unit: str) -> str:
    if not summary:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    parts = []
    for raw in summary.split(","):
        item = raw.strip()
        if not item:
            continue
        tokens = item.split()
        if len(tokens) >= 2 and tokens[-1].isdigit():
            count = tokens[-1]
            label = " ".join(tokens[:-1])
            parts.append(f"{label} ‚Äî {count}")
        else:
            parts.append(item)
    if not parts:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    return "; ".join(parts)


def _peak_summary(
    counts: dict[str, int],
    *,
    mapping: dict[str, str] | None = None,
    formatter: Callable[[str], str] | None = None,
    secondary_limit: int = 3,
) -> tuple[str, str]:
    if not counts:
        return "‚Äî", ""

    sorted_items = sorted(counts.items(), key=lambda item: item[1], reverse=True)

    def _render(raw_key: str) -> str:
        label = mapping.get(raw_key, raw_key) if mapping else raw_key
        return formatter(label) if formatter else label

    primary_key, primary_count = sorted_items[0]
    primary_label = _render(str(primary_key))
    primary = f"{primary_label} ({primary_count})"

    secondary_parts: list[str] = []
    for key, count in sorted_items[1:secondary_limit]:
        secondary_parts.append(f"{_render(str(key))} {count}")

    secondary = ", ".join(secondary_parts)
    return primary, secondary

def _top_labels(
    counts: dict[str, int],
    *,
    mapping: dict[str, str] | None = None,
    limit: int = 3,
    formatter: Callable[[str], str] | None = None,
) -> str:
    if not counts:
        return "‚Äî"
    top_items = sorted(counts.items(), key=lambda item: item[1], reverse=True)[:limit]
    labels: list[str] = []
    for key, value in top_items:
        label = mapping.get(key, key) if mapping else key
        if formatter:
            label = formatter(label)
        labels.append(f"{label}√ó{value}")
    return ", ".join(labels)


def _format_hour_label(hour: str) -> str:
    if not hour:
        return hour
    try:
        hour_int = int(hour)
        return f"{hour_int:02d}:00"
    except ValueError:
        return hour


def _format_currency(amount_minor: int | None, currency: str) -> str:
    if amount_minor is None:
        return f"0 {currency.upper()}"
    if currency.upper() == "RUB":
        value = amount_minor / 100
        return f"{value:,.2f} ‚ÇΩ".replace(",", " ")
    return f"{amount_minor} {currency.upper()}"


def _build_recommendations(
    *,
    trial_remaining: int,
    has_subscription: bool,
    subscription_days_left: int,
    period_requests: int,
    previous_requests: int,
) -> list[str]:
    tips: list[str] = []
    if not has_subscription:
        if trial_remaining > 0:
            tips.append(
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è {trial_remaining} –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–∏–∞–ª–∞ –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /buy."
            )
        else:
            tips.append("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî /buy.")
    else:
        if subscription_days_left <= 5:
            tips.append("–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ.")

    if period_requests == 0:
        tips.append("–ó–∞–¥–∞–π—Ç–µ –±–æ—Ç—É –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞—á–Ω–∏—Ç–µ —Å /start –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
    elif period_requests < previous_requests:
        tips.append("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∑–∏–ª–∞—Å—å ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.")

    if not tips:
        tips.append("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å ‚Äî –±–æ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã.")
    return tips[:3]


def create_rating_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëç", callback_data=f"rate_like_{request_id}"),
                InlineKeyboardButton(text="üëé", callback_data=f"rate_dislike_{request_id}"),
            ]
        ]
    )


def _build_ocr_reply_markup(output_format: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∂–∏–º–∞ "—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"."""
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text=f"{Emoji.BACK} –ù–∞–∑–∞–¥", callback_data="back_to_menu"),
            InlineKeyboardButton(text=f"{Emoji.DOCUMENT} –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë", callback_data=f"ocr_upload_more:{output_format}")
        ]]
    )


_BASE_STAGE_LABELS: dict[str, tuple[str, str]] = {
    "start": ("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É", "üöÄ"),
    "downloading": ("–°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç", "‚¨áÔ∏è"),
    "uploaded": ("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω", "üíæ"),
    "processing": ("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç", "‚è≥"),
    "finalizing": ("–§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "üßæ"),
    "completed": ("–ì–æ—Ç–æ–≤–æ", "‚úÖ"),
    "failed": ("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", "‚ùå"),
}

_STAGE_LABEL_OVERRIDES: dict[str, dict[str, tuple[str, str]]] = {
    "summarize": {
        "processing": ("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É", "üß†"),
        "finalizing": ("–°–æ–±–∏—Ä–∞–µ–º —Å–∞–º–º–∞—Ä–∏", "üìÑ"),
    },
    "analyze_risks": {
        "processing": ("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏", "‚ö†Ô∏è"),
        "pattern_scan": ("–ò—â–µ–º —à–∞–±–ª–æ–Ω—ã —Ä–∏—Å–∫–æ–≤", "üß≠"),
        "ai_analysis": ("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç", "ü§ñ"),
        "compliance_check": ("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω–∞", "‚öñÔ∏è"),
        "aggregation": ("–°–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üóÇÔ∏è"),
        "highlighting": ("–ì–æ—Ç–æ–≤–∏–º –ø–æ–¥—Å–≤–µ—Ç–∫—É", "üîç"),
    },
    "lawsuit_analysis": {
        "processing": ("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–∫", "‚öñÔ∏è"),
        "model_request": ("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã", "üîç"),
        "analysis_ready": ("–§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ", "‚úÖ"),
    },
    "anonymize": {
        "processing": ("–ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "üïµÔ∏è"),
        "finalizing": ("–§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é", "üßæ"),
    },
    "translate": {
        "processing": ("–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç", "üåê"),
        "finalizing": ("–ì–æ—Ç–æ–≤–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", "üìù"),
    },
    "ocr": {
        "processing": ("–†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç", "üñ®Ô∏è"),
        "finalizing": ("–û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "üßº"),
        "ocr_page": ("–†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "üìë"),
    },
    "chat": {
        "processing": ("–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç", "üß†"),
        "finalizing": ("–ì–æ—Ç–æ–≤–∏–º —á–∞—Ç—ã", "üí¨"),
        "chunking": ("–†–µ–∂–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –±–ª–æ–∫–∏", "üß©"),
        "indexing": ("–°–æ–∑–¥–∞—ë–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å", "üìö"),
    },
}


def _get_stage_labels(operation: str) -> dict[str, tuple[str, str]]:
    labels = _BASE_STAGE_LABELS.copy()
    labels.update(_STAGE_LABEL_OVERRIDES.get(operation, {}))
    return labels


def _format_risk_count(count: int) -> str:
    count = int(count)
    suffix = "—Ä–∏—Å–∫–æ–≤"
    if count % 10 == 1 and count % 100 != 11:
        suffix = "—Ä–∏—Å–∫"
    elif count % 10 in (2, 3, 4) and count % 100 not in (12, 13, 14):
        suffix = "—Ä–∏—Å–∫–∞"
    return f"–ù–∞–π–¥–µ–Ω–æ {count} {suffix}"


def _format_progress_extras(update: dict[str, Any]) -> str:
    parts: list[str] = []
    if update.get("risks_found") is not None:
        parts.append(_format_risk_count(update["risks_found"]))
    if update.get("violations") is not None:
        parts.append(f"‚öñÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–π: {int(update['violations'])}")
    if update.get("chunks_total") and update.get("chunk_index"):
        parts.append(f"üß© –ë–ª–æ–∫ {int(update['chunk_index'])}/{int(update['chunks_total'])}")
    elif update.get("chunks_total") is not None:
        parts.append(f"üß© –ë–ª–æ–∫–æ–≤: {int(update['chunks_total'])}")
    if update.get("language_pair"):
        parts.append(f"üåê {html_escape(str(update['language_pair']))}")
    if update.get("mode"):
        parts.append(f"‚öôÔ∏è –†–µ–∂–∏–º: {html_escape(str(update['mode']))}")
    if update.get("pages_total") is not None:
        done = int(update.get("pages_done") or 0)
        total = int(update["pages_total"])
        parts.append(f"üìë –°—Ç—Ä–∞–Ω–∏—Ü—ã: {done}/{total}")
    if update.get("masked") is not None:
        parts.append(f"üîê –ó–∞–º–µ–Ω–µ–Ω–æ: {int(update['masked'])}")
    if update.get("words") is not None:
        parts.append(f"üìù –°–ª–æ–≤: {int(update['words'])}")
    if update.get("confidence") is not None:
        parts.append(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {float(update['confidence']):.1f}%")
    if update.get("note"):
        parts.append(f"‚ö†Ô∏è {html_escape(str(update['note']))}")
    return " | ".join(parts)


def _build_completion_payload(op: str, result_obj) -> dict[str, Any]:
    data = getattr(result_obj, "data", None) or {}
    payload: dict[str, Any] = {}
    if op == "analyze_risks":
        pattern = len(data.get("pattern_risks", []) or [])
        ai_risks = len(((data.get("ai_analysis") or {}).get("risks")) or [])
        payload["risks_found"] = pattern + ai_risks
        payload["violations"] = len(((data.get("legal_compliance") or {}).get("violations")) or [])
        payload["overall"] = data.get("overall_risk_level")
    elif op == "summarize":
        summary_struct = ((data.get("summary") or {}).get("structured")) or {}
        payload["words"] = len(((summary_struct.get("summary")) or "").split())
        payload["chunks_total"] = len(summary_struct.get("key_points") or [])
    elif op == "anonymize":
        report = data.get("anonymization_report") or {}
        masked = report.get("processed_items")
        if masked is None:
            stats = report.get("statistics") or {}
            masked = sum(int(v) for v in stats.values()) if stats else 0
        payload["masked"] = int(masked or 0)
    elif op == "translate":
        meta = data.get("translation_metadata") or {}
        payload["language_pair"] = meta.get("language_pair")
        payload["chunks_total"] = meta.get("chunks_processed")
        payload["mode"] = meta.get("mode")
    elif op == "ocr":
        payload["confidence"] = data.get("confidence_score")
        processing = data.get("processing_info") or {}
        payload["pages_total"] = processing.get("pages_processed") or len(data.get("pages", []) or [])
        payload["mode"] = processing.get("file_type")
    elif op == "chat":
        info = data.get("document_info") or {}
        payload["chunks_total"] = info.get("chunks_count")
    return {k: v for k, v in payload.items() if v not in (None, "", [])}


def _make_progress_updater(
    message: Message,
    status_msg: Message,
    *,
    file_name: str,
    operation_name: str,
    file_size_kb: int,
    stage_labels: dict[str, tuple[str, str]],
) -> tuple[Callable[[dict[str, Any]], Awaitable[None]], dict[str, Any]]:
    progress_state: dict[str, Any] = {"percent": 0, "stage": "start", "started_at": time.monotonic()}

    async def send_progress(update: dict[str, Any]) -> None:
        nonlocal progress_state, status_msg
        if not status_msg or not status_msg.message_id:
            return
        stage = str(update.get("stage") or progress_state["stage"] or "processing")
        percent_val = update.get("percent")
        if percent_val is None:
            percent = progress_state["percent"]
        else:
            percent = max(0, min(100, int(round(float(percent_val)))))
        if percent < progress_state["percent"] and stage != "failed":
            percent = progress_state["percent"]

        progress_state["stage"] = stage
        progress_state["percent"] = percent

        label, icon = stage_labels.get(stage, stage_labels.get("processing", ("–û–±—Ä–∞–±–æ—Ç–∫–∞", "‚è≥")))
        extras_line = _format_progress_extras(update)
        elapsed = time.monotonic() - progress_state["started_at"]
        elapsed_text = f"{int(elapsed // 60):02d}:{int(elapsed % 60):02d}"

        lines = [
            f"{icon} {label}: {percent}%",
            f"üóÇÔ∏è –§–∞–π–ª: <b>{html_escape(file_name)}</b>",
            f"üõ†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è: {html_escape(operation_name)}",
            f"üìä –†–∞–∑–º–µ—Ä: {file_size_kb} –ö–ë",
            f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed_text}",
        ]
        if extras_line:
            lines.append(extras_line)

        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text="\n".join(lines),
                parse_mode=ParseMode.HTML,
            )
        except TelegramBadRequest as exc:
            if "message is not modified" not in str(exc).lower():
                logger.debug("Progress edit failed: %s", exc)
        except Exception as exc:  # pragma: no cover
            logger.debug("Unexpected progress update error: %s", exc)

    return send_progress, progress_state


async def send_rating_request(message: Message, request_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª."""
    if not message.from_user:
        return


    try:
        user_id = _ensure_valid_user_id(message.from_user.id, context="send_rating_request")
    except ValidationException as exc:
        logger.debug("Skip rating request due to invalid user id: %s", exc)
        return

    get_rating_fn = _get_safe_db_method("get_rating", default_return=None)
    if get_rating_fn:
        existing_rating = await get_rating_fn(request_id, user_id)
        if existing_rating and getattr(existing_rating, "rating", 0) in (1, -1):
            return

    rating_keyboard = create_rating_keyboard(request_id)
    try:
        await message.answer(
            f"{Emoji.STAR} <b>–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞</b>\n\n"
            "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å!",
            parse_mode=ParseMode.HTML,
            reply_markup=rating_keyboard,
        )
    except Exception as e:
        logger.error(f"Failed to send rating request: {e}")
        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥


# ============ –ö–û–ú–ê–ù–î–´ ============


async def _try_send_welcome_media(
    message: Message,
    caption_html: str,
    keyboard: Optional[InlineKeyboardMarkup],
) -> bool:
    """Send welcome media via cached file id or local file when available."""
    if not WELCOME_MEDIA:
        return False

    media_type = (WELCOME_MEDIA.media_type or "video").lower()
    media_source = None
    supports_streaming = False
    media_caption = caption_html

    if WELCOME_MEDIA.file_id:
        media_source = WELCOME_MEDIA.file_id
        supports_streaming = media_type == "video"
    elif WELCOME_MEDIA.path and WELCOME_MEDIA.path.exists():
        media_source = FSInputFile(WELCOME_MEDIA.path)
        supports_streaming = media_type == "video"
    else:
        return False

    try:
        if media_type == "animation":
            await message.answer_animation(
                animation=media_source,
                caption=media_caption,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
            )
        elif media_type == "photo":
            await message.answer_photo(
                photo=media_source,
                caption=media_caption,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
            )
        else:
            await message.answer_video(
                video=media_source,
                caption=media_caption,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
                supports_streaming=supports_streaming,
            )
        return True
    except Exception as media_error:  # noqa: BLE001
        logger.warning("Failed to send welcome media: %s", media_error)
        return False


def _profile_menu_text(
    user: User | None = None,
    *,
    status_text: str | None = None,
    tariff_text: str | None = None,
    hint_text: str | None = None,
) -> str:
    """Build profile menu header with a compact card-style layout."""

    def _display_name(person: User | None) -> str:
        if person is None:
            return "‚Äî"
        parts = [part.strip() for part in (person.first_name or "", person.last_name or "") if part.strip()]
        if parts:
            return " ".join(parts)
        if person.username:
            return f"@{person.username}"
        try:
            return str(person.id)
        except Exception:
            return "‚Äî"

    name_html = html_escape(_display_name(user))

    card_lines: list[str] = [
        "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
        "‚îÉ   üìá <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>      ‚îÉ",
        "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ",
        "",
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>",
        f"   ‚îî {name_html}",
    ]

    if status_text or tariff_text:
        card_lines.append("")
        card_lines.append("üìä <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>")

    if status_text:
        card_lines.append(f"   ‚îú –°—Ç–∞—Ç—É—Å: {status_text}")
    if tariff_text:
        prefix = "   ‚îî" if not status_text else "   ‚îî"
        card_lines.append(f"{prefix} –¢–∞—Ä–∏—Ñ: {tariff_text}")

    if hint_text:
        card_lines.append("")
        card_lines.append(f"üí° <b>–°–æ–≤–µ—Ç:</b> {html_escape(hint_text)}")

    card_lines.extend([
        "",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        "",
        "üéØ <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>",
        "   ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        "   ‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "   ‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        "",
        "üíº <i>–û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–µ —Å –ò–ò-–ò–í–ê–ù–û–ú ‚Äî /help</i>",
    ])
    return "\n".join(card_lines)


def _profile_menu_keyboard(subscribe_label: str | None = None, *, has_subscription: bool = False) -> InlineKeyboardMarkup:
    if has_subscription:
        change_button = InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="buy_catalog")
        cancel_label = subscribe_label or "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        cancel_button = InlineKeyboardButton(text=cancel_label, callback_data="cancel_subscription")
        return InlineKeyboardMarkup(inline_keyboard=[[change_button], [cancel_button]])

    first_label = subscribe_label or "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=first_label, callback_data="get_subscription"),
            ],
            [
                InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"),
                InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral_program"),
            ],
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main"),
            ],
        ]
    )


def _main_menu_text() -> str:
    return (
        "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        "‚îÉ  üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>    ‚îÉ\n"
        "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
        "‚öñÔ∏è <b>–ò–ò-–ò–í–ê–ù</b> ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç\n\n"
        "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "   ‚Ä¢ –ü–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
        "   ‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n"
        "   ‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )


def _main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data="search_practice"),
            ],
            [
                InlineKeyboardButton(text="üóÇÔ∏è –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data="document_processing"),
            ],
            [
                InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile"),
                InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_info"),
            ],
        ]
    )


async def cmd_start(message: Message):
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    if not message.from_user:
        return

    try:
        user_id = _ensure_valid_user_id(message.from_user.id, context="cmd_start")
    except ValidationException as exc:
        context = ErrorContext(function_name="cmd_start", chat_id=message.chat.id if message.chat else None)
        if error_handler:
            await error_handler.handle_exception(exc, context)
        else:
            logger.warning("Validation error in cmd_start: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    user_session = get_user_session(user_id)  # noqa: F841 (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
    # –û–±–µ—Å–ø–µ—á–∏–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    if db is not None and hasattr(db, "ensure_user"):
        await db.ensure_user(
            user_id,
            default_trial=TRIAL_REQUESTS,
            is_admin=user_id in ADMIN_IDS,
        )
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ

    welcome_raw = f"""<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b>

–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ò–ò-–ò–í–ê–ù</b>, —è –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.

<b>–ß–¢–û –Ø –£–ú–ï–Æ:</b>

<b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã</b>
‚Äî —Å–æ—Å—Ç–∞–≤–ª—è—é –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –¥–∞—é –±—ã—Å—Ç—Ä—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è—é –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏
–∏ ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä¬ª.

<b>–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏</b>
‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∏–ª–ª–∏–æ–Ω—ã –¥–µ–ª –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è: –∫–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –∏ –∫–∞–∫ —Å—É–¥
—Ç—Ä–∞–∫—Ç—É–µ—Ç –Ω–æ—Ä–º—É.

<b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</b>
‚Äî –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é (–≤ —Ç–æ–º —á–∏—Å–ª–µ –≥–æ–ª–æ—Å–æ–º) –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è—é –¥–æ–≥–æ–≤–æ—Ä—ã –Ω–∞ —Ä–∏—Å–∫–∏,
–¥–µ–ª–∞—é —Å–∞–º–º–∞—Ä–∏.

<b>–ü–†–ò–ú–ï–†–´ –û–ë–†–ê–©–ï–ù–ò–ô:</b>
üí¨ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞–∑–∞–ª–∞ –≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ ‚Äî –ø–æ–¥–±–µ—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞
—Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É".
üí¨ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏ 228 –∏ 228.1 –£–ö –†–§".
üí¨ "–ù–∞–π–¥–∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ –≤–∑—ã—Å–∫–∞–Ω–∏—é –Ω–µ—É—Å—Ç–æ–π–∫–∏ —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞".
üí¨ "–ú–æ–≥—É—Ç –ª–∏ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –æ—Å–ø–æ—Ä–∏—Ç—å –∑–∞–≤–µ—â–∞–Ω–∏–µ –ø–æ—Å–ª–µ 6 –º–µ—Å—è—Ü–µ–≤?".

<b> –ü–û–ü–†–û–ë–£–ô–¢–ï –ü–†–Ø–ú–û –°–ï–ô–ß–ê–° </b>üëáüëáüëá"""

    welcome_html = sanitize_telegram_html(welcome_raw)

    main_menu_keyboard = _main_menu_keyboard()

    media_sent = await _try_send_welcome_media(
        message=message,
        caption_html=welcome_html,
        keyboard=None,
    )

    if not media_sent:
        await message.answer(
            welcome_html,
            parse_mode=ParseMode.HTML,
        )

    await message.answer(
        _main_menu_text(),
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu_keyboard,
    )
    logger.info("User %s started bot", message.from_user.id)




async def process_question_with_attachments(message: Message) -> None:
    caption = (message.caption or "").strip()
    if not caption:
        warning_msg = "\n\n".join([
            f"{Emoji.WARNING} <b>–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞</b>",
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.",
        ])
        await message.answer(warning_msg, parse_mode=ParseMode.HTML)
        return

    try:
        attachments = await _collect_question_attachments(message)
    except ValueError as exc:
        error_msg = "\n\n".join([
            f"{Emoji.WARNING} <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ</b>",
            html_escape(str(exc)),
        ])
        await message.answer(error_msg, parse_mode=ParseMode.HTML)
        return

    if not attachments:
        await process_question(message, text_override=caption)
        return

    await process_question(message, text_override=caption, attachments=attachments)


async def process_question(
    message: Message,
    *,
    text_override: str | None = None,
    attachments: Sequence[QuestionAttachment] | None = None,
):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    if not message.from_user:
        return



    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if attachments:
        action = "upload_document"
    else:
        action = "typing"

    await send_typing_once(message.bot, message.chat.id, action)

    try:
        user_id = _ensure_valid_user_id(message.from_user.id, context="process_question")
    except ValidationException as exc:
        context = ErrorContext(
            chat_id=message.chat.id if message.chat else None,
            function_name="process_question",
        )
        if error_handler is not None:
            await error_handler.handle_exception(exc, context)
        else:
            logger.warning("Validation error in process_question: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} <b>–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥.",
            parse_mode=ParseMode.HTML,
        )
        return

    chat_id = message.chat.id
    message_id = message.message_id

    error_context = ErrorContext(
        user_id=user_id, chat_id=chat_id, message_id=message_id, function_name="process_question"
    )

    user_session = get_user_session(user_id)
    question_text = ((text_override if text_override is not None else (message.text or ""))).strip()
    attachments_list = list(attachments or [])
    quota_msg_to_send: str | None = None

    # –ï—Å–ª–∏ –∂–¥—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–µ–π—Ç–∏–Ω–≥—É ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if not hasattr(user_session, "pending_feedback_request_id"):
        user_session.pending_feedback_request_id = None
    if user_session.pending_feedback_request_id is not None:
        await handle_pending_feedback(message, user_session, question_text)
        return

    # –ò–≥–Ω–æ—Ä–∏–º –∫–æ–º–∞–Ω–¥—ã
    if question_text.startswith("/"):
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if error_handler is None:
        raise SystemException("Error handler not initialized", error_context)
    cleaned = await _validate_question_or_reply(message, question_text, user_id)
    if not cleaned:
        return
    question_text = cleaned

    request_text = question_text
    if attachments_list:
        attachment_lines = []
        for idx, item in enumerate(attachments_list, start=1):
            size_kb = max(1, item.size // 1024)
            attachment_lines.append(
                f"{idx}. {item.filename} ({item.mime_type}, {size_kb} KB)"
            )
        request_text = (
            f"{question_text}\n\n[Attachments]\n" + "\n".join(attachment_lines)
        )

    logger.info("Processing question from user %s: %s", user_id, question_text[:100])
    timer = ResponseTimer()
    timer.start()
    use_streaming = USE_STREAMING and not attachments_list

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    status: ProgressStatus | None = None

    ok_flag = False
    request_error_type = None
    stream_manager: StreamManager | None = None
    had_stream_content = False
    stream_final_text: str | None = None
    final_answer_text: str | None = None
    result: dict[str, Any] = {}
    request_start_time = time.time()
    request_record_id: int | None = None

    try:
        # Rate limit
        if not await _rate_limit_guard(user_id, message):
            return

        # –î–æ—Å—Ç—É–ø/–∫–≤–æ—Ç–∞
        quota_text = ""
        quota_is_trial: bool = False
        if access_service is not None:
            decision = await access_service.check_and_consume(user_id)
            if not decision.allowed:
                if decision.has_subscription and decision.subscription_plan:
                    plan_info = _get_plan_pricing(decision.subscription_plan)
                    plan_name = plan_info.plan.name if plan_info else decision.subscription_plan
                    limit_lines = [
                        f"{Emoji.WARNING} <b>–õ–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω</b>",
                        f"–¢–∞—Ä–∏—Ñ: {plan_name}",
                    ]
                    if plan_info is not None:
                        limit_lines.append(
                            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {plan_info.plan.request_quota}/{plan_info.plan.request_quota} –∑–∞–ø—Ä–æ—Å–æ–≤."
                        )
                    limit_lines.append("–û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç ‚Äî /buy.")
                    await message.answer("\n".join(limit_lines), parse_mode=ParseMode.HTML)
                else:
                    await message.answer(
                        f"{Emoji.WARNING} <b>–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ‚Äî /buy.",
                        parse_mode=ParseMode.HTML,
                    )
                return
            if decision.is_admin:
                quota_text = f"\n\n{Emoji.STATS} <b>–°—Ç–∞—Ç—É—Å: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø</b>"
            elif decision.has_subscription:
                plan_info = _get_plan_pricing(decision.subscription_plan) if decision.subscription_plan else None
                plan_name = plan_info.plan.name if plan_info else "–ü–æ–¥–ø–∏—Å–∫–∞"
                parts: list[str] = []
                if decision.subscription_requests_remaining is not None:
                    parts.append(
                        f"{Emoji.STATS} <b>{plan_name}:</b> –æ—Å—Ç–∞–ª–æ—Å—å {decision.subscription_requests_remaining} –∑–∞–ø—Ä–æ—Å–æ–≤"
                    )
                if decision.subscription_until:
                    until_dt = datetime.fromtimestamp(decision.subscription_until)
                    parts.append(f"{Emoji.CALENDAR} <b>–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> {until_dt:%Y-%m-%d}")
                quota_text = "\n\n" + "\n".join(parts) if parts else ""
            elif decision.trial_used is not None and decision.trial_remaining is not None:
                quota_is_trial = True
                quota_msg_core = html_escape(
                    f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {decision.trial_used}/{TRIAL_REQUESTS}. –û—Å—Ç–∞–ª–æ—Å—å: {decision.trial_remaining}"
                )
                quota_msg_to_send = f"{Emoji.STATS} <b>{quota_msg_core}</b>"

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        status = await _start_status_indicator(message)

        ok_flag = False
        request_error_type = None
        stream_manager: StreamManager | None = None
        had_stream_content = False
        stream_final_text: str | None = None
        final_answer_text: str | None = None
        result: dict[str, Any] = {}
        request_start_time = time.time()
        request_record_id: int | None = None

        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö —ç—Ç–∞–ø–æ–≤ (–µ—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)
            if not USE_ANIMATION and hasattr(status, "update_stage"):
                await asyncio.sleep(0.5)
                await status.update_stage(1, f"{Emoji.SEARCH} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
                await asyncio.sleep(1.0)
                await status.update_stage(2, f"{Emoji.LOADING} –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É...")

            # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
            selected_prompt = LEGAL_SYSTEM_PROMPT
            practice_mode = getattr(user_session, "practice_search_mode", False)
            rag_context = ""
            rag_fragments = []

            if practice_mode:
                selected_prompt = JUDICIAL_PRACTICE_SEARCH_PROMPT
                user_session.practice_search_mode = False

                # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è RAG –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
                if judicial_rag is not None and judicial_rag.enabled:
                    try:
                        if hasattr(status, "update_stage"):
                            await status.update_stage(2, f"{Emoji.LOADING} –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –≤ –±–∞–∑–µ...")
                        rag_context, rag_fragments = await judicial_rag.build_context(question_text)
                        if rag_context:
                            logger.info(f"RAG found {len(rag_fragments)} relevant cases for question")
                    except Exception as rag_error:
                        logger.warning(f"RAG search failed: {rag_error}", exc_info=True)

            if text_override is not None and getattr(message, "voice", None):
                selected_prompt = (
                    selected_prompt
                    + "\n\n–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º: —Å–æ—Ö—Ä–∞–Ω–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–ª–æ–∫–æ–≤, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –∏ —É—Ç–æ—á–Ω–∏, —á—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —á–∞—Ç–µ."
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç RAG –≤ –ø—Ä–æ–º–ø—Ç
            if rag_context:
                selected_prompt = (
                    selected_prompt
                    + f"\n\n<judicial_practice_context>\n–í–æ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n{rag_context}\n</judicial_practice_context>\n\n"
                    + "–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Å–≤–æ—ë–º –æ—Ç–≤–µ—Ç–µ, —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–ª–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫."
                )

            # --- –ó–∞–ø—Ä–æ—Å –∫ OpenAI (—Å—Ç—Ä–∏–º/–Ω–µ—Å—Ç—Ä–∏–º) ---
            if openai_service is None:
                raise SystemException("OpenAI service not initialized", error_context)

            if use_streaming and message.bot:
                stream_manager = StreamManager(
                    bot=message.bot,
                    chat_id=message.chat.id,
                    update_interval=1.5,
                    buffer_size=120,
                )
                await stream_manager.start_streaming(f"{Emoji.ROBOT} –û–±–¥—É–º—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
                callback = StreamingCallback(stream_manager)

                try:
                    # 1) –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                    result = await openai_service.ask_legal_stream(
                        selected_prompt, request_text, callback=callback
                    )
                    had_stream_content = bool((stream_manager.pending_text or "").strip())
                    if had_stream_content:
                        stream_final_text = stream_manager.pending_text or ""

                    # 2) –£—Å–ø–µ—Ö, –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª ok –ò–õ–ò —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    ok_flag = bool(isinstance(result, dict) and result.get("ok")) or had_stream_content

                    # 3) –§–æ–ª–±—ç–∫ ‚Äî –µ—Å–ª–∏ —Å—Ç—Ä–∏–º –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
                    if not ok_flag:
                        with suppress(Exception):
                            await stream_manager.stop()
                            if stream_manager.message and message.bot:
                                await message.bot.delete_message(message.chat.id, stream_manager.message.message_id)
                        result = await openai_service.ask_legal(
                            selected_prompt,
                            request_text,
                            attachments=attachments_list or None,
                        )
                        ok_flag = bool(result.get("ok"))

                except Exception as e:
                    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–ø–∞–ª–æ, –Ω–æ –±—É—Ñ–µ—Ä —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∏–º
                    had_stream_content = bool((stream_manager.pending_text or "").strip())
                    if had_stream_content:
                        logger.warning("Streaming failed, but content exists ‚Äî using buffered text: %s", e)
                        stream_final_text = stream_manager.pending_text or ""
                        result = {"ok": True, "text": stream_final_text}
                        ok_flag = True
                    else:
                        with suppress(Exception):
                            await stream_manager.stop()
                        low = str(e).lower()
                        if "rate limit" in low or "quota" in low:
                            raise OpenAIException(str(e), error_context, is_quota_error=True)
                        elif "timeout" in low or "network" in low:
                            raise NetworkException(f"OpenAI network error: {str(e)}", error_context)
                        else:
                            raise OpenAIException(f"OpenAI API error: {str(e)}", error_context)
            else:
                # –ù–µ—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –ø—É—Ç—å
                result = await openai_service.ask_legal(
                    selected_prompt,
                    request_text,
                    attachments=attachments_list or None,
                )
                ok_flag = bool(result.get("ok"))

        except Exception as e:
            request_error_type = type(e).__name__
            if stream_manager:
                with suppress(Exception):
                    await stream_manager.stop()
            raise
        finally:
            # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            with suppress(Exception):
                await _stop_status_indicator(status, ok=ok_flag)

        # ----- –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ -----
        timer.stop()

        if not ok_flag:
            error_text = (isinstance(result, dict) and (result.get("error") or "")) or ""
            logger.error("OpenAI error or empty result for user %s: %s", user_id, error_text)
            await message.answer(
                (
                    f"{Emoji.ERROR} <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.\n\n"
                    f"{Emoji.HELP} <i>–ü–æ–¥—Å–∫–∞–∑–∫–∞</i>: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞"
                    + (f"\n\n<code>{html_escape(error_text[:300])}</code>" if error_text else "")
                ),
                parse_mode=ParseMode.HTML,
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        time_footer_raw = f"{Emoji.CLOCK} –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {timer.get_duration_text()} "

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—É—Ç–µ—Ä —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        sources_footer = ""
        if rag_fragments and practice_mode:
            sources_lines = ["\n\nüìö <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ª–∞ –∏–∑ –±–∞–∑—ã:</b>"]
            for idx, fragment in enumerate(rag_fragments[:5], start=1):
                header = fragment.header or f"–î–µ–ª–æ #{idx}"
                sources_lines.append(f"{idx}. {header}")
            sources_footer = "\n".join(sources_lines)

        text_to_send = ""
        if use_streaming and had_stream_content and stream_manager is not None:
            final_stream_text = stream_final_text or ((isinstance(result, dict) and (result.get("text") or "")) or "")
            combined_stream_text = (final_stream_text.rstrip() + sources_footer + f"\n\n{time_footer_raw}") if final_stream_text else time_footer_raw
            final_answer_text = combined_stream_text
            await stream_manager.finalize(combined_stream_text)
        else:
            text_to_send = (isinstance(result, dict) and (result.get("text") or "")) or ""
            if text_to_send:
                combined_text = f"{text_to_send.rstrip()}{sources_footer}\n\n{time_footer_raw}"
                final_answer_text = combined_text
                await send_html_text(
                    bot=message.bot,
                    chat_id=message.chat.id,
                    raw_text=combined_text,
                    reply_to_message_id=message.message_id,
                )

        if practice_mode:
            practice_excel_path: Path | None = None
            try:
                structured_payload = (
                    result.get("structured") if isinstance(result, dict) and isinstance(result.get("structured"), Mapping) else None
                )
                excel_source = final_answer_text or text_to_send or ""
                if excel_source or rag_fragments:
                    practice_excel_path = build_practice_excel(
                        summary_html=excel_source,
                        fragments=rag_fragments,
                        structured=structured_payload,
                        file_stub="practice_report",
                    )
                    await message.answer_document(
                        FSInputFile(str(practice_excel_path)),
                        caption="üìä –û—Ç—á—ë—Ç –ø–æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ (XLSX)",
                        parse_mode=ParseMode.HTML,
                    )
            except Exception as excel_error:  # noqa: BLE001
                logger.warning("Failed to build practice Excel", exc_info=True)
            finally:
                if practice_excel_path is not None:
                    practice_excel_path.unlink(missing_ok=True)

        # –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ –∫–≤–æ—Ç—É/–ø–æ–¥–ø–∏—Å–∫—É
            with suppress(Exception):
                await message.answer(quota_text, parse_mode=ParseMode.HTML)
        if quota_msg_to_send:
            with suppress(Exception):
                await message.answer(quota_msg_to_send, parse_mode=ParseMode.HTML)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Å–µ—Å—Å–∏–∏/–ë–î
        user_session.add_question_stats(timer.duration)
        if db is not None and hasattr(db, "record_request"):
            with suppress(Exception):
                request_time_ms = int((time.time() - request_start_time) * 1000)
                record_request_fn = _get_safe_db_method("record_request", default_return=None)
                if record_request_fn:
                    request_record_id = await record_request_fn(
                        user_id=user_id,
                        request_type="legal_question",
                        tokens_used=0,
                        response_time_ms=request_time_ms,
                        success=True,
                        error_type=None,
                    )
        if request_record_id:
            if final_answer_text and message.from_user:
                with suppress(Exception):
                    await _ensure_rating_snapshot(request_record_id, message.from_user, final_answer_text)
            with suppress(Exception):
                await send_rating_request(message, request_record_id)

        logger.info("Successfully processed question for user %s in %.2fs", user_id, timer.duration)
        return (isinstance(result, dict) and (result.get("text") or "")) or ""

    except Exception as e:
        # –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if error_handler is not None:
            try:
                custom_exc = await error_handler.handle_exception(e, error_context)
                user_message = getattr(
                    custom_exc, "user_message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception:
                logger.exception("Error handler failed for user %s", user_id)
                user_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            logger.exception("Error processing question for user %s (no error handler)", user_id)
            user_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ –Ω–µ—É–¥–∞—á–µ
        if db is not None and hasattr(db, "record_request"):
            with suppress(Exception):
                request_time_ms = (
                    int((time.time() - request_start_time) * 1000)
                    if "request_start_time" in locals() else 0
                )
                err_type = request_error_type if "request_error_type" in locals() else type(e).__name__
                record_request_fn = _get_safe_db_method("record_request", default_return=None)
                if record_request_fn:
                    await record_request_fn(
                        user_id=user_id,
                        request_type="legal_question",
                        tokens_used=0,
                        response_time_ms=request_time_ms,
                        success=False,
                        error_type=str(err_type),
                    )

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with suppress(Exception):
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"
                f"{user_message}\n\n"
                "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è",
                parse_mode=ParseMode.HTML,
            )


# ============ –ü–û–î–ü–ò–°–ö–ò –ò –ü–õ–ê–¢–ï–ñ–ò ============


def _format_rub(amount_rub: int) -> str:
    return f"{amount_rub:,}".replace(",", " ")


def _plan_stars_amount(plan_info: SubscriptionPlanPricing) -> int:
    amount = int(plan_info.price_stars or 0)
    if amount <= 0:
        cfg = settings()
        amount = convert_rub_to_xtr(
            amount_rub=float(plan_info.plan.price_rub),
            rub_per_xtr=cfg.rub_per_xtr,
            default_xtr=cfg.subscription_price_xtr,
        )
    return max(int(amount), 0)


def _get_plan_pricing(plan_id: str | None) -> SubscriptionPlanPricing | None:
    if not plan_id:
        return DEFAULT_SUBSCRIPTION_PLAN
    return SUBSCRIPTION_PLAN_MAP.get(plan_id)


_catalog_header_lines = [
    "‚ú® <b>–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–ø–∏—Å–æ–∫ AIVAN</b>",
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
    "",
    "üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å–µ–±—è</b>",
    "üéØ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º AI-—é—Ä–∏—Å—Ç–∞",
    "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
    "üìÑ –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "",
]


def _plan_catalog_text() -> str:
    if not SUBSCRIPTION_PLANS:
        return f"{Emoji.WARNING} –ü–æ–¥–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    lines: list[str] = list(_catalog_header_lines)

    for idx, plan_info in enumerate(SUBSCRIPTION_PLANS, 1):
        plan = plan_info.plan
        stars_amount = _plan_stars_amount(plan_info)

        # –†–∞–º–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∞
        lines.append("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")

        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ —Å emoji
        plan_emoji = "üíé" if idx == 1 else "üëë" if idx == 2 else "‚ú®"
        lines.append(f"‚ïë {plan_emoji} <b>{html_escape(plan.name).upper()}</b>")
        lines.append("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        lines.append(f"‚ïë ‚è∞ <b>–°—Ä–æ–∫:</b> {plan.duration_days} –¥–Ω–µ–π")
        lines.append(f"‚ïë üìä <b>–ó–∞–ø—Ä–æ—Å–æ–≤:</b> {plan.request_quota}")

        # –û–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if plan.description:
            lines.append(f"‚ïë üí¨ {html_escape(plan.description)}")

        # –¶–µ–Ω–∞
        price_line = f"‚ïë üí∞ <b>–¶–µ–Ω–∞:</b> {_format_rub(plan.price_rub)} ‚ÇΩ"
        if stars_amount > 0:
            price_line += f" / {stars_amount} ‚≠ê"
        lines.append(price_line)

        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        lines.append("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        lines.append("")

    lines.append("üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>")
    return "\n".join(lines)


_def_no_plans_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
)


def _build_plan_catalog_keyboard() -> InlineKeyboardMarkup:
    if not SUBSCRIPTION_PLANS:
        return _def_no_plans_keyboard

    rows: list[list[InlineKeyboardButton]] = []

    for idx, plan_info in enumerate(SUBSCRIPTION_PLANS, 1):
        stars_amount = _plan_stars_amount(plan_info)

        # Emoji –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
        plan_emoji = "üíé" if idx == 1 else "üëë" if idx == 2 else "‚ú®"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é –º–µ—Ç–∫—É
        price_label = f"{_format_rub(plan_info.plan.price_rub)} ‚ÇΩ"
        if stars_amount > 0:
            price_label += f" ‚Ä¢ {stars_amount} ‚≠ê"

        # –ù–∞–∑–≤–∞–Ω–∏–µ + —Ü–µ–Ω–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        label = f"{plan_emoji} {plan_info.plan.name} ‚Äî {price_label}"

        rows.append(
            [
                InlineKeyboardButton(
                    text=label,
                    callback_data=f"select_plan:{plan_info.plan.plan_id}",
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")])

    return InlineKeyboardMarkup(inline_keyboard=rows)


async def _send_plan_catalog(message: Message, *, edit: bool = False) -> None:
    text = _plan_catalog_text()
    keyboard = _build_plan_catalog_keyboard()
    kwargs = dict(parse_mode=ParseMode.HTML, reply_markup=keyboard)
    if edit:
        try:
            await message.edit_text(text, **kwargs)
        except TelegramBadRequest:
            await message.answer(text, **kwargs)
    else:
        await message.answer(text, **kwargs)


async def _generate_user_stats_response(
    user_id: int,
    days: int,
    *,
    stats: dict[str, Any] | None = None,
    user: Any | None = None,
) -> tuple[str, InlineKeyboardMarkup]:
    if db is None:
        raise RuntimeError("Database is not available")

    normalized_days = _normalize_stats_period(days)
    if user is None:
        user = await db.ensure_user(
            user_id, default_trial=TRIAL_REQUESTS, is_admin=user_id in ADMIN_IDS
        )

    if stats is None:
        stats = await db.get_user_statistics(user_id, days=normalized_days)
    if stats.get("error"):
        raise RuntimeError(stats.get("error"))

    plan_id = stats.get("subscription_plan") or getattr(user, "subscription_plan", None)
    plan_info = _get_plan_pricing(plan_id) if plan_id else None

    subscription_until_ts = int(stats.get("subscription_until", 0) or 0)
    now_ts = int(time.time())
    has_subscription = subscription_until_ts > now_ts
    subscription_days_left = (
        max(0, math.ceil((subscription_until_ts - now_ts) / 86400)) if has_subscription else 0
    )

    subscription_status_text = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    if has_subscription:
        until_text = _format_datetime(subscription_until_ts, default="‚Äî")
        subscription_status_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {until_text} (‚âà{subscription_days_left} –¥–Ω.)"
    elif subscription_until_ts:
        until_text = _format_datetime(subscription_until_ts, default="‚Äî")
        subscription_status_text = f"‚è∞ –ò—Å—Ç–µ–∫–ª–∞ {until_text}"

    trial_remaining = int(stats.get("trial_remaining", getattr(user, "trial_remaining", 0)) or 0)

    if plan_info:
        plan_label = plan_info.plan.name
    elif plan_id:
        plan_label = plan_id
    elif trial_remaining > 0:
        plan_label = "–¢—Ä–∏–∞–ª"
    else:
        plan_label = "‚Äî"
    period_requests = int(stats.get("period_requests", 0) or 0)
    previous_requests = int(stats.get("previous_period_requests", 0) or 0)
    period_successful = int(stats.get("period_successful", 0) or 0)
    previous_successful = int(stats.get("previous_period_successful", 0) or 0)
    period_tokens = int(stats.get("period_tokens", 0) or 0)
    avg_response_time_ms = int(stats.get("avg_response_time_ms", 0) or 0)

    success_rate = (period_successful / period_requests * 100) if period_requests else 0.0

    day_counts = stats.get("day_of_week_counts") or {}
    hour_counts = stats.get("hour_of_day_counts") or {}
    type_stats = stats.get("request_types") or {}

    day_primary, day_secondary = _peak_summary(day_counts, mapping=DAY_NAMES)
    hour_primary, hour_secondary = _peak_summary(
        hour_counts, formatter=_format_hour_label
    )

    last_transaction = stats.get("last_transaction")

    created_at_ts = stats.get("created_at") or getattr(user, "created_at", 0)
    updated_at_ts = stats.get("updated_at") or getattr(user, "updated_at", 0)
    last_request_ts = stats.get("last_request_at", 0)

    subscription_balance_raw = stats.get("subscription_requests_balance")
    if subscription_balance_raw is None:
        subscription_balance_raw = getattr(user, "subscription_requests_balance", None)
    subscription_balance = int(subscription_balance_raw or 0)

    divider = SECTION_DIVIDER

    lines = [
        "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
        f"‚îÉ  {Emoji.STATS} <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>       ‚îÉ",
        "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ",
        "",
        f"üìÖ <i>–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {normalized_days} –¥–Ω–µ–π</i>",
        "",
        divider,
        "",
        "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>",
        "",
        _format_stat_row("  üìÜ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", _format_datetime(created_at_ts)),
        _format_stat_row("  üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å", _format_datetime(last_request_ts)),
        _format_stat_row("  üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", subscription_status_text),
        _format_stat_row("  üè∑Ô∏è –ü–ª–∞–Ω", plan_label),
    ]

    lines.append("")
    lines.append(divider)
    lines.append("")
    lines.append("üîã <b>–õ–∏–º–∏—Ç—ã</b>")
    lines.append("")
    if TRIAL_REQUESTS > 0:
        trial_used = max(0, TRIAL_REQUESTS - trial_remaining)
        lines.append(_progress_line("–¢—Ä–∏–∞–ª", trial_used, TRIAL_REQUESTS))
    else:
        lines.append(_format_stat_row("–¢—Ä–∏–∞–ª", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))

    if plan_info and plan_info.plan.request_quota > 0:
        used = max(0, plan_info.plan.request_quota - subscription_balance)
        lines.append(_progress_line("  üìä –ü–æ–¥–ø–∏—Å–∫–∞", used, plan_info.plan.request_quota))
    elif has_subscription:
        lines.append(_format_stat_row("  üìä –ü–æ–¥–ø–∏—Å–∫–∞", "–±–µ–∑–ª–∏–º–∏—Ç ‚ôæÔ∏è"))

    lines.extend([
        "",
        divider,
        "",
        "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
        "",
        _format_stat_row("  üìù –ó–∞–ø—Ä–æ—Å–æ–≤", _format_trend_value(period_requests, previous_requests)),
        "",
    ])
    if day_primary != "‚Äî":
        lines.append(_format_stat_row("  üìÖ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å", _describe_primary_summary(day_primary, "–æ–±—Ä–∞—â–µ–Ω–∏–π")))
        if day_secondary:
            lines.append(_format_stat_row("  üìÜ –î—Ä—É–≥–∏–µ –¥–Ω–∏", _describe_secondary_summary(day_secondary, "–æ–±—Ä–∞—â–µ–Ω–∏–π")))
    else:
        lines.append(_format_stat_row("  üìÖ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))

    if hour_primary != "‚Äî":
        lines.append(_format_stat_row("  üïê –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å", _describe_primary_summary(hour_primary, "–æ–±—Ä–∞—â–µ–Ω–∏–π")))
        if hour_secondary:
            lines.append(_format_stat_row("  üïë –î—Ä—É–≥–∏–µ —á–∞—Å—ã", _describe_secondary_summary(hour_secondary, "–æ–±—Ä–∞—â–µ–Ω–∏–π")))
    else:
        lines.append(_format_stat_row("  üïê –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))

    lines.append("")
    lines.append(divider)
    lines.append("")
    lines.append("üìã <b>–¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤</b>")
    lines.append("")
    if type_stats:
        top_types = sorted(type_stats.items(), key=lambda item: item[1], reverse=True)[:5]
        for req_type, count in top_types:
            share_pct = (count / period_requests * 100) if period_requests else 0.0
            label = FEATURE_LABELS.get(req_type, req_type)
            lines.append(_format_stat_row(f"  ‚Ä¢ {label}", f"{count} ({share_pct:.0f}%)"))
    else:
        lines.append(_format_stat_row("  ‚Ä¢ –¢–∏–ø—ã", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))

    if last_transaction:
        lines.append("")
        lines.append(divider)
        lines.append("")
        lines.append("üí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂</b>")
        lines.append("")
        currency = last_transaction.get("currency", "RUB") or "RUB"
        amount_minor = last_transaction.get("amount_minor_units")
        if amount_minor is None:
            amount_minor = last_transaction.get("amount")
        lines.append(_format_stat_row("  üí∞ –°—É–º–º–∞", _format_currency(amount_minor, currency)))

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        status = last_transaction.get("status", "unknown")
        translated_status = _translate_payment_status(status)
        lines.append(_format_stat_row("  üìä –°—Ç–∞—Ç—É—Å", translated_status))

        lines.append(_format_stat_row("  üìÖ –î–∞—Ç–∞", _format_datetime(last_transaction.get("created_at"))))
        payload_raw = last_transaction.get("payload")
        if payload_raw:
            try:
                payload = parse_subscription_payload(payload_raw)
                if payload.plan_id:
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                    translated_plan = _translate_plan_name(payload.plan_id)
                    lines.append(_format_stat_row("  üè∑Ô∏è –¢–∞—Ä–∏—Ñ", translated_plan))
            except SubscriptionPayloadError:
                pass

    text = "\n".join(lines)
    keyboard = _build_stats_keyboard(has_subscription)
    return text, keyboard


async def cmd_buy(message: Message):
    await _send_plan_catalog(message, edit=False)


async def handle_ignore_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
    await callback.answer()


async def handle_buy_catalog_callback(callback: CallbackQuery):
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
        return
    await callback.answer()
    await _send_plan_catalog(callback.message, edit=True)


async def handle_get_subscription_callback(callback: CallbackQuery):
    if not callback.from_user or not callback.message:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    try:
        await callback.answer()
        await _send_plan_catalog(callback.message, edit=False)
    except TelegramBadRequest:
        await callback.message.answer(
            f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )



async def handle_cancel_subscription_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    if not callback.from_user or callback.message is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    try:
        await callback.answer()

        if db is None:
            message_text = (
                f"{Emoji.DIAMOND} <b>–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                "–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –∫–æ–º–∞–Ω–¥–∞ /help."
            )
        else:
            user_id = callback.from_user.id
            user_record = await db.ensure_user(
                user_id,
                default_trial=TRIAL_REQUESTS,
                is_admin=user_id in ADMIN_IDS,
            )
            has_subscription = await db.has_active_subscription(user_id)

            if has_subscription:
                cancellation_applied = await db.cancel_subscription(user_id)
                updated_record = await db.get_user(user_id)
                if updated_record is not None:
                    user_record = updated_record
                until_ts = int(getattr(user_record, "subscription_until", 0) or 0)
                until_text = (
                    datetime.fromtimestamp(until_ts).strftime("%d.%m.%Y") if until_ts else "‚Äî"
                )
                if cancellation_applied:
                    message_text = (
                        f"{Emoji.DIAMOND} <b>–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                        f"–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ {until_text}, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è.\n"
                        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤—ã–±–µ—Ä–∏—Ç–µ `üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ`, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø."
                    )
                else:
                    message_text = (
                        f"{Emoji.DIAMOND} <b>–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                        f"–û—Ç–º–µ–Ω–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ {until_text}."
                    )
            else:
                message_text = (
                    f"{Emoji.DIAMOND} <b>–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
                )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–∞—Ä–∏—Ñ–æ–≤", callback_data="buy_catalog")],
                [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
                [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_info")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")],
            ]
        )

        await callback.message.edit_text(
            message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard,
        )

    except Exception as exc:  # noqa: BLE001
        logger.error("Error in handle_cancel_subscription_callback: %s", exc, exc_info=True)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")


async def _send_rub_invoice(message: Message, plan_info: SubscriptionPlanPricing, user_id: int) -> None:
    if not message.bot or not message.chat:
        return
    if not RUB_PROVIDER_TOKEN:
        await message.answer(
            f"{Emoji.WARNING} –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )
        return
    payload = build_subscription_payload(plan_info.plan.plan_id, "rub", user_id)
    cfg = settings()
    amount_value = f"{float(plan_info.plan.price_rub):.2f}"
    receipt_item: dict[str, Any] = {
        "description": plan_info.plan.name[:128],
        "quantity": 1,
        "amount": {
            "value": amount_value,
            "currency": "RUB",
        },
    }
    if cfg.yookassa_vat_code is not None:
        receipt_item["vat_code"] = int(cfg.yookassa_vat_code)
    if cfg.yookassa_payment_mode:
        receipt_item["payment_mode"] = cfg.yookassa_payment_mode
    if cfg.yookassa_payment_subject:
        receipt_item["payment_subject"] = cfg.yookassa_payment_subject

    receipt: dict[str, Any] = {
        "items": [receipt_item],
    }
    if cfg.yookassa_tax_system_code is not None:
        receipt["tax_system_code"] = int(cfg.yookassa_tax_system_code)

    provider_data = json.dumps({"receipt": receipt}, ensure_ascii=False)
    prices = [
        LabeledPrice(
            label=f"{plan_info.plan.name}",
            amount=plan_info.price_rub_kopeks,
        )
    ]
    description = (
        f"–î–æ—Å—Ç—É–ø –∫ –ò–ò-–ò–≤–∞–Ω –Ω–∞ {plan_info.plan.duration_days} –¥–Ω.\n"
        f"–ö–≤–æ—Ç–∞: {plan_info.plan.request_quota} –∑–∞–ø—Ä–æ—Å–æ–≤."
    )
    await message.bot.send_invoice(
        chat_id=message.chat.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ ‚Ä¢ {plan_info.plan.name}",
        description=description,
        payload=payload,
        provider_token=RUB_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        is_flexible=False,
        need_email=cfg.yookassa_require_email,
        need_phone_number=cfg.yookassa_require_phone,
        send_email_to_provider=cfg.yookassa_require_email,
        send_phone_number_to_provider=cfg.yookassa_require_phone,
        provider_data=provider_data,
    )


async def _send_stars_invoice(message: Message, plan_info: SubscriptionPlanPricing, user_id: int) -> None:
    if not message.bot or not message.chat:
        return
    if not STARS_PROVIDER_TOKEN:
        await message.answer(
            f"{Emoji.WARNING} Telegram Stars –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            parse_mode=ParseMode.HTML,
        )
        return
    stars_amount = _plan_stars_amount(plan_info)
    if stars_amount <= 0:
        await message.answer(
            f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ Stars, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.",
            parse_mode=ParseMode.HTML,
        )
        return
    payload = build_subscription_payload(plan_info.plan.plan_id, "stars", user_id)
    prices = [LabeledPrice(label=f"{plan_info.plan.name}", amount=stars_amount)]
    description = (
        f"–û–ø–ª–∞—Ç–∞ –≤ Telegram Stars. –°—Ä–æ–∫: {plan_info.plan.duration_days} –¥–Ω.\n"
        f"–ö–≤–æ—Ç–∞: {plan_info.plan.request_qu–æ—Ç–∞} –∑–∞–ø—Ä–æ—Å–æ–≤."
    )
    await message.bot.send_invoice(
        chat_id=message.chat.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ ‚Ä¢ {plan_info.plan.name} (Stars)",
        description=description,
        payload=payload,
        provider_token=STARS_PROVIDER_TOKEN,
        currency="XTR",
        prices=prices,
        is_flexible=False,
    )


async def _record_pending_transaction(
    *,
    user_id: int,
    provider: str,
    amount_minor_units: int,
    payload: str,
    provider_payment_charge_id: str | None = None,
) -> int:
    if db is None:
        raise RuntimeError("Database not initialized")
    return await db.record_transaction(
        user_id=user_id,
        provider=provider,
        currency="RUB",
        amount=amount_minor_units,
        amount_minor_units=amount_minor_units,
        payload=payload,
        status=TransactionStatus.PENDING,
        provider_payment_charge_id=provider_payment_charge_id,
    )


def _external_payment_keyboard(provider: str, payment_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"verify_payment:{provider}:{payment_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{Emoji.BACK} –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º",
                    callback_data="buy_catalog",
                )
            ],
        ]
    )


async def _send_robokassa_invoice(
    message: Message, plan_info: SubscriptionPlanPricing, user_id: int
) -> None:
    if robokassa_provider is None or not getattr(robokassa_provider, "is_available", False):
        await message.answer(
            f"{Emoji.WARNING} –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ RoboKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )
        return

    amount_minor = plan_info.price_rub_kopeks
    payload = build_subscription_payload(plan_info.plan.plan_id, "robokassa", user_id)
    try:
        transaction_id = await _record_pending_transaction(
            user_id=user_id,
            provider="robokassa",
            amount_minor_units=amount_minor,
            payload=payload,
        )
    except Exception as exc:  # noqa: BLE001
        logger.error("Failed to record RoboKassa transaction: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    try:
        creation = await robokassa_provider.create_invoice(
            amount_rub=float(plan_info.plan.price_rub),
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan_info.plan.name} –Ω–∞ {plan_info.plan.duration_days} –¥–Ω.",
            payload=payload,
            invoice_id=transaction_id,
        )
    except Exception as exc:  # noqa: BLE001
        logger.error("RoboKassa invoice error: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç RoboKassa.",
            parse_mode=ParseMode.HTML,
        )
        with suppress(Exception):
            await db.update_transaction(transaction_id, status=TransactionStatus.FAILED)
        return

    if not creation.ok or not creation.url or not creation.payment_id:
        logger.warning("RoboKassa invoice creation failed: %s", creation.error or creation.raw)
        await message.answer(
            f"{Emoji.WARNING} –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ RoboKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )
        with suppress(Exception):
            await db.update_transaction(transaction_id, status=TransactionStatus.FAILED)
        return

    with suppress(Exception):
        await db.update_transaction(
            transaction_id,
            provider_payment_charge_id=str(creation.payment_id),
        )

    payment_text = (
        f"üè¶ <b>RoboKassa</b>\n\n"
        f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –∫–∞—Ä—Ç–æ–π –∏–ª–∏ —á–µ—Ä–µ–∑ –°–ë–ü.\n"
        f"2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\".\n\n"
        f"{creation.url}"
    )
    await message.answer(
        payment_text,
        parse_mode=ParseMode.HTML,
        reply_markup=_external_payment_keyboard("robokassa", str(creation.payment_id)),
        disable_web_page_preview=True,
    )


async def _send_yookassa_invoice(
    message: Message, plan_info: SubscriptionPlanPricing, user_id: int
) -> None:
    if yookassa_provider is None or not getattr(yookassa_provider, "is_available", False):
        await message.answer(
            f"{Emoji.WARNING} –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )
        return

    amount_minor = plan_info.price_rub_kopeks
    payload = build_subscription_payload(plan_info.plan.plan_id, "yookassa", user_id)
    try:
        transaction_id = await _record_pending_transaction(
            user_id=user_id,
            provider="yookassa",
            amount_minor_units=amount_minor,
            payload=payload,
        )
    except Exception as exc:  # noqa: BLE001
        logger.error("Failed to record YooKassa transaction: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    try:
        creation = await yookassa_provider.create_invoice(
            amount_rub=float(plan_info.plan.price_rub),
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan_info.plan.name} –Ω–∞ {plan_info.plan.duration_days} –¥–Ω.",
            payload=payload,
            metadata={"transaction_id": transaction_id, "plan_id": plan_info.plan.plan_id},
        )
    except Exception as exc:  # noqa: BLE001
        logger.error("YooKassa invoice error: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç YooKassa.",
            parse_mode=ParseMode.HTML,
        )
        with suppress(Exception):
            await db.update_transaction(transaction_id, status=TransactionStatus.FAILED)
        return

    if not creation.ok or not creation.url or not creation.payment_id:
        logger.warning("YooKassa invoice creation failed: %s", creation.error or creation.raw)
        await message.answer(
            f"{Emoji.WARNING} –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )
        with suppress(Exception):
            await db.update_transaction(transaction_id, status=TransactionStatus.FAILED)
        return

    with suppress(Exception):
        await db.update_transaction(
            transaction_id,
            provider_payment_charge_id=str(creation.payment_id),
        )

    payment_text = (
        f"üí≥ <b>YooKassa</b>\n\n"
        f"1. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ YooKassa.\n"
        f"2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\".\n\n"
        f"{creation.url}"
    )
    await message.answer(
        payment_text,
        parse_mode=ParseMode.HTML,
        reply_markup=_external_payment_keyboard("yookassa", str(creation.payment_id)),
        disable_web_page_preview=True,
    )


async def _send_crypto_invoice(message: Message, plan_info: SubscriptionPlanPricing, user_id: int) -> None:
    if crypto_provider is None:
        await message.answer(
            f"{Emoji.IDEA} –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )
        return
    payload = build_subscription_payload(plan_info.plan.plan_id, "crypto", user_id)
    try:
        invoice = await crypto_provider.create_invoice(
            amount_rub=float(plan_info.plan.price_rub),
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan_info.plan.name} –Ω–∞ {plan_info.plan.duration_days} –¥–Ω.",
            payload=payload,
        )
    except Exception as exc:
        logger.warning("Crypto invoice failed: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return
    url = invoice.get("url") if isinstance(invoice, dict) else None
    if invoice and invoice.get("ok") and url:
        await message.answer(
            f"{Emoji.DOWNLOAD} –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π: –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n{url}",
            parse_mode=ParseMode.HTML,
        )
    else:
        await message.answer(
            f"{Emoji.IDEA} –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )


def _plan_details_keyboard(plan_info: SubscriptionPlanPricing) -> tuple[InlineKeyboardMarkup, list[str]]:
    rows: list[list[InlineKeyboardButton]] = []
    unavailable: list[str] = []

    rub_label = f"üí≥ –ö–∞—Ä—Ç–∞ ‚Ä¢ {_format_rub(plan_info.plan.price_rub)} ‚ÇΩ"
    if RUB_PROVIDER_TOKEN:
        rows.append(
            [
                InlineKeyboardButton(
                    text=rub_label,
                    callback_data=f"pay_plan:{plan_info.plan.plan_id}:rub",
                )
            ]
        )
    else:
        unavailable.append("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    stars_amount = _plan_stars_amount(plan_info)
    stars_label = f"‚≠ê Telegram Stars ‚Ä¢ {stars_amount}"
    if stars_amount > 0 and STARS_PROVIDER_TOKEN:
        rows.append(
            [
                InlineKeyboardButton(
                    text=stars_label,
                    callback_data=f"pay_plan:{plan_info.plan.plan_id}:stars",
                )
            ]
        )
    else:
        unavailable.append("‚≠ê Telegram Stars ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    crypto_label = f"ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Ä¢ {_format_rub(plan_info.plan.price_rub)} ‚ÇΩ"
    if crypto_provider is not None:
        rows.append(
            [
                InlineKeyboardButton(
                    text=crypto_label,
                    callback_data=f"pay_plan:{plan_info.plan.plan_id}:crypto",
                )
            ]
        )
    else:
        unavailable.append("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    robo_label = f"üè¶ RoboKassa ‚Ä¢ {_format_rub(plan_info.plan.price_rub)} ‚ÇΩ"
    if robokassa_provider is not None and getattr(robokassa_provider, "is_available", False):
        rows.append(
            [
                InlineKeyboardButton(
                    text=robo_label,
                    callback_data=f"pay_plan:{plan_info.plan.plan_id}:robokassa",
                )
            ]
        )

    yk_label = f"üí≥ YooKassa ‚Ä¢ {_format_rub(plan_info.plan.price_rub)} ‚ÇΩ"
    if yookassa_provider is not None and getattr(yookassa_provider, "is_available", False):
        rows.append(
            [
                InlineKeyboardButton(
                    text=yk_label,
                    callback_data=f"pay_plan:{plan_info.plan.plan_id}:yookassa",
                )
            ]
        )

    rows.append(
        [
            InlineKeyboardButton(
                text=f"{Emoji.BACK} –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º",
                callback_data="buy_catalog",
            )
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=rows), unavailable


async def handle_select_plan_callback(callback: CallbackQuery):
    data = callback.data or ""
    parts = data.split(":", 1)
    if len(parts) != 2:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    plan_id = parts[1]
    plan_info = _get_plan_pricing(plan_id)
    if not plan_info:
        await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    if not callback.message:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    await callback.answer()

    plan = plan_info.plan
    stars_amount = _plan_stars_amount(plan_info)
    lines = [f"{Emoji.DIAMOND} <b>{html_escape(plan.name)}</b>"]
    if plan.description:
        lines.append(f"<i>{html_escape(plan.description)}</i>")

    lines.extend(
        [
            "",
            f"{Emoji.CALENDAR} –ü–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {plan.duration_days} –¥–Ω–µ–π",
            f"{Emoji.DOCUMENT} –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {plan.request_quota}",
        ]
    )

    price_line = f"üí≥ {_format_rub(plan.price_rub)} ‚ÇΩ"
    if stars_amount > 0:
        price_line += f" ‚Ä¢ {stars_amount} ‚≠ê"
    lines.append(price_line)

    lines.extend(
        [
            "",
            f"{Emoji.MAGIC} –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ.",
        ]
    )

    keyboard, unavailable = _plan_details_keyboard(plan_info)
    if unavailable:
        lines.append("")
        lines.append(f"{Emoji.WARNING} –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:")
        lines.extend(f"‚Ä¢ {item}" for item in unavailable)

    text = "\n".join(lines)
    try:
        await callback.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)


async def handle_pay_plan_callback(callback: CallbackQuery):
    data = callback.data or ""
    parts = data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–ª–∞—Ç—ã", show_alert=True)
        return
    _, plan_id, method = parts
    plan_info = _get_plan_pricing(plan_id)
    if not plan_info:
        await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    if not callback.message or not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    await callback.answer()
    user_id = callback.from_user.id
    if method == "rub":
        await _send_rub_invoice(callback.message, plan_info, user_id)
    elif method in {"stars", "xtr"}:
        await _send_stars_invoice(callback.message, plan_info, user_id)
    elif method == "crypto":
        await _send_crypto_invoice(callback.message, plan_info, user_id)
    elif method == "robokassa":
        await _send_robokassa_invoice(callback.message, plan_info, user_id)
    elif method == "yookassa":
        await _send_yookassa_invoice(callback.message, plan_info, user_id)
    else:
        await callback.message.answer("‚ùå –≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")


async def handle_verify_payment_callback(callback: CallbackQuery):
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    data = callback.data or ""
    parts = data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)
        return

    _, provider_code, payment_id = parts
    provider_code = provider_code.lower()
    payment_id = payment_id.strip()
    await callback.answer()

    if not payment_id:
        await callback.message.answer(
            f"{Emoji.WARNING} –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            parse_mode=ParseMode.HTML,
        )
        return

    provider_obj = None
    if provider_code == "robokassa":
        provider_obj = robokassa_provider
    elif provider_code == "yookassa":
        provider_obj = yookassa_provider

    if provider_obj is None:
        await callback.message.answer(
            f"{Emoji.WARNING} –≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            parse_mode=ParseMode.HTML,
        )
        return

    if db is None:
        await callback.message.answer(
            f"{Emoji.WARNING} –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    try:
        transaction = await db.get_transaction_by_provider_charge_id(provider_code, payment_id)
    except Exception as exc:  # noqa: BLE001
        logger.error("Failed to load transaction for provider %s: %s", provider_code, exc)
        transaction = None

    if transaction is None:
        await callback.message.answer(
            f"{Emoji.WARNING} –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã.",
            parse_mode=ParseMode.HTML,
        )
        return

    if transaction.user_id != callback.from_user.id:
        await callback.message.answer(
            f"{Emoji.WARNING} –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –ø–ª–∞—Ç–µ–∂–∞.",
            parse_mode=ParseMode.HTML,
        )
        return

    current_status = TransactionStatus.from_value(transaction.status)
    if current_status == TransactionStatus.COMPLETED:
        await callback.message.answer(
            f"{Emoji.SUCCESS} –ü–ª–∞—Ç—ë–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ /status.",
            parse_mode=ParseMode.HTML,
        )
        return

    poll_method = getattr(provider_obj, "poll_payment", None)
    if poll_method is None:
        await callback.message.answer(
            f"{Emoji.WARNING} –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )
        return

    try:
        result = await poll_method(payment_id)
    except Exception as exc:  # noqa: BLE001
        logger.error("Payment polling failed (%s): %s", provider_code, exc)
        await callback.message.answer(
            f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    if result.status == TransactionStatus.PENDING:
        await callback.message.answer(
            f"{Emoji.WARNING} –ü–ª–∞—Ç—ë–∂ –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            parse_mode=ParseMode.HTML,
        )
        return

    if result.status in {TransactionStatus.CANCELLED, TransactionStatus.FAILED}:
        await db.update_transaction(transaction.id, status=result.status)
        reason = result.description or "–ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–æ–±—â–∏–ª –æ–± –æ—Ç–º–µ–Ω–µ"
        await callback.message.answer(
            f"{Emoji.ERROR} –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞: {html_escape(reason)}",
            parse_mode=ParseMode.HTML,
        )
        return

    payload_raw = transaction.payload or ""
    try:
        payload = parse_subscription_payload(payload_raw)
    except SubscriptionPayloadError as exc:
        logger.error("Failed to parse payload for transaction %s: %s", transaction.id, exc)
        await callback.message.answer(
            f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode=ParseMode.HTML,
        )
        return

    plan_info = _get_plan_pricing(payload.plan_id) if payload.plan_id else DEFAULT_SUBSCRIPTION_PLAN
    if plan_info is None:
        await callback.message.answer(
            f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode=ParseMode.HTML,
        )
        return

    expected_amount = transaction.amount
    if result.paid_amount is not None and expected_amount not in (0, result.paid_amount):
        logger.warning(
            "Paid amount mismatch for transaction %s: expected %s, got %s",
            transaction.id,
            expected_amount,
            result.paid_amount,
        )

    try:
        await db.update_transaction(transaction.id, status=TransactionStatus.COMPLETED)
        new_until, new_balance = await db.apply_subscription_purchase(
            user_id=transaction.user_id,
            plan_id=plan_info.plan.plan_id,
            duration_days=plan_info.plan.duration_days,
            request_quota=plan_info.plan.request_quota,
        )
    except Exception as exc:  # noqa: BLE001
        logger.error("Failed to finalize subscription for transaction %s: %s", transaction.id, exc)
        await callback.message.answer(
            f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    until_dt = datetime.fromtimestamp(new_until)
    balance_text = f"–û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {max(0, new_balance)}" if plan_info.plan.request_quota else "–ë–µ–∑–ª–∏–º–∏—Ç"
    success_text = (
        f"{Emoji.SUCCESS} –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–ü–ª–∞–Ω: {plan_info.plan.name}\n"
        f"–î–æ—Å—Ç—É–ø –¥–æ: {until_dt:%d.%m.%Y %H:%M}\n"
        f"{balance_text}"
    )
    await callback.message.answer(success_text, parse_mode=ParseMode.HTML)

async def cmd_status(message: Message):
    if db is None:
        await message.answer("–°—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    if not message.from_user:
        await message.answer("–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    try:
        user_id = _ensure_valid_user_id(message.from_user.id, context="cmd_status")
    except ValidationException as exc:
        context = ErrorContext(function_name="cmd_status", chat_id=message.chat.id if message.chat else None)
        if error_handler:
            await error_handler.handle_exception(exc, context)
        else:
            logger.warning("Validation error in cmd_status: %s", exc)
        await message.answer(
            f"{Emoji.WARNING} <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    user = await db.ensure_user(
        user_id,
        default_trial=TRIAL_REQUESTS,
        is_admin=user_id in ADMIN_IDS,
    )

    until_ts = int(getattr(user, "subscription_until", 0) or 0)
    now_ts = int(time.time())
    has_active = until_ts > now_ts
    plan_id = getattr(user, "subscription_plan", None)
    plan_info = _get_plan_pricing(plan_id) if plan_id else None
    if plan_info:
        plan_label = plan_info.plan.name
    elif plan_id:
        plan_label = plan_id
    elif has_active:
        plan_label = "–ë–µ–∑–ª–∏–º–∏—Ç"
    else:
        plan_label = "–Ω–µ—Ç"

    if until_ts > 0:
        until_dt = datetime.fromtimestamp(until_ts)
        if has_active:
            left_days = max(0, (until_dt - datetime.now()).days)
            until_text = f"{until_dt:%Y-%m-%d} (‚âà{left_days} –¥–Ω.)"
        else:
            until_text = f"–ò—Å—Ç–µ–∫–ª–∞ {until_dt:%Y-%m-%d}"
    else:
        until_text = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

    quota_balance_raw = getattr(user, "subscription_requests_balance", None)
    quota_balance = int(quota_balance_raw) if quota_balance_raw is not None else None

    lines = [
        f"{Emoji.STATS} <b>–°—Ç–∞—Ç—É—Å</b>",
        "",
        f"ID: <code>{user_id}</code>",
        f"–†–æ–ª—å: {'–∞–¥–º–∏–Ω' if getattr(user, 'is_admin', False) else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}",
        f"–¢—Ä–∏–∞–ª: {getattr(user, 'trial_remaining', 0)} –∑–∞–ø—Ä–æ—Å(–æ–≤)",
        "–ü–æ–¥–ø–∏—Å–∫–∞:",
    ]
    if plan_info or plan_id or until_ts:
        lines.append(f"‚Ä¢ –ü–ª–∞–Ω: {plan_label}")
        lines.append(f"‚Ä¢ –î–æ—Å—Ç—É–ø –¥–æ: {until_text}")
        if plan_info and quota_balance is not None:
            lines.append(f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {max(0, quota_balance)}")
        elif plan_id and quota_balance is not None:
            lines.append(f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {max(0, quota_balance)}")
        elif has_active and not plan_id:
            lines.append("‚Ä¢ –õ–∏–º–∏—Ç: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    else:
        lines.append("‚Ä¢ –ù–µ –∞–∫—Ç–∏–≤–Ω–∞")

    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML)


async def cmd_mystats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if db is None:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    if not message.from_user:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        return

    days = 30
    if message.text:
        parts = message.text.strip().split()
        if len(parts) >= 2:
            try:
                days = int(parts[1])
            except ValueError:
                days = 30

    days = _normalize_stats_period(days)

    try:
        stats_text, keyboard = await _generate_user_stats_response(message.from_user.id, days)
        await message.answer(stats_text, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    except Exception as exc:  # noqa: BLE001
        logger.error("Error in cmd_mystats: %s", exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def _download_voice_to_temp(message: Message) -> Path:
    """Download Telegram voice message into a temporary file."""
    if not message.bot:
        raise RuntimeError("Bot instance is not available for voice download")
    if not message.voice:
        raise RuntimeError("Voice payload is missing")

    file_info = await message.bot.get_file(message.voice.file_id)
    file_path = file_info.file_path
    if not file_path:
        raise RuntimeError("Telegram did not return a file path for the voice message")

    temp = tempfile.NamedTemporaryFile(suffix=".ogg", delete=False)
    temp_path = Path(temp.name)
    temp.close()

    file_stream = await message.bot.download_file(file_path)
    try:
        temp_path.write_bytes(file_stream.read())
    finally:
        close_method = getattr(file_stream, "close", None)
        if callable(close_method):
            close_method()

    return temp_path


async def process_voice_message(message: Message):
    """Handle incoming Telegram voice messages via STT -> processing -> TTS."""
    if not message.voice:
        return

    # –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ"
    try:
        voice_enabled = settings().voice_mode_enabled
    except RuntimeError:
        voice_enabled = bool(getattr(config, "voice_mode_enabled", False))

    if audio_service is None or not voice_enabled:
        await message.answer("Voice mode is currently unavailable. Please send text.")
        return

    if not message.bot:
        await message.answer("Unable to access bot context for processing the voice message.")
        return

    temp_voice_path: Path | None = None
    tts_paths: list[Path] = []

    try:
        await audio_service.ensure_short_enough(message.voice.duration)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        async with typing_action(message.bot, message.chat.id, "record_voice"):
            temp_voice_path = await _download_voice_to_temp(message)
            transcript = await audio_service.transcribe(temp_voice_path)

        preview = html_escape(transcript[:500])
        if len(transcript) > 500:
            preview += "..."
        await message.answer(
            f"{Emoji.ROBOT} Recognized: <i>{preview}</i>",
            parse_mode=ParseMode.HTML,
        )

        response_text = await process_question(message, text_override=transcript)
        if not response_text:
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ" –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS
        async with typing_action(message.bot, message.chat.id, "upload_voice"):
            try:
                tts_paths = await audio_service.synthesize(response_text, prefer_male=True)
            except Exception as tts_error:
                logger.warning("Text-to-speech failed: %s", tts_error)
                return

            if not tts_paths:
                logger.warning("Text-to-speech returned no audio chunks")
                return

            for idx, generated_path in enumerate(tts_paths):
                caption = VOICE_REPLY_CAPTION if idx == 0 else None
                await message.answer_voice(
                    FSInputFile(generated_path),
                    caption=caption,
                    parse_mode=ParseMode.HTML if caption else None,
                )

    except ValueError as duration_error:
        logger.warning("Voice message duration exceeded: %s", duration_error)
        await message.answer(
            f"{Emoji.WARNING} Voice message is too long. Maximum duration is {audio_service.max_duration_seconds} seconds.",
            parse_mode=ParseMode.HTML,
        )
    except Exception as exc:
        logger.exception("Failed to process voice message: %s", exc)
        await message.answer(
            f"{Emoji.ERROR} Could not process the voice message. Please try again later.",
            parse_mode=ParseMode.HTML,
        )
    finally:
        with suppress(Exception):
            if temp_voice_path:
                temp_voice_path.unlink()
        with suppress(Exception):
            for generated_path in tts_paths:
                generated_path.unlink()


# ============ –°–ò–°–¢–ï–ú–ê –†–ï–ô–¢–ò–ù–ì–ê ============

async def handle_ocr_upload_more(callback: CallbackQuery, state: FSMContext):
    """Prepare state for another "—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞" upload after a result message."""
    output_format = "txt"
    data = callback.data or ""
    if ":" in data:
        _, payload = data.split(":", 1)
        if payload:
            output_format = payload
    try:
        with suppress(Exception):
            await callback.message.edit_reply_markup()

        await state.clear()
        await state.update_data(
            document_operation="ocr",
            operation_options={"output_format": output_format},
        )
        await state.set_state(DocumentProcessingStates.waiting_for_document)

        await callback.message.answer(
            f"{Emoji.DOCUMENT} –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ \"—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\".",
            parse_mode=ParseMode.HTML,
        )
        await callback.answer("–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    except Exception as exc:
        logger.error(f"Error in handle_ocr_upload_more: {exc}", exc_info=True)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É", show_alert=True)


async def handle_pending_feedback(message: Message, user_session: UserSession, text_override: str | None = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏"""
    if not message.from_user:
        return

    feedback_source = text_override if text_override is not None else (message.text or "")
    if not feedback_source or not user_session.pending_feedback_request_id:
        return

    try:
        user_id = _ensure_valid_user_id(message.from_user.id, context="handle_pending_feedback")
    except ValidationException as exc:
        logger.warning("Ignore feedback: invalid user id (%s)", exc)
        user_session.pending_feedback_request_id = None
        return

    request_id = user_session.pending_feedback_request_id
    feedback_text = feedback_source.strip()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    user_session.pending_feedback_request_id = None

    add_rating_fn = _get_safe_db_method("add_rating", default_return=False)
    if not add_rating_fn:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –æ—Ç–∑—ã–≤–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    get_rating_fn = _get_safe_db_method("get_rating", default_return=None)
    existing_rating = await get_rating_fn(request_id, user_id) if get_rating_fn else None

    rating_value = -1
    answer_snapshot = ""
    if existing_rating:
        if existing_rating.rating not in (None, 0):
            rating_value = existing_rating.rating
        if getattr(existing_rating, 'answer_text', None):
            answer_snapshot = existing_rating.answer_text or ""

    if not answer_snapshot:
        session_snapshot = getattr(user_session, "last_answer_snapshot", None)
        if session_snapshot:
            answer_snapshot = session_snapshot

    username_display = _format_user_display(message.from_user)

    success = await add_rating_fn(
        request_id,
        user_id,
        rating_value,
        feedback_text,
        username=username_display,
        answer_text=answer_snapshot,
    )
    if success:
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤!\n\n"
            "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ª—É—á—à–µ.",
            parse_mode=ParseMode.HTML,
        )
        logger.info(
            "Received feedback for request %s from user %s: %s",
            request_id,
            user_id,
            feedback_text,
        )
        user_session.last_answer_snapshot = None
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤")


async def handle_rating_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if not callback.data or not callback.from_user:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    try:
        user_id = _ensure_valid_user_id(callback.from_user.id, context="handle_rating_callback")
    except ValidationException as exc:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id in rating callback: %s", exc)
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
        return

    user_session = get_user_session(user_id)

    try:
        parts = callback.data.split("_")
        if len(parts) != 3:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        action = parts[1]
        if action not in {"like", "dislike"}:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        request_id = int(parts[2])
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    get_rating_fn = _get_safe_db_method("get_rating", default_return=None)
    existing_rating = await get_rating_fn(request_id, user_id) if get_rating_fn else None

    if existing_rating and existing_rating.rating not in (None, 0):
        await callback.answer("–ü–æ —ç—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        return

    add_rating_fn = _get_safe_db_method("add_rating", default_return=False)
    if not add_rating_fn:
        await callback.answer("–°–µ—Ä–≤–∏—Å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    rating_value = 1 if action == "like" else -1
    answer_snapshot = ""
    if existing_rating and getattr(existing_rating, 'answer_text', None):
        answer_snapshot = existing_rating.answer_text or ""
    if not answer_snapshot:
        session_snapshot = getattr(user_session, "last_answer_snapshot", None)
        if session_snapshot:
            answer_snapshot = session_snapshot
    username_display = _format_user_display(callback.from_user)

    success = await add_rating_fn(
        request_id,
        user_id,
        rating_value,
        None,
        username=username_display,
        answer_text=answer_snapshot,
    )
    if not success:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
        return

    if action == "like":
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –†–∞–¥—ã, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–µ–∑–Ω—ã–º.")
        await callback.message.edit_text(
            "üí¨ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b> ‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ–ª–µ–∑–Ω–æ–µ",
            parse_mode=ParseMode.HTML,
        )
        return

    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    feedback_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    callback_data=f"feedback_{request_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data=f"skip_feedback_{request_id}",
                )
            ],
        ]
    )
    await callback.message.edit_text(
        "üí¨ <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?</b>\n\n–í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ:",
        reply_markup=feedback_keyboard,
        parse_mode=ParseMode.HTML,
    )


async def handle_feedback_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if not callback.data or not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        user_id = _ensure_valid_user_id(callback.from_user.id, context="handle_feedback_callback")
    except ValidationException as exc:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id in feedback callback: %s", exc)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return

    try:
        data = callback.data

        if data.startswith("feedback_"):
            action = "feedback"
            request_id = int(data.removeprefix("feedback_"))
        elif data.startswith("skip_feedback_"):
            action = "skip"
            request_id = int(data.removeprefix("skip_feedback_"))
        else:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        if action == "skip":
            await callback.message.edit_text(
                "üí¨ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b> üëé –û—Ç–º–µ—á–µ–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è", parse_mode=ParseMode.HTML
            )
            await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
            return

        # action == "feedback"
        user_session = get_user_session(user_id)
        if not hasattr(user_session, "pending_feedback_request_id"):
            user_session.pending_feedback_request_id = None
        user_session.pending_feedback_request_id = request_id

        await callback.message.edit_text(
            "üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n\n"
            "<i>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>",
            parse_mode=ParseMode.HTML,
        )
        await callback.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

    except Exception as e:
        logger.error(f"Error in handle_feedback_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_search_practice_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏'"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        await callback.answer()

        instruction_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
                [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
            ]
        )

        await callback.message.edit_text(
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
            "‚îÉ  üîç <b>–ü–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏</b>  ‚îÉ\n"
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
            "‚öñÔ∏è <i>–ù–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É\n"
            "   –¥–ª—è –≤–∞—à–µ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞</i>\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìã <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n\n"
            "üí° <b>–ö—Ä–∞—Ç–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>\n"
            "   ‚îî 2 —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É\n"
            "   ‚îî –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏\n\n"
            "üìä <b>–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</b>\n"
            "   ‚îî 6+ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
            "   ‚îî –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üìÑ <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n"
            "   ‚îî –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
            "   ‚îî –° —É—á–µ—Ç–æ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚úçÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å\n"
            "   —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=instruction_keyboard,
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_session = get_user_session(callback.from_user.id)
        if not hasattr(user_session, "practice_search_mode"):
            user_session.practice_search_mode = False
        user_session.practice_search_mode = True

    except Exception as e:
        logger.error(f"Error in handle_search_practice_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_my_profile_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        await callback.answer()

        status_text = None
        tariff_text = None
        hint_text = None
        subscribe_label = "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        has_subscription = False

        if db is not None:
            try:
                user_id = callback.from_user.id
                user_record = await db.ensure_user(
                    user_id,
                    default_trial=TRIAL_REQUESTS,
                    is_admin=user_id in ADMIN_IDS,
                )
                has_subscription = await db.has_active_subscription(user_id)
                cancel_flag = bool(getattr(user_record, "subscription_cancelled", 0))

                plan_id = getattr(user_record, "subscription_plan", None)
                plan_info = _get_plan_pricing(plan_id) if plan_id else None
                if plan_info:
                    tariff_text = plan_info.plan.name
                elif plan_id and plan_id not in (None, "‚Äî"):
                    tariff_text = str(plan_id)
                else:
                    tariff_text = "—Ç—Ä–∏–∞–ª"

                if has_subscription and getattr(user_record, "subscription_until", 0):
                    until_dt = datetime.fromtimestamp(int(user_record.subscription_until))
                    purchase_ts = int(getattr(user_record, "subscription_last_purchase_at", 0) or 0)
                    if purchase_ts:
                        purchase_dt = datetime.fromtimestamp(purchase_ts)
                        status_text = (
                            f"–ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ {purchase_dt:%d.%m.%y} (–¥–æ—Å—Ç—É–ø –¥–æ {until_dt:%d.%m.%y})"
                        )
                    else:
                        status_text = f"–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {until_dt:%d.%m.%y}"

                    if cancel_flag:
                        hint_text = "–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚Äî –¥–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è."
                        subscribe_label = "‚úÖ –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞"
                    else:
                        hint_text = "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç ‚Äî –∫–æ–º–∞–Ω–¥–∞ /buy"
                        subscribe_label = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
                else:
                    trial_remaining = int(getattr(user_record, "trial_remaining", 0) or 0)
                    status_text = "‚≠ï <i>–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</i>"
                    tariff_text = f" <b>–¢—Ä–∏–∞–ª</b> ‚Ä¢ <i>{trial_remaining} –∑–∞–ø—Ä–æ—Å–æ–≤</i>"
                    hint_text = ""
            except Exception as profile_error:  # pragma: no cover - fallback
                logger.debug("Failed to build profile header: %s", profile_error, exc_info=True)

        await callback.message.edit_text(
            _profile_menu_text(
                callback.from_user,
                status_text=status_text,
                tariff_text=tariff_text,
                hint_text=hint_text,
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=_profile_menu_keyboard(subscribe_label, has_subscription=has_subscription),
        )

    except Exception as e:
        logger.error(f"Error in handle_my_profile_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_my_stats_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    if not callback.from_user or callback.message is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    try:
        await callback.answer()

        if db is None:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                parse_mode=ParseMode.HTML,
                reply_markup=_profile_menu_keyboard(),
            )
            return

        user_id = callback.from_user.id
        user = await db.ensure_user(
            user_id, default_trial=TRIAL_REQUESTS, is_admin=user_id in ADMIN_IDS
        )
        stats = await db.get_user_statistics(user_id, days=30)

        try:
            status_text, keyboard = await _generate_user_stats_response(
                user_id,
                days=30,
                stats=stats,
                user=user,
            )
        except RuntimeError as stats_error:
            logger.error("Failed to build user stats: %s", stats_error)
            await callback.message.edit_text(
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                parse_mode=ParseMode.HTML,
                reply_markup=_profile_menu_keyboard(),
            )
            return

        def generate_activity_graph(daily_data: Sequence[int]) -> tuple[str, int]:
            window = list(daily_data)[-7:]
            if not window:
                return "", 0
            max_val = max(window)
            if max_val <= 0:
                return "‚ñÅ" * len(window), sum(window)
            bars = ["‚ñÅ", "‚ñÇ", "‚ñÉ", "‚ñÑ", "‚ñÖ", "‚ñÜ", "‚ñá", "‚ñà"]
            graph = "".join(
                bars[min(int((value / max_val) * (len(bars) - 1)), len(bars) - 1)]
                if value > 0
                else bars[0]
                for value in window
            )
            return graph, sum(window)

        def format_feature_name(feature: str | None) -> str:
            feature_names = {
                "legal_question": "‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                "document_processing": "üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "judicial_practice": "üìö –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
                "document_draft": "üìù –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "voice_message": "üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                "ocr_processing": "üîç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
                "document_chat": "üí¨ –ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º",
            }
            if not feature:
                return "–î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
            return feature_names.get(feature, feature)

        extra_sections: list[str] = []
        divider = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

        def append_section(title: str) -> None:
            if not extra_sections:
                extra_sections.append(divider)
            extra_sections.append(title)

        daily_activity = stats.get("daily_activity") or []
        activity_graph, activity_total = generate_activity_graph(daily_activity)
        if activity_graph:
            append_section("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (7 –¥–Ω.)")
            extra_sections.append(f"‚Ä¢ {activity_graph} ‚Äî {activity_total} –∑–∞–ø—Ä–æ—Å–æ–≤")

        feature_stats = stats.get("feature_stats") or []
        if feature_stats:
            append_section("‚ú® –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
            for feature_data in feature_stats[:5]:
                feature_name = format_feature_name(feature_data.get("feature"))
                count = feature_data.get("count", 0)
                extra_sections.append(f"‚Ä¢ {feature_name}: {count}")

        if extra_sections:
            status_text = f"{status_text}\n\n" + "\n".join(extra_sections)

        await callback.message.edit_text(
            status_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard,
        )

    except Exception as e:
        logger.error(f"Error in handle_my_stats_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


        await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert=True)

async def handle_back_to_main_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        await callback.answer()

        await callback.message.edit_text(
            _main_menu_text(),
            parse_mode=ParseMode.HTML,
            reply_markup=_main_menu_keyboard(),
        )

    except Exception as e:
        logger.error(f"Error in handle_back_to_main_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_referral_program_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        await callback.answer()

        if db is None:
            await callback.message.edit_text(
                "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                parse_mode=ParseMode.HTML,
                reply_markup=_profile_menu_keyboard(),
            )
            return

        user_id = callback.from_user.id
        user = await db.get_user(user_id)

        if not user:
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                parse_mode=ParseMode.HTML,
                reply_markup=_profile_menu_keyboard(),
            )
            return

        referral_code: str | None = None
        stored_code = (getattr(user, 'referral_code', None) or '').strip()

        if stored_code and stored_code != 'SYSTEM_ERROR':
            referral_code = stored_code
        else:
            try:
                generated_code = (await db.generate_referral_code(user_id) or '').strip()
            except Exception as e:
                logger.error(f"Error with referral code: {e}")
                generated_code = ''
            if generated_code and generated_code != 'SYSTEM_ERROR':
                referral_code = generated_code
                try:
                    setattr(user, 'referral_code', referral_code)
                except Exception:
                    pass
            else:
                referral_code = None

        referral_link, share_code = _build_referral_link(referral_code)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        try:
            referrals = await db.get_user_referrals(user_id)
        except Exception as e:
            logger.error(f"Error getting referrals: {e}")
            referrals = []

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_referrals = len(referrals)
        active_referrals = sum(1 for ref in referrals if ref.get('has_active_subscription', False))

        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        referral_bonus_days = getattr(user, 'referral_bonus_days', 0)
        referrals_count = getattr(user, 'referrals_count', 0)

        referral_lines: list[str] = [
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
            "‚îÉ  üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>  ‚îÉ",
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ",
            "",
            "üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã</b>",
            "",
            f"  üéâ –ë–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π: <b>{referral_bonus_days}</b>",
            f"  üë´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>",
            f"  ‚úÖ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{active_referrals}</b>",
            "",
        ]

        if referral_link:
            referral_lines.extend([
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                "",
                "üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>",
                "",
                f"<code>{referral_link}</code>",
                "",
            ])
        elif share_code:
            safe_code = html_escape(share_code)
            referral_lines.extend([
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                "",
                "üîó <b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥</b>",
                "",
                f"<code>ref_{safe_code}</code>",
                "",
                "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏\n—É–∫–∞–∑–∞–ª–∏ –∫–æ–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞</i>",
                "",
            ])
        else:
            referral_lines.extend([
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                "",
                "‚ö†Ô∏è <b>–°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>",
                "",
                "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å\n–≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                "",
            ])

        referral_lines.extend([
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "",
            "üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>",
            "",
            "  1Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏",
            "  2Ô∏è‚É£ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ 3 –¥–Ω—è",
            "  3Ô∏è‚É£ –î—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç —Å–∫–∏–¥–∫—É 20%",
            "",
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "",
            "üìà <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>",
            "",
        ])

        if referrals:
            referral_lines.append(f"  üìä –í—Å–µ–≥–æ: <b>{total_referrals}</b>")
            referral_lines.append(f"  üíé –° –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{active_referrals}</b>")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            recent_referrals = referrals[:5]
            for ref in recent_referrals:
                join_date = datetime.fromtimestamp(ref['joined_at']).strftime('%d.%m.%Y')
                status = "üíé" if ref['has_active_subscription'] else "üë§"
                referral_lines.append(f"{status} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{ref['user_id']} - {join_date}")
        else:
            referral_lines.append("‚Ä¢ –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç")

        referral_text = "\n".join(referral_lines)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons: list[list[InlineKeyboardButton]] = []
        if share_code:
            copy_text = "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" if referral_link else "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=copy_text,
                    callback_data=f"copy_referral_{share_code}",
                )
            ])

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="my_profile")
        ])

        referral_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            referral_text,
            parse_mode=ParseMode.HTML,
            reply_markup=referral_keyboard
        )

    except Exception as e:
        logger.error(f"Error in handle_referral_program_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_copy_referral_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ callback_data
        callback_data = callback.data
        if callback_data and callback_data.startswith("copy_referral_"):
            referral_code = callback_data.replace("copy_referral_", "")
            referral_link, share_code = _build_referral_link(referral_code)

            if referral_link:
                await callback.answer(f"üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!\n{referral_link}", show_alert=True)
                return
            if share_code:
                await callback.answer(f"üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!\nref_{share_code}", show_alert=True)
                return

            await callback.answer("‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return

        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞")

    except Exception as e:
        logger.error(f"Error in handle_copy_referral_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_prepare_documents_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        await callback.answer()

        await callback.message.answer(
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
            "‚îÉ  üìÑ <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>  ‚îÉ\n"
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
            "üìë <i>–ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ\n"
            "   –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</i>\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìã <b>–¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>\n\n"
            "‚öñÔ∏è <b>–ò—Å–∫–æ–≤—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n"
            "   ‚îî –° —É—á–µ—Ç–æ–º —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n"
            "üìù <b>–•–æ–¥–∞—Ç–∞–π—Å—Ç–≤–∞</b>\n"
            "   ‚îî –ü—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n\n"
            "üìß <b>–ñ–∞–ª–æ–±—ã –∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è</b>\n"
            "   ‚îî –ù–∞ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
            "üìú <b>–î–æ–≥–æ–≤–æ—Ä—ã –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</b>\n"
            "   ‚îî –ü—Ä–∞–≤–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚úçÔ∏è <i>–û–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω\n"
            "   –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –¥–µ–ª–∞...</i>",
            parse_mode=ParseMode.HTML,
        )

        # –†–µ–∂–∏–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        user_session = get_user_session(callback.from_user.id)
        if not hasattr(user_session, "document_preparation_mode"):
            user_session.document_preparation_mode = False
        user_session.document_preparation_mode = True

    except Exception as e:
        logger.error(f"Error in handle_prepare_documents_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_help_info_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        await callback.answer()

        support_text = (
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
            "‚îÉ  üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>  ‚îÉ\n"
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
            "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n"
            "   ‚îú Telegram: @support_username\n"
            "   ‚îî Email: support@example.com\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
            "ü§ñ <b>–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</b>\n"
            "   ‚îú –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
            "   ‚îî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n\n"
            "üìÑ <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n"
            "   ‚îú –§–æ—Ä–º–∞—Ç—ã: PDF, DOCX, DOC, TXT\n"
            "   ‚îú –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë\n"
            "   ‚îî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞\n\n"
            "‚è≥ <b>–î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞</b>\n"
            "   ‚îú –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: 2-3 –º–∏–Ω—É—Ç—ã\n"
            "   ‚îî –ë–æ–ª—å—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: –¥–æ 5 –º–∏–Ω—É—Ç\n\n"
            "üí¨ <b>–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É?</b>\n"
            "   ‚îú –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\n"
            "   ‚îú –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\n"
            "   ‚îî –ë–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã\n\n"
            "üîÑ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É?</b>\n"
            "   ‚îú –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
            "   ‚îî –ò–ª–∏ –∫–Ω–æ–ø–∫—É \"–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\"\n\n"
            "üí∞ <b>–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å?</b>\n"
            "   ‚îî –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª \"–ü—Ä–æ—Ñ–∏–ª—å\"\n\n"
            "üéØ <b>–ö–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–Ω–∏–º–∞–µ—Ç –±–æ—Ç?</b>\n"
            "   ‚îú –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã\n"
            "   ‚îú –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤\n"
            "   ‚îú –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
            "   ‚îî –ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º –∏ –∑–∞–¥–∞—á–∞–º–∏\n\n"
            "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?</b>\n"
            "   ‚îú –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã\n"
            "   ‚îî –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        )

        await callback.message.answer(support_text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

        logger.info(f"Support info requested by user {callback.from_user.id}")

    except Exception as e:
        logger.error(f"Error in handle_help_info_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ò–°–¢–ï–ú–´ –î–û–ö–£–ú–ï–ù–¢–û–û–ë–û–†–û–¢–ê ============


async def handle_doc_draft_start(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    if not callback.from_user:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing indicator –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        await send_typing_once(callback.bot, callback.message.chat.id, "typing")

        await state.clear()
        await state.set_state(DocumentDraftStates.waiting_for_request)

        intro_text = (
            f"‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n"
            f"<code>{'‚îÅ' * 35}</code>\n\n"

            f"üìã <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n\n"

            f"<b>1Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É</b>\n"
            f"   ‚îî –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω\n\n"

            f"<b>2Ô∏è‚É£ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã</b>\n"
            f"   ‚îî –Ø —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏\n\n"

            f"<b>3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ DOCX</b>\n"
            f"   ‚îî –ì–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞ –º–∏–Ω—É—Ç—É\n\n"

            f"<code>{'‚îÅ' * 35}</code>\n\n"

            f"üí° <i>–°–æ–≤–µ—Ç: –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ ‚Äî "
            f"—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞</i>\n\n"

            f"<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
            f"‚Ä¢ –ò—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –¥–æ–ª–≥–∞\n"
            f"‚Ä¢ –î–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥\n"
            f"‚Ä¢ –ñ–∞–ª–æ–±–∞ –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä\n\n"

            f"üëá <b>–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å:</b>"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=f"{Emoji.BACK} –û—Ç–º–µ–Ω–∞", callback_data="doc_draft_cancel")]]
        )
        await callback.message.answer(intro_text, parse_mode=ParseMode.HTML, reply_markup=keyboard)
        await callback.answer()
    except Exception as exc:  # noqa: BLE001
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: %s", exc, exc_info=True)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", show_alert=True)


async def handle_doc_draft_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    await state.clear()
    with suppress(Exception):
        await callback.message.answer(
            f"üö´ <b>–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n"
            f"<code>{'‚îÄ' * 30}</code>\n\n"
            f"üí° –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç",
            parse_mode=ParseMode.HTML
        )
    with suppress(Exception):
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


async def handle_doc_draft_request(
    message: Message,
    state: FSMContext,
    *,
    text_override: str | None = None,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —é—Ä–∏—Å—Ç–∞."""
    source_text = text_override if text_override is not None else message.text
    request_text = (source_text or "").strip()
    if not request_text:
        await message.answer(
            f"‚ö†Ô∏è <b>–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å</b>\n"
            f"<code>{'‚îÄ' * 30}</code>\n\n"
            f"üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω\n\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i>\n"
            f"‚Ä¢ –î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã\n"
            f"‚Ä¢ –ò—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞\n"
            f"‚Ä¢ –ü—Ä–µ—Ç–µ–Ω–∑–∏—è –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é",
            parse_mode=ParseMode.HTML
        )
        return

    if openai_service is None:
        await message.answer(
            f"‚ùå <b>–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n"
            f"<code>{'‚îÄ' * 30}</code>\n\n"
            f"‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await send_typing_once(message.bot, message.chat.id, "typing")

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    progress = ProgressStatus(
        message.bot,
        message.chat.id,
        steps=[
            {"label": "üîç –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"},
            {"label": "üìù –§–æ—Ä–º–∏—Ä—É—é –ø–ª–∞–Ω –≤–æ–ø—Ä–æ—Å–æ–≤"},
            {"label": "‚ú® –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"},
        ],
        show_context_toggle=False,
        show_checklist=True,
        auto_advance_stages=True,
        percent_thresholds=[0, 50, 90],
    )

    await progress.start(auto_cycle=True, interval=1.5)

    try:
        plan = await plan_document(openai_service, request_text)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ
        await progress.complete()
        await asyncio.sleep(0.3)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    except DocumentDraftingError as err:
        await progress.fail(note=str(err))
        await state.clear()
        return
    except Exception as exc:  # noqa: BLE001
        logger.error("–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: %s", exc, exc_info=True)
        await progress.fail(note="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await state.clear()
        return
    else:
        with suppress(Exception):
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if progress.message_id:
                await message.bot.delete_message(message.chat.id, progress.message_id)

    await state.update_data(
        draft_request=request_text,
        draft_plan={"title": plan.title, "questions": plan.questions, "notes": plan.notes},
        draft_answers=[],
        current_question_index=0,
    )

    summary = format_plan_summary(plan)
    for chunk in _split_plain_text(summary):
        await message.answer(chunk, parse_mode=ParseMode.HTML)

    if plan.questions:
        await state.set_state(DocumentDraftStates.asking_details)
        await _send_questions_prompt(
            message,
            plan.questions,
            title="–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        )
    else:
        await state.set_state(DocumentDraftStates.generating)
        await message.answer(
            f"‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!</b>\n"
            f"<code>{'‚ñ∞' * 20}</code>\n\n"
            f"üöÄ –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
            f"‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã",
            parse_mode=ParseMode.HTML
        )
        await _finalize_draft(message, state)


async def handle_doc_draft_answer(
    message: Message,
    state: FSMContext,
    *,
    text_override: str | None = None,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —é—Ä–∏—Å—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing indicator –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–æ–≤
    await send_typing_once(message.bot, message.chat.id, "typing")

    data = await state.get_data()
    plan = data.get("draft_plan") or {}
    questions = plan.get("questions") or []
    index = data.get("current_question_index", 0)

    if index >= len(questions):
        await message.answer(
            f"‚úÖ <b>–û—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã</b>\n"
            f"<code>{'‚ñ∞' * 20}</code>\n\n"
            f"üöÄ –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            parse_mode=ParseMode.HTML
        )
        await state.set_state(DocumentDraftStates.generating)
        await _finalize_draft(message, state)
        return

    source_text = text_override if text_override is not None else message.text
    answer_text = (source_text or "").strip()
    if not answer_text:
        await message.answer(
            f"‚ö†Ô∏è <b>–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç</b>\n\n"
            f"üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
            parse_mode=ParseMode.HTML
        )
        return

    answers = data.get("draft_answers") or []
    remaining_questions = questions[index:]
    question_headings = [str(q.get("text", "") or "") for q in remaining_questions]
    bulk_answers = _extract_answer_chunks(
        answer_text,
        expected_count=len(remaining_questions),
        question_headings=question_headings,
    )

    if bulk_answers:
        used_count = 0
        for offset, chunk in enumerate(bulk_answers):
            if offset >= len(remaining_questions):
                break
            question = remaining_questions[offset]
            answers.append({"question": question.get("text", ""), "answer": chunk})
            used_count += 1

        if used_count > 0:
            if used_count < len(bulk_answers):
                extra = "\n".join(bulk_answers[used_count:]).strip()
                if extra and answers:
                    answers[-1]["answer"] = f"{answers[-1]['answer']}\n{extra}"
            index += used_count

            await state.update_data(draft_answers=answers, current_question_index=index)
            if index < len(questions):
                missing_numbers = ", ".join(str(i) for i in range(index + 1, len(questions) + 1))
                await message.answer(
                    f"‚ö†Ô∏è <b>–ù–µ–ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</b>\n"
                    f"<code>{'‚îÄ' * 30}</code>\n\n"
                    f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: <b>{index}</b>\n"
                    f"‚ùå –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{len(questions) - index}</b>\n"
                    f"üìù –ù–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {missing_numbers}\n\n"
                    f"<b>–ö–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç—å:</b>\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
                    f"‚Ä¢ –û—Ç–¥–µ–ª—è–π—Ç–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –Ω—É–º–µ—Ä—É–π—Ç–µ",
                    parse_mode=ParseMode.HTML,
                )
            else:
                await state.set_state(DocumentDraftStates.generating)
                await message.answer(
                    f"‚öôÔ∏è <b>–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...</b>\n"
                    f"<code>{'‚ñ∞' * 20}</code>\n\n"

                    f"‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã\n"
                    f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
                    f"üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ç–µ–∫—Å—Ç\n"
                    f"üìÑ –§–æ—Ä–º–∏—Ä—É—é DOCX —Ñ–∞–π–ª\n\n"

                    f"<i>‚è± –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥</i>",
                    parse_mode=ParseMode.HTML,
                )
                await _finalize_draft(message, state)
            return
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ

    if index < len(questions):
        current_question = questions[index]
        answers.append({"question": current_question.get("text", ""), "answer": answer_text})
        index += 1

        await state.update_data(draft_answers=answers, current_question_index=index)

        if index < len(questions):
            next_question = questions[index]
            next_text = html_escape(next_question.get("text", ""))
            purpose = next_question.get("purpose")

            lines = [
                f"{Emoji.SUCCESS} <b>–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç</b>",
                f"<code>{'‚ñ∞' * 20}</code>",
                "",
                f"{Emoji.QUESTION} <b>–í–æ–ø—Ä–æ—Å {index + 1} –∏–∑ {len(questions)}</b>",
                next_text,
            ]
            if purpose:
                lines.append(f"<i>üí° {html_escape(str(purpose))}</i>")
            await message.answer("\n".join(lines), parse_mode=ParseMode.HTML)
        else:
            await state.set_state(DocumentDraftStates.generating)
            await message.answer(
                f"‚öôÔ∏è <b>–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...</b>\n"
                f"<code>{'‚ñ∞' * 20}</code>\n\n"
                f"‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã\n"
                f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
                f"üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ç–µ–∫—Å—Ç\n"
                f"üìÑ –§–æ—Ä–º–∏—Ä—É—é DOCX —Ñ–∞–π–ª\n\n"
                f"<i>‚è± –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥</i>",
                parse_mode=ParseMode.HTML,
            )
            await _finalize_draft(message, state)
        return

    await message.answer(
        f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
        parse_mode=ParseMode.HTML,
    )




async def _extract_doc_voice_text(message: Message) -> str | None:
    """–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    if not message.voice:
        return None

    if audio_service is None:
        await message.answer(f"{Emoji.WARNING} –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return None

    try:
        voice_enabled = settings().voice_mode_enabled
    except RuntimeError:
        voice_enabled = bool(getattr(config, "voice_mode_enabled", False))

    if not voice_enabled:
        await message.answer(f"{Emoji.WARNING} –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º —Å–µ–π—á–∞—Å –≤—ã–∫–ª—é—á–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.")
        return None

    if not message.bot:
        await message.answer(f"{Emoji.WARNING} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É. –û—Ç–≤–µ—Ç—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
        return None

    temp_voice_path: Path | None = None
    try:
        await audio_service.ensure_short_enough(message.voice.duration)

        async with typing_action(message.bot, message.chat.id, "record_voice"):
            temp_voice_path = await _download_voice_to_temp(message)
            transcript = await audio_service.transcribe(temp_voice_path)
    except ValueError as duration_error:
        logger.warning("Document draft voice input too long: %s", duration_error)
        await message.answer(
            f"{Emoji.WARNING} –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî {audio_service.max_duration_seconds} —Å–µ–∫—É–Ω–¥."
        )
        return None
    except Exception as exc:  # noqa: BLE001
        logger.exception("Failed to transcribe voice for document draft: %s", exc)
        await message.answer(
            f"{Emoji.ERROR} –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        )
        return None
    finally:
        with suppress(Exception):
            if temp_voice_path:
                temp_voice_path.unlink()

    preview = html_escape(transcript[:500])
    if len(transcript) > 500:
        preview += "‚Ä¶"
    await message.answer(
        f"{Emoji.MICROPHONE} –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<i>{preview}</i>",
        parse_mode=ParseMode.HTML,
    )
    return transcript


async def handle_doc_draft_request_voice(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    transcript = await _extract_doc_voice_text(message)
    if transcript is None:
        return
    await handle_doc_draft_request(message, state, text_override=transcript)


async def handle_doc_draft_answer_voice(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    transcript = await _extract_doc_voice_text(message)
    if transcript is None:
        return
    await handle_doc_draft_answer(message, state, text_override=transcript)


def _extract_answer_chunks(
    answer_text: str,
    *,
    expected_count: int | None = None,
    question_headings: Sequence[str] | None = None,
) -> list[str] | None:
    """Split a combined answer message into separate answers."""
    text = (answer_text or "")
    text = text.replace("\r\n", "\n").replace("\r", "\n")
    text = (
        text.replace("\u00A0", " ")
        .replace("\u202F", " ")
        .replace("\u2007", " ")
        .replace("\u2060", "")
        .replace("\ufeff", "")
    )
    text = text.strip()
    if not text:
        return None

    lines = text.split("\n")
    numbered_pattern = re.compile(r"^\s*(\d+)[\).:-]\s*(.*)")
    answers: list[str] = []
    current: list[str] | None = None
    has_numbers = False

    for line in lines:
        match = numbered_pattern.match(line)
        if match:
            has_numbers = True
            if current is not None:
                chunk = "\n".join(current).strip()
                if chunk:
                    answers.append(chunk)
            current = [match.group(2)]
        else:
            if current is not None:
                current.append(line)
    if has_numbers:
        if current:
            chunk = "\n".join(current).strip()
            if chunk:
                answers.append(chunk)
        if len(answers) > 1:
            return answers

    bullet_pattern = re.compile(r"^\s*[-\u2022]\s*(.*)")
    first_nonempty = next((line for line in lines if line.strip()), "")
    if bullet_pattern.match(first_nonempty):
        answers = []
        current = None
        for line in lines:
            match = bullet_pattern.match(line)
            if match:
                if current:
                    chunk = "\n".join(current).strip()
                    if chunk:
                        answers.append(chunk)
                current = [match.group(1)]
            else:
                if current:
                    current.append(line)
        if current:
            chunk = "\n".join(current).strip()
            if chunk:
                answers.append(chunk)
        if len(answers) > 1:
            return answers

    chunks = [
        chunk.strip()
        for chunk in re.split(r"(?:\n[ \t\u00A0\u2007\u202F\u2060]*){2,}", text)
        if chunk.strip()
    ]
    if len(chunks) > 1:
        if question_headings:
            normalized = [
                re.sub(r"\s+", " ", (heading or "")).strip().lower()
                for heading in question_headings
            ]

            def _normalize_line(line: str) -> str:
                return re.sub(r"\s+", " ", (line or "")).strip().lower()

            ordered: list[str] = []
            idx = 0
            for chunk in chunks:
                first_line = chunk.split("\n", 1)[0]
                first_norm = _normalize_line(first_line)
                if idx < len(normalized) and normalized[idx] and first_norm == normalized[idx]:
                    ordered.append(chunk)
                    idx += 1
                else:
                    ordered.append(chunk)
            return ordered
        return chunks

    if expected_count is not None and expected_count < 2:
        return None

    heading_pattern = re.compile(r"^\s*(?![-\u2022])(?!\d+[\).:-])([A-Za-z\u0410-\u042f\u0430-\u044f\u0401\u0451\u0030-\u0039][^:]{0,80}):\s*(.*)$")
    candidates: list[str] = []
    current: list[str] = []
    heading_boundaries = 0

    for line in lines:
        match = heading_pattern.match(line)
        is_heading = False
        if match:
            heading_text = match.group(1).strip()
            if heading_text and len(heading_text) <= 80 and len(heading_text.split()) <= 8 and not re.search(r"[.!?]", heading_text):
                is_heading = True

        if is_heading and current:
            chunk = "\n".join(current).strip()
            if chunk:
                candidates.append(chunk)
            current = [line]
            heading_boundaries += 1
            continue

        if not current and not line.strip():
            continue

        if not current:
            current = [line]
        else:
            current.append(line)

    if current:
        chunk = "\n".join(current).strip()
        if chunk:
            candidates.append(chunk)

    if heading_boundaries >= 1 and len(candidates) > 1:
        max_allowed = expected_count + 3 if expected_count is not None else None
        if max_allowed is None or len(candidates) <= max_allowed:
            return candidates

    return None

async def _send_questions_prompt(
    message: Message,
    questions: list[dict[str, Any]],
    *,
    title: str,
) -> None:
    if not questions:
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing indicator –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–æ–ø—Ä–æ—Å–æ–≤
    await send_typing_once(message.bot, message.chat.id, "typing")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    question_blocks: list[str] = []
    for idx, question in enumerate(questions, 1):
        text = html_escape(question.get("text", ""))
        purpose = question.get("purpose")

        # –ß–∏—Å—Ç—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π –¥–∏–∑–∞–π–Ω –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ª–∏–Ω–∏–π
        block_lines = [
            f"<b>{idx}. {text}</b>",  # –í–æ–ø—Ä–æ—Å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        ]

        if purpose:
            block_lines.append(f"<i>   üí° {html_escape(purpose)}</i>")  # –¶–µ–ª—å —Å –æ—Ç—Å—Ç—É–ø–æ–º

        question_blocks.append("\n".join(block_lines))

    if not question_blocks:
        return

    # –¢–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É–∂–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ)
    max_len = 3500
    chunk_lines: list[str] = [
        "üìã <b>–í–æ–ø—Ä–æ—Å—ã:</b>",
        f"<code>{'‚îÄ' * 35}</code>",
        ""
    ]

    for block in question_blocks:
        candidate = chunk_lines + [block, ""]  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
        candidate_text = "\n".join(candidate)
        if len(candidate_text) > max_len and len(chunk_lines) > 3:
            await message.answer("\n".join(chunk_lines), parse_mode=ParseMode.HTML)
            chunk_lines = [
                "üìã <b>–í–æ–ø—Ä–æ—Å—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>",
                f"<code>{'‚îÄ' * 35}</code>",
                "",
                block,
                ""
            ]
        else:
            if len(candidate_text) > max_len:
                # –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Å–∞–º –ø–æ —Å–µ–±–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
                await message.answer("\n".join(chunk_lines), parse_mode=ParseMode.HTML)
                chunk_lines = [
                    "üìã <b>–í–æ–ø—Ä–æ—Å—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>",
                    f"<code>{'‚îÄ' * 35}</code>",
                    "",
                    block,
                    ""
                ]
            else:
                chunk_lines.append(block)
                chunk_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏

    if len(chunk_lines) > 3:
        await message.answer("\n".join(chunk_lines), parse_mode=ParseMode.HTML)



_TITLE_SANITIZE_RE = re.compile(r"[\\/:*?\"<>|\r\n]+")
_TITLE_WHITESPACE_RE = re.compile(r"\s+")


def _prepare_document_titles(raw_title: str | None) -> tuple[str, str, str]:
    base = (raw_title or "").strip()
    if not base:
        base = "–î–æ–∫—É–º–µ–Ω—Ç"
    if base.endswith(")") and "(" in base:
        simplified = re.sub(r"\s*\([^)]*\)\s*$", "", base).strip()
        if simplified:
            base = simplified
    display_title = _TITLE_WHITESPACE_RE.sub(" ", base).strip()
    if not display_title:
        display_title = "–î–æ–∫—É–º–µ–Ω—Ç"
    caption = f"{Emoji.DOCUMENT} {display_title}"

    file_stub = _TITLE_SANITIZE_RE.sub("_", display_title).strip("._ ")
    if not file_stub:
        file_stub = "–î–æ–∫—É–º–µ–Ω—Ç"
    max_len = 80
    if len(file_stub) > max_len:
        file_stub = file_stub[:max_len].rstrip("._ ")
        if not file_stub:
            file_stub = "–î–æ–∫—É–º–µ–Ω—Ç"
    filename = f"{file_stub}.docx"
    return display_title, caption, filename


async def _finalize_draft(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    request_text = data.get("draft_request", "")
    plan = data.get("draft_plan") or {}
    answers = data.get("draft_answers") or []
    title = plan.get("title", "–î–æ–∫—É–º–µ–Ω—Ç")

    if openai_service is None:
        await message.answer(f"{Emoji.ERROR} –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç" –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        async with typing_action(message.bot, message.chat.id, "upload_document"):
            result = await generate_document(openai_service, request_text, title, answers)
    except DocumentDraftingError as err:
        await message.answer(f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {err}")
        await state.clear()
        return
    except Exception as exc:  # noqa: BLE001
        logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: %s", exc, exc_info=True)
        await message.answer(f"{Emoji.ERROR} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        await state.clear()
        return

    if result.status != "ok":
        if result.follow_up_questions:
            extra_questions = [
                {"id": f"f{i+1}", "text": item, "purpose": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ"}
                for i, item in enumerate(result.follow_up_questions)
            ]
            await state.update_data(
                draft_plan={
                    "title": result.title or title,
                    "questions": extra_questions,
                    "notes": plan.get("notes", []),
                },
                current_question_index=0,
                draft_answers=answers,
            )
            await state.set_state(DocumentDraftStates.asking_details)
            await message.answer(f"{Emoji.WARNING} –ù—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω–µ–Ω–∏–π, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
            await _send_questions_prompt(
                message,
                extra_questions,
                title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            )
            return

        issues_text = "\n".join(result.issues) or "–ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç."
        await message.answer(f"{Emoji.WARNING} –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–∏—á–∏–Ω–∞:\n{issues_text}")
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    notes: list[str] = []
    if result.validated:
        validated_items = "\n".join([f"  ‚úì {item}" for item in result.validated])
        notes.append(
            f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b>\n{validated_items}"
        )

    if result.issues:
        issues_items = "\n".join([f"  ‚ö†Ô∏è {item}" for item in result.issues])
        notes.append(
            f"‚ö†Ô∏è <b>–ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ:</b>\n{issues_items}"
        )

    if notes:
        info_text = (
            f"<code>{'‚îÅ' * 35}</code>\n"
            f"{chr(10).join(notes)}\n"
            f"<code>{'‚îÅ' * 35}</code>"
        )
        await message.answer(info_text, parse_mode=ParseMode.HTML)

    # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    with tempfile.NamedTemporaryFile(suffix=".docx", delete=False) as tmp_file:
        tmp_path = Path(tmp_file.name)
    try:
        build_docx_from_markdown(result.markdown, str(tmp_path))
        display_title, caption, filename = _prepare_document_titles(result.title or title)

        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        final_caption = (
            f"üìÑ <b>{display_title}</b>\n"
            f"<code>{'‚îÄ' * 30}</code>\n\n"
            f"‚ú® –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"üìé –§–æ—Ä–º–∞—Ç: DOCX\n\n"
            f"<i>üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å–∏—Ç–µ –ø—Ä–∞–≤–∫–∏</i>"
        )

        await message.answer_document(
            FSInputFile(str(tmp_path), filename=filename),
            caption=final_caption,
            parse_mode=ParseMode.HTML
        )
    except DocumentDraftingError as err:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è DOCX</b>\n"
            f"<code>{'‚îÄ' * 30}</code>\n\n"
            f"‚ö†Ô∏è {err}",
            parse_mode=ParseMode.HTML
        )
    finally:
        tmp_path.unlink(missing_ok=True)
    await state.clear()


async def handle_document_processing(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    try:
        operations = document_manager.get_supported_operations()

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ 2 –≤ —Ä—è–¥)
        buttons = []

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons.append([
            InlineKeyboardButton(
                text="‚öñÔ∏è –ê–Ω–∞–ª–∏–∑ –∏—Å–∫–æ–≤–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è",
                callback_data="doc_operation_lawsuit_analysis",
            )
        ])
        buttons.append([
            InlineKeyboardButton(
                text=f"{Emoji.MAGIC} –°–æ–∑–¥–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                callback_data="doc_draft_start",
            )
        ])

        secondary_buttons = []
        for op_key, op_info in operations.items():
            if op_key in {"translate", "chat", "lawsuit_analysis"}:
                continue
            emoji = op_info.get("emoji", "üìÑ")
            name = op_info.get("name", op_key)
            secondary_buttons.append(
                InlineKeyboardButton(text=f"{emoji} {name}", callback_data=f"doc_operation_{op_key}")
            )

        for i in range(0, len(secondary_buttons), 2):
            row = secondary_buttons[i:i+2]
            buttons.append(row)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

        message_text = (
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
            "‚îÉ  üóÇÔ∏è <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</b>  ‚îÉ\n"
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
            "ü§ñ <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑\n"
            "   –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò</i>\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n\n"
            "üìÑ <b>–ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞</b>\n"
            "   ‚îî –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä—ë–º–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
            "      –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏\n\n"
            "‚ö†Ô∏è <b>–†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑</b>\n"
            "   ‚îî –ù–∞—Ö–æ–¥–∏—Ç –æ–ø–∞—Å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n"
            "      –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö\n\n"
            "‚öñÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –∏—Å–∫–æ–≤–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n"
            "   ‚îî –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é,\n"
            "      —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üîí <b>–û–±–µ–∑–ª–∏—á–∏–≤–∞–Ω–∏–µ</b>\n"
            "   ‚îî –°–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "      –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è\n\n"
            "üîç <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n"
            "   ‚îî –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å–∫–∞–Ω–æ–≤\n"
            "      –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:"
        )

        await callback.message.answer(
            message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_document_processing: {e}", exc_info=True)


async def handle_document_operation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing indicator
        await send_typing_once(callback.bot, callback.message.chat.id, "typing")

        operation = callback.data.replace("doc_operation_", "")
        operation_info = document_manager.get_operation_info(operation)

        if not operation_info:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_data = await state.get_data()
        operation_options = dict(state_data.get("operation_options") or {})
        if operation == "lawsuit_analysis":
            operation_options.setdefault("output_format", "md")
        await state.update_data(document_operation=operation, operation_options=operation_options)

        emoji = operation_info.get("emoji", "üìÑ")
        name = operation_info.get("name", operation)
        description = operation_info.get("description", "")
        upload_formats = operation_info.get("upload_formats")
        if upload_formats:
            formats = ", ".join(upload_formats)
        else:
            formats = ", ".join(operation_info.get("formats", []))

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        detailed_descriptions = {
            "summarize": (
                "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
                "‚îÉ  üìã <b>–ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞</b>       ‚îÉ\n"
                "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
                "‚öôÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n\n"
                "üîç <b>–ê–Ω–∞–ª–∏–∑</b>\n"
                "   ‚îî –ò–∑—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n"
                "üìå <b>–í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ</b>\n"
                "   ‚îî –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∏–¥–µ–∏\n\n"
                "üìù <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
                "   ‚îî –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É\n\n"
                "üíæ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π</b>\n"
                "   ‚îî –í–∞–∂–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üìä <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n\n"
                "   ‚úì –í—ã–∂–∏–º–∫–∞ –Ω–∞ 1-3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n"
                "   ‚úì –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã\n"
                "   ‚úì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "   ‚úì –≠–∫—Å–ø–æ—Ä—Ç –≤ DOCX/PDF\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üíº <b>–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è:</b>\n"
                "   ‚Ä¢ –î–æ–≥–æ–≤–æ—Ä—ã\n"
                "   ‚Ä¢ –û—Ç—á–µ—Ç—ã\n"
                "   ‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n"
                "   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
            ),
            "analyze_risks": (
                "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
                "‚îÉ  ‚ö†Ô∏è <b>–†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑</b>           ‚îÉ\n"
                "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
                "‚öôÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n\n"
                "üîé <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
                "   ‚îî –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤\n\n"
                "‚ö° <b>–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º</b>\n"
                "   ‚îî –û–ø–∞—Å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n\n"
                "üìñ <b>–ü—Ä–∞–≤–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑</b>\n"
                "   ‚îî –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–∞–º –ø—Ä–∞–≤–∞\n\n"
                "üìà <b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤</b>\n"
                "   ‚îî –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üìä <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n\n"
                "   ‚úì –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∏—Å–∫–∞–º\n"
                "   ‚úì –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                "   ‚úì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é\n"
                "   ‚úì –°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üíº <b>–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è:</b>\n"
                "   ‚Ä¢ –î–æ–≥–æ–≤–æ—Ä—ã\n"
                "   ‚Ä¢ –°–æ–≥–ª–∞—à–µ–Ω–∏—è\n"
                "   ‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            ),
            "lawsuit_analysis": (
                "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
                "‚îÉ  ‚öñÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –∏—Å–∫–∞</b>             ‚îÉ\n"
                "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
                "‚öôÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n\n"
                "üìã <b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</b>\n"
                "   ‚îî –ò—Å–∫ –∏ –ø—Ä–∞–≤–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è\n\n"
                "üîç <b>–û—Ü–µ–Ω–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤</b>\n"
                "   ‚îî –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã\n\n"
                "‚ö†Ô∏è <b>–ü—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏</b>\n"
                "   ‚îî –ü—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏\n\n"
                "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n"
                "   ‚îî –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üìä <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n\n"
                "   ‚úì –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏—Å–∫–∞\n"
                "   ‚úì –ü—Ä–∞–≤–æ–≤–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n"
                "   ‚úì –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤\n"
                "   ‚úì –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üíº <b>–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è:</b>\n"
                "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π\n"
                "   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å—É–¥—É\n\n"
                "üìù <b>–ü–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π:</b>\n"
                "   1. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (PDF/DOCX)\n"
                "   2. –ö–ª—é—á–µ–≤—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n"
                "   3. –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏"
            ),
            "chat": (
                "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
                "‚îÉ  üí¨ <b>–ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º</b>      ‚îÉ\n"
                "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
                "‚öôÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n\n"
                "‚ùì <b>–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n"
                "   ‚îî –ü–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n"
                "üîç <b>–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>\n"
                "   ‚îî –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã\n\n"
                "üí≠ <b>–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã</b>\n"
                "   ‚îî –°–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ç–µ–∫—Å—Ç\n\n"
                "üîÑ <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã</b>\n"
                "   ‚îî –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üìä <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n\n"
                "   ‚úì –¢–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
                "   ‚úì –¶–∏—Ç–∞—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
                "   ‚úì –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üíº <b>–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è:</b>\n"
                "   ‚Ä¢ –ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤\n"
                "   ‚Ä¢ –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            ),
            "anonymize": (
                "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
                "‚îÉ  üîí <b>–û–±–µ–∑–ª–∏—á–∏–≤–∞–Ω–∏–µ</b>         ‚îÉ\n"
                "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
                "‚öôÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n\n"
                "üîç <b>–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö</b>\n"
                "   ‚îî –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
                "üîÑ <b>–ó–∞–º–µ–Ω–∞</b>\n"
                "   ‚îî –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏\n\n"
                "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ</b>\n"
                "   ‚îî –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                "üìã <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</b>\n"
                "   ‚îî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å–º—ã—Å–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üìä <b>–ß—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è:</b>\n\n"
                "   ‚úì –§–ò–û, –∞–¥—Ä–µ—Å–∞, —Ç–µ–ª–µ—Ñ–æ–Ω—ã\n"
                "   ‚úì Email, –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
                "   ‚úì –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n"
                "   ‚úì –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üíº <b>–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è:</b>\n"
                "   ‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
                "   ‚Ä¢ –ü—É–±–ª–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"
            ),
            "translate": (
                "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
                "‚îÉ  üåç <b>–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>    ‚îÉ\n"
                "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
                "‚öôÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n\n"
                "üìÑ <b>–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞</b>\n"
                "   ‚îî –° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n\n"
                "‚öñÔ∏è <b>–¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è</b>\n"
                "   ‚îî –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è\n\n"
                "üìê <b>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
                "   ‚îî –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É\n\n"
                "üåê <b>–Ø–∑—ã–∫–∏</b>\n"
                "   ‚îî –û—Å–Ω–æ–≤–Ω—ã–µ —è–∑—ã–∫–∏ –º–∏—Ä–∞\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üìä <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\n"
                "   ‚úì –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
                "   ‚úì –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è\n"
                "   ‚úì –≠–∫—Å–ø–æ—Ä—Ç –≤ DOCX –∏ TXT\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üíº <b>–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è:</b>\n"
                "   ‚Ä¢ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã\n"
                "   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏"
            ),
            "ocr": (
                "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
                "‚îÉ  üîç <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>  ‚îÉ\n"
                "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
                "‚öôÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n\n"
                "üì∑ <b>–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n"
                "   ‚îî –ò–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"
                "üñºÔ∏è <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ</b>\n"
                "   ‚îî –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF\n\n"
                "‚úçÔ∏è <b>–¢–∏–ø—ã —Ç–µ–∫—Å—Ç–∞</b>\n"
                "   ‚îî –†—É–∫–æ–ø–∏—Å–Ω—ã–π –∏ –ø–µ—á–∞—Ç–Ω—ã–π\n\n"
                "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</b>\n"
                "   ‚îî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üìä <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n\n"
                "   ‚úì –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è\n"
                "   ‚úì –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞\n"
                "   ‚úì –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç—ã\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üíº <b>–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è:</b>\n"
                "   ‚Ä¢ –°—Ç–∞—Ä—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                "   ‚Ä¢ –°–∫–∞–Ω—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
            )
        }

        detailed_description = detailed_descriptions.get(operation, f"{html_escape(description)}")

        message_text = (
            f"{detailed_description}\n\n"
            f"üìÑ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> {html_escape(formats)}\n\n"
            "üìé <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>"
        )

        await callback.message.answer(
            message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º", callback_data="document_processing")]
                ]
            ),
        )
        await callback.answer()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        await state.set_state(DocumentProcessingStates.waiting_for_document)

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_document_operation: {e}", exc_info=True)

async def handle_back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        if document_manager is not None and callback.from_user:
            document_manager.end_chat_session(callback.from_user.id)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await cmd_start(callback.message)
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_menu: {e}", exc_info=True)


async def handle_retention_quick_question(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' –∏–∑ retention —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        await callback.answer()
        await callback.message.answer(
            f"{Emoji.ROBOT} <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–µ–≥–æ.\n\n"
            f"{Emoji.INFO} <i>–ü—Ä–∏–º–µ—Ä:</i> –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞—Ä—É—à–∏–ª–∏ –ø—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è?",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Error in handle_retention_quick_question: {e}", exc_info=True)


async def handle_retention_show_features(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏' –∏–∑ retention —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        await callback.answer()

        features_text = (
            f"{Emoji.ROBOT} <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n\n"
            f"{Emoji.QUESTION} <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n"
            "–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª—é–±—ã–º –ø—Ä–∞–≤–æ–≤—ã–º —Ç–µ–º–∞–º\n\n"
            f"üìÑ <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</b>\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º\n"
            "‚Ä¢ –†–µ–∂–∏–º \"—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\" ‚Äî –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"
            f"üìö <b>–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n"
            "–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n\n"
            f"{Emoji.MICROPHONE} <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n"
            "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî –ø–æ–ª—É—á–∏—à—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç\n\n"
            f"{Emoji.INFO} –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!"
        )

        await callback.message.answer(features_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"Error in handle_retention_show_features: {e}", exc_info=True)

# --- progress router hookup ---
def register_progressbar(dp: Dispatcher) -> None:
    dp.include_router(progress_router)






async def cmd_askdoc(message: Message) -> None:
    if document_manager is None or not message.from_user:
        await message.answer(f"{Emoji.WARNING} –°–µ—Å—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ä–µ–∂–∏–º–æ–º \"–ß–∞—Ç\".")
        return

    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        await message.answer(f"{Emoji.WARNING} –£–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /askdoc –ö–∞–∫–æ–π —Å—Ä–æ–∫?")
        return

    question = parts[1].strip()
    try:
        async with typing_action(message.bot, message.chat.id, "typing"):
            result = await document_manager.answer_chat_question(message.from_user.id, question)
    except ProcessingError as exc:
        await message.answer(f"{Emoji.WARNING} {html_escape(exc.message)}", parse_mode=ParseMode.HTML)
        return
    except Exception as exc:  # noqa: BLE001
        logger.error("Document chat failed: %s", exc, exc_info=True)
        await message.answer(
            f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
        )
        return

    formatted = document_manager.format_chat_answer_for_telegram(result)
    await message.answer(formatted, parse_mode=ParseMode.HTML)


async def cmd_enddoc(message: Message) -> None:
    if document_manager is None or not message.from_user:
        await message.answer(f"{Emoji.WARNING} –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    closed = document_manager.end_chat_session(message.from_user.id)
    if closed:
        await message.answer(f"{Emoji.SUCCESS} –ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω.")
    else:
        await message.answer(f"{Emoji.WARNING} –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


GENERIC_INTERNAL_ERROR_HTML = "<i>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>"
GENERIC_INTERNAL_ERROR_TEXT = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def handle_document_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂—ë–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        if not message.document:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"
        async with typing_action(message.bot, message.chat.id, "upload_document"):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            operation = data.get("document_operation")
            options = dict(data.get("operation_options") or {})
            output_format = str(options.get("output_format", "txt"))
            output_format = str(options.get("output_format", "txt"))

            if not operation:
                await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
                await state.clear()
                return

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.set_state(DocumentProcessingStates.processing_document)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            file_name = message.document.file_name or "unknown"
            file_size = message.document.file_size or 0
            mime_type = message.document.mime_type or "application/octet-stream"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 50MB)
            max_size = 50 * 1024 * 1024
            if file_size > max_size:
                reply_markup = _build_ocr_reply_markup(output_format) if operation == "ocr" else None
                await message.answer(
                    f"{Emoji.ERROR} –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size // (1024*1024)} –ú–ë",
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup,
                )
                await state.clear()
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            operation_info = document_manager.get_operation_info(operation) or {}
            operation_name = operation_info.get("name", operation)
            file_size_kb = max(1, file_size // 1024)

            stage_labels = _get_stage_labels(operation)

            status_msg = await message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É‚Ä¶", parse_mode=ParseMode.HTML)

            send_progress, progress_state = _make_progress_updater(
                message,
                status_msg,
                file_name=file_name,
                operation_name=operation_name,
                file_size_kb=file_size_kb,
                stage_labels=stage_labels,
            )

            await send_progress({"stage": "start", "percent": 5})

            try:
                await send_progress({"stage": "downloading", "percent": 18})
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file_info = await message.bot.get_file(message.document.file_id)
                file_path = file_info.file_path

                if not file_path:
                    raise ProcessingError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É", "FILE_ERROR")

                file_content = await message.bot.download_file(file_path)

                documents_dir = Path("documents")
                documents_dir.mkdir(parents=True, exist_ok=True)
                safe_name = Path(file_name).name or "document"
                unique_name = f"{uuid.uuid4().hex}_{safe_name}"
                stored_path = documents_dir / unique_name

                file_bytes = file_content.read()
                stored_path.write_bytes(file_bytes)
                await send_progress({"stage": "uploaded", "percent": 32})

                try:
                    await send_progress({"stage": "processing", "percent": 45})
                    result = await document_manager.process_document(
                        user_id=message.from_user.id,
                        file_content=file_bytes,
                        original_name=file_name,
                        mime_type=mime_type,
                        operation=operation,
                        progress_callback=send_progress,
                        **options,
                    )
                finally:
                    with suppress(Exception):
                        stored_path.unlink(missing_ok=True)

                await send_progress({"stage": "finalizing", "percent": 90})

                if result.success:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram
                    formatted_result = document_manager.format_result_for_telegram(result, operation)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    reply_markup = _build_ocr_reply_markup(output_format) if operation == "ocr" else None
                    await message.answer(formatted_result, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

                    exports = result.data.get("exports") or []
                    for export in exports:
                        export_path = export.get("path")
                        if not export_path:
                            error_msg = export.get("error")
                            if error_msg:
                                await message.answer(f"{Emoji.WARNING} {error_msg}")
                            continue
                        label = export.get("label") or export.get("name")
                        file_name = Path(export_path).name
                        format_tag = str(export.get("format", "file")).upper()
                        parts = [f"üìÑ {format_tag}"]
                        if label:
                            parts.append(str(label))
                        parts.append(file_name)
                        caption = " ‚Ä¢ ".join(part for part in parts if part)
                        try:
                            await message.answer_document(FSInputFile(export_path), caption=caption)
                        except Exception as send_error:
                            logger.error(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {export_path}: {send_error}", exc_info=True
                            )
                            await message.answer(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {file_name}"
                            )
                        finally:
                            with suppress(Exception):
                                Path(export_path).unlink(missing_ok=True)

                    completion_payload = _build_completion_payload(operation, result)
                    await send_progress({'stage': 'completed', 'percent': 100, **completion_payload})
                    with suppress(Exception):
                        await asyncio.sleep(0.6)
                        await status_msg.delete()

                    logger.info(
                        f"Successfully processed document {file_name} for user {message.from_user.id}"
                    )
                else:
                    await send_progress({'stage': 'failed', 'percent': progress_state['percent'], 'note': result.message})
                    reply_markup = _build_ocr_reply_markup(output_format) if operation == "ocr" else None
                    await message.answer(
                        f"{Emoji.ERROR} <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n{html_escape(str(result.message))}",
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup,
                    )
                    with suppress(Exception):
                        await status_msg.delete()

            except Exception as e:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                try:
                    await status_msg.delete()
                except:
                    pass

                reply_markup = _build_ocr_reply_markup(output_format) if operation == "ocr" else None
                await message.answer(
                    f"{Emoji.ERROR} <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n{GENERIC_INTERNAL_ERROR_HTML}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup,
                )
                logger.error(f"Error processing document {file_name}: {e}", exc_info=True)

            finally:
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()

    except Exception as e:
        reply_markup = None
        if 'operation' in locals() and operation == "ocr":
            reply_markup = _build_ocr_reply_markup(locals().get('output_format', 'txt'))
        await message.answer(
            f"{Emoji.ERROR} <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n{GENERIC_INTERNAL_ERROR_HTML}",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup,
        )
        logger.error(f"Error in handle_document_upload: {e}", exc_info=True)
        await state.clear()


async def handle_photo_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ "—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"."""
    try:
        if not message.photo:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ"
        async with typing_action(message.bot, message.chat.id, "upload_photo"):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            operation = data.get("document_operation")
            options = dict(data.get("operation_options") or {})
            output_format = str(options.get("output_format", "txt"))
            output_format = str(options.get("output_format", "txt"))

            if not operation:
                await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
                await state.clear()
                return

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.set_state(DocumentProcessingStates.processing_document)

            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo = message.photo[-1]
            file_name = f"photo_{photo.file_id}.jpg"
            file_size = photo.file_size or 0
            mime_type = "image/jpeg"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
            max_size = 20 * 1024 * 1024
            if file_size > max_size:
                await message.answer(
                    f"‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size // (1024*1024)} –ú–ë"
                )
                await state.clear()
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            operation_info = document_manager.get_operation_info(operation) or {}
            operation_name = operation_info.get("name", operation)

            file_size_kb = max(1, file_size // 1024)
            stage_labels = _get_stage_labels(operation)

            status_msg = await message.answer(
                f"üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ä–µ–∂–∏–º–∞ \"—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\"...\n\n"
                f"‚è≥ –û–ø–µ—Ä–∞—Ü–∏—è: {html_escape(operation_name)}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {file_size_kb} –ö–ë",
                parse_mode=ParseMode.HTML,
            )

            send_progress, progress_state = _make_progress_updater(
                message,
                status_msg,
                file_name=file_name,
                operation_name=operation_name,
                file_size_kb=file_size_kb,
                stage_labels=stage_labels,
            )

            try:
                await send_progress({"stage": "start", "percent": 5})

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                file_info = await message.bot.get_file(photo.file_id)
                file_path = file_info.file_path

                if not file_path:
                    raise ProcessingError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "FILE_ERROR")

                file_content = await message.bot.download_file(file_path)

                documents_dir = Path("documents")
                documents_dir.mkdir(parents=True, exist_ok=True)
                safe_name = Path(file_name).name or "photo.jpg"
                unique_name = f"{uuid.uuid4().hex}_{safe_name}"
                stored_path = documents_dir / unique_name

                file_bytes = file_content.read()
                stored_path.write_bytes(file_bytes)
                await send_progress({"stage": "uploaded", "percent": 32})

                try:
                    await send_progress({"stage": "processing", "percent": 45})
                    result = await document_manager.process_document(
                        user_id=message.from_user.id,
                        file_content=file_bytes,
                        original_name=file_name,
                        mime_type=mime_type,
                        operation=operation,
                        progress_callback=send_progress,
                        **options,
                    )
                finally:
                    with suppress(Exception):
                        stored_path.unlink(missing_ok=True)

                await send_progress({"stage": "finalizing", "percent": 90})

                if result.success:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram
                    formatted_result = document_manager.format_result_for_telegram(result, operation)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    reply_markup = _build_ocr_reply_markup(output_format) if operation == "ocr" else None
                    await message.answer(formatted_result, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                    exports = result.data.get("exports") or []
                    for export in exports:
                        export_path = export.get("path")
                        if not export_path:
                            error_msg = export.get("error")
                            if error_msg:
                                await message.answer(f"{Emoji.WARNING} {error_msg}")
                            continue
                        label = export.get("label") or export.get("name")
                        file_name = Path(export_path).name
                        format_tag = str(export.get("format", "file")).upper()
                        parts = [f"üìÑ {format_tag}"]
                        if label:
                            parts.append(str(label))
                        parts.append(file_name)
                        caption = " ‚Ä¢ ".join(part for part in parts if part)
                        try:
                            await message.answer_document(FSInputFile(export_path), caption=caption)
                        except Exception as send_error:
                            logger.error(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {export_path}: {send_error}", exc_info=True
                            )
                            await message.answer(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {file_name}"
                            )
                        finally:
                            with suppress(Exception):
                                Path(export_path).unlink(missing_ok=True)

                    completion_payload = _build_completion_payload(operation, result)
                    await send_progress({"stage": "completed", "percent": 100, **completion_payload})
                    with suppress(Exception):
                        await asyncio.sleep(0.6)
                        await status_msg.delete()

                    logger.info(
                        f"Successfully processed photo {file_name} for user {message.from_user.id}"
                    )
                else:
                    await send_progress(
                        {"stage": "failed", "percent": progress_state["percent"], "note": result.message}
                    )
                    reply_markup = _build_ocr_reply_markup(output_format) if operation == "ocr" else None
                    await message.answer(
                        f"{Emoji.ERROR} <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>\n\n{html_escape(str(result.message))}",
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup,
                    )

            except Exception as e:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await send_progress(
                        {"stage": "failed", "percent": progress_state["percent"], "note": GENERIC_INTERNAL_ERROR_TEXT}
                    )
                    await status_msg.delete()
                except:
                    pass

                reply_markup = _build_ocr_reply_markup(output_format) if operation == "ocr" else None
                await message.answer(
                    f"{Emoji.ERROR} <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>\n\n{GENERIC_INTERNAL_ERROR_HTML}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup,
                )
                logger.error(f"Error processing photo {file_name}: {e}", exc_info=True)

            finally:
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()

    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Error in handle_photo_upload: {e}", exc_info=True)
        await state.clear()


async def cmd_ratings_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not message.from_user:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –±–æ—Ç–æ–º")
        return

    try:
        user_id = _ensure_valid_user_id(message.from_user.id, context="cmd_ratings_stats")
    except ValidationException as exc:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id in cmd_ratings_stats: %s", exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    stats_fn = _get_safe_db_method("get_ratings_statistics", default_return={})
    low_rated_fn = _get_safe_db_method("get_low_rated_requests", default_return=[])
    if not stats_fn or not low_rated_fn:
        await message.answer("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    try:
        stats_7d = await stats_fn(7)
        stats_30d = await stats_fn(30)
        low_rated = await low_rated_fn(5)

        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤</b>

üìÖ <b>–ó–∞ 7 –¥–Ω–µ–π:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {stats_7d.get('total_ratings', 0)}
‚Ä¢ üëç –õ–∞–π–∫–æ–≤: {stats_7d.get('total_likes', 0)}
‚Ä¢ üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {stats_7d.get('total_dislikes', 0)}
‚Ä¢ üìà –†–µ–π—Ç–∏–Ω–≥ –ª–∞–π–∫–æ–≤: {stats_7d.get('like_rate', 0):.1f}%
‚Ä¢ üí¨ –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {stats_7d.get('feedback_count', 0)}

üìÖ <b>–ó–∞ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {stats_30d.get('total_ratings', 0)}
‚Ä¢ üëç –õ–∞–π–∫–æ–≤: {stats_30d.get('total_likes', 0)}
‚Ä¢ üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {stats_30d.get('total_dislikes', 0)}
‚Ä¢ üìà –†–µ–π—Ç–∏–Ω–≥ –ª–∞–π–∫–æ–≤: {stats_30d.get('like_rate', 0):.1f}%
‚Ä¢ üí¨ –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {stats_30d.get('feedback_count', 0)}"""

        if low_rated:
            stats_text += "\n\n‚ö†Ô∏è <b>–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</b>\n"
            for req in low_rated[:3]:
                stats_text += f"‚Ä¢ ID {req['request_id']}: —Ä–µ–π—Ç–∏–Ω–≥ {req['avg_rating']:.1f} ({req['rating_count']} –æ—Ü–µ–Ω–æ–∫)\n"

        await message.answer(stats_text, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"Error in cmd_ratings_stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")


async def cmd_error_stats(message: Message):
    """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫ –∏–∑ ErrorHandler (–∞–¥–º–∏–Ω—ã)."""
    if not message.from_user:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –±–æ—Ç–æ–º")
        return

    try:
        user_id = _ensure_valid_user_id(message.from_user.id, context="cmd_error_stats")
    except ValidationException as exc:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id in cmd_error_stats: %s", exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not error_handler:
        await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    stats = error_handler.get_error_stats()
    if not stats:
        await message.answer("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
        return

    lines = ["üö® <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫</b>"]
    for error_type, count in sorted(stats.items(), key=lambda item: item[0]):
        lines.append(f"‚Ä¢ {error_type}: {count}")

    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML)

async def pre_checkout(pre: PreCheckoutQuery):
    try:
        payload_raw = pre.invoice_payload or ""
        parsed = None
        try:
            parsed = parse_subscription_payload(payload_raw)
        except SubscriptionPayloadError:
            parsed = None

        plan_info = _get_plan_pricing(parsed.plan_id if parsed else None)
        if plan_info is None:
            plan_info = DEFAULT_SUBSCRIPTION_PLAN
        if plan_info is None:
            await pre.answer(ok=False, error_message="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        method = (parsed.method if parsed else "").lower()
        if method == "xtr":
            method = "stars"

        if parsed and pre.from_user and parsed.user_id and parsed.user_id != pre.from_user.id:
            await pre.answer(ok=False, error_message="–°—á—ë—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        if method == "rub":
            expected_currency = "RUB"
            expected_amount = plan_info.price_rub_kopeks
        elif method == "stars":
            expected_currency = "XTR"
            expected_amount = _plan_stars_amount(plan_info)
        else:
            expected_currency = pre.currency.upper()
            expected_amount = pre.total_amount

        if expected_amount <= 0:
            await pre.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã")
            return

        if pre.currency.upper() != expected_currency or int(pre.total_amount) != int(expected_amount):
            await pre.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–ª–∞—Ç—ã")
            return

        amount_major = pre.total_amount / 100 if expected_currency == "RUB" else pre.total_amount
        amount_check = InputValidator.validate_payment_amount(amount_major, expected_currency)
        if not amount_check.is_valid:
            await pre.answer(ok=False, error_message="–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
            return

        await pre.answer(ok=True)
    except Exception:
        await pre.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")



async def on_successful_payment(message: Message):
    try:
        sp = message.successful_payment
        if sp is None or message.from_user is None:
            return

        currency_up = sp.currency.upper()
        if currency_up == "RUB":
            provider_name = "telegram_rub"
        elif currency_up == "XTR":
            provider_name = "telegram_stars"
        else:
            provider_name = f"telegram_{currency_up.lower()}"

        payload_raw = sp.invoice_payload or ""
        parsed_payload = None
        try:
            parsed_payload = parse_subscription_payload(payload_raw)
        except SubscriptionPayloadError:
            parsed_payload = None

        plan_info = _get_plan_pricing(parsed_payload.plan_id if parsed_payload else None)
        if plan_info is None:
            plan_info = DEFAULT_SUBSCRIPTION_PLAN

        cfg = settings()
        duration_days = plan_info.plan.duration_days if plan_info else max(1, int(cfg.sub_duration_days or 30))
        quota = plan_info.plan.request_quota if plan_info else 0
        plan_id = plan_info.plan.plan_id if plan_info else (parsed_payload.plan_id if parsed_payload and parsed_payload.plan_id else "legacy")

        user_id = message.from_user.id
        new_until = None
        new_balance: int | None = None

        if db is not None and sp.telegram_payment_charge_id:
            exists = await db.transaction_exists_by_telegram_charge_id(sp.telegram_payment_charge_id)
            if exists:
                return

        if db is not None:
            await db.record_transaction(
                user_id=user_id,
                provider=provider_name,
                currency=sp.currency,
                amount=sp.total_amount,
                amount_minor_units=sp.total_amount,
                payload=payload_raw,
                status=TransactionStatus.COMPLETED.value,
                telegram_payment_charge_id=sp.telegram_payment_charge_id,
                provider_payment_charge_id=sp.provider_payment_charge_id,
            )

            if plan_info is not None:
                new_until, new_balance = await db.apply_subscription_purchase(
                    user_id,
                    plan_id=plan_id,
                    duration_days=duration_days,
                    request_quota=quota,
                )
            else:
                await db.extend_subscription_days(user_id, duration_days)
                user = await db.get_user(user_id)
                if user and user.subscription_until:
                    new_until = int(user.subscription_until)
                if user and getattr(user, "subscription_requests_balance", None) is not None:
                    new_balance = int(getattr(user, "subscription_requests_balance"))

        response_lines = [f"{Emoji.SUCCESS} <b>–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!</b>"]
        if plan_info is not None:
            response_lines.append(f"–¢–∞—Ä–∏—Ñ: <b>{plan_info.plan.name}</b>")
            response_lines.append(f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration_days} –¥–Ω–µ–π")
            response_lines.append(f"–ö–≤–æ—Ç–∞: {plan_info.plan.request_quota} –∑–∞–ø—Ä–æ—Å–æ–≤")
        elif parsed_payload and parsed_payload.plan_id:
            response_lines.append(f"–¢–∞—Ä–∏—Ñ: {parsed_payload.plan_id}")
            response_lines.append(f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration_days} –¥–Ω–µ–π")

        if new_until:
            until_text = datetime.fromtimestamp(new_until).strftime("%Y-%m-%d")
            response_lines.append(f"–î–æ—Å—Ç—É–ø –¥–æ: {until_text}")

        if plan_info is not None and new_balance is not None:
            response_lines.append(f"–û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: {new_balance}")

        response_lines.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –∫–æ–º–∞–Ω–¥–∞ /status.")

        await message.answer("\n".join(response_lines), parse_mode=ParseMode.HTML)
    except Exception:
        logger.exception("Failed to handle successful payment")



# ============ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ============


async def log_only_aiogram_error(event: ErrorEvent):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.exception("Critical error in bot: %s", event.exception)


# ============ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ============


async def _maybe_call(coro_or_func):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç sync/async –º–µ—Ç–æ–¥—ã init()/close()."""
    if coro_or_func is None:
        return
    try:
        res = coro_or_func()
    except TypeError:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —É–∂–µ –∫–æ—Ä—É—Ç–∏–Ω—É
        res = coro_or_func
    if asyncio.iscoroutine(res):
        return await res
    return res


async def run_bot() -> None:
    """Main coroutine launching the bot."""
    ctx = get_runtime()
    cfg = ctx.settings
    container = ctx.get_dependency('container')
    if container is None:
        raise RuntimeError('DI container is not available')

    refresh_runtime_globals()

    if not cfg.telegram_bot_token:
        raise RuntimeError('TELEGRAM_BOT_TOKEN is required')

    session = None
    proxy_url = (cfg.telegram_proxy_url or '').strip()
    if proxy_url:
        logger.info('Using proxy: %s', proxy_url.split('@')[-1])
        proxy_user = (cfg.telegram_proxy_user or '').strip()
        proxy_pass = (cfg.telegram_proxy_pass or '').strip()
        if proxy_user and proxy_pass:
            from urllib.parse import quote, urlparse, urlunparse

            if '://' not in proxy_url:
                proxy_url = 'http://' + proxy_url
            u = urlparse(proxy_url)
            userinfo = f"{quote(proxy_user, safe='')}:{quote(proxy_pass, safe='')}"
            netloc = f"{userinfo}@{u.hostname}{':' + str(u.port) if u.port else ''}"
            proxy_url = urlunparse((u.scheme, netloc, u.path or '', u.params, u.query, u.fragment))
        session = AiohttpSession(proxy=proxy_url)

    bot = Bot(cfg.telegram_bot_token, session=session)
    global BOT_USERNAME
    try:
        bot_info = await bot.get_me()
        BOT_USERNAME = (bot_info.username or '').strip()
    except Exception as exc:
        logger.warning('Could not fetch bot username: %s', exc)
    dp = Dispatcher()
    register_progressbar(dp)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫/–∫—ç—à–∞/—Ç.–ø.
    from src.core.background_tasks import (
        BackgroundTaskManager,
        CacheCleanupTask,
        DatabaseCleanupTask,
        DocumentStorageCleanupTask,
        HealthCheckTask,
        MetricsCollectionTask,
        SessionCleanupTask,
    )
    from src.core.cache import ResponseCache, create_cache_backend
    from src.core.health import (
        DatabaseHealthCheck,
        HealthChecker,
        OpenAIHealthCheck,
        RateLimiterHealthCheck,
        SessionStoreHealthCheck,
        SystemResourcesHealthCheck,
    )
    from src.core.metrics import init_metrics, set_system_status
    from src.core.scaling import LoadBalancer, ScalingManager, ServiceRegistry, SessionAffinity

    prometheus_port = cfg.prometheus_port
    metrics_collector = init_metrics(
        enable_prometheus=cfg.enable_prometheus,
        prometheus_port=prometheus_port,
    )
    ctx.metrics_collector = metrics_collector
    set_system_status("starting")

    logger.info("üöÄ Starting AI-Ivan (simple)")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    global db, openai_service, audio_service, rate_limiter, access_service, session_store, crypto_provider, error_handler, document_manager

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å connection pooling
    logger.info("Using advanced database with connection pooling")
    db = ctx.db or container.get(DatabaseAdvanced)
    ctx.db = db
    await db.init()

    setup_admin_commands(dp, db, ADMIN_IDS)

    cache_backend = await create_cache_backend(
        redis_url=cfg.redis_url,
        fallback_to_memory=True,
        memory_max_size=cfg.cache_max_size,
    )

    response_cache = ResponseCache(
        backend=cache_backend,
        default_ttl=cfg.cache_ttl,
        enable_compression=cfg.cache_compression,
    )
    ctx.response_cache = response_cache

    rate_limiter = ctx.rate_limiter or container.get(RateLimiter)
    ctx.rate_limiter = rate_limiter
    await rate_limiter.init()

    access_service = ctx.access_service or container.get(AccessService)
    ctx.access_service = access_service

    openai_service = ctx.openai_service or container.get(OpenAIService)
    openai_service.cache = response_cache
    ctx.openai_service = openai_service

    if cfg.voice_mode_enabled:
        audio_service = AudioService(
            stt_model=cfg.voice_stt_model,
            tts_model=cfg.voice_tts_model,
            tts_voice=cfg.voice_tts_voice,
            tts_format=cfg.voice_tts_format,
            max_duration_seconds=cfg.voice_max_duration_seconds,
            tts_voice_male=cfg.voice_tts_voice_male,
            tts_chunk_char_limit=cfg.voice_tts_chunk_char_limit,
            tts_speed=cfg.voice_tts_speed,
            tts_style=cfg.voice_tts_style,
            tts_sample_rate=cfg.voice_tts_sample_rate,
            tts_backend=cfg.voice_tts_backend,
        )
        ctx.audio_service = audio_service
        logger.info(
            "Voice mode enabled (stt=%s, tts=%s, voice=%s, male_voice=%s, format=%s, chunk_limit=%s)",
            cfg.voice_stt_model,
            cfg.voice_tts_model,
            cfg.voice_tts_voice,
            cfg.voice_tts_voice_male,
            cfg.voice_tts_format,
            cfg.voice_tts_chunk_char_limit,
        )
    else:
        audio_service = None
        ctx.audio_service = None
        logger.info("Voice mode disabled")

    session_store = ctx.session_store or container.get(SessionStore)
    ctx.session_store = session_store
    crypto_provider = ctx.crypto_provider or container.get(CryptoPayProvider)
    ctx.crypto_provider = crypto_provider

    error_handler = ErrorHandler(logger=logger)
    ctx.error_handler = error_handler

    dp.update.middleware(ErrorHandlingMiddleware(error_handler, logger=logger))

    document_manager = DocumentManager(openai_service=openai_service, settings=cfg)
    ctx.document_manager = document_manager
    logger.info("Document processing system initialized")

    refresh_runtime_globals()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º recovery handler –¥–ª—è –ë–î
    async def database_recovery_handler(exc):
        if db is not None and hasattr(db, "init"):
            try:
                await _maybe_call(db.init)
                logger.info("Database recovery completed")
            except Exception as recovery_error:
                logger.error(f"Database recovery failed: {recovery_error}")

    try:
        error_handler.register_recovery_handler(ErrorType.DATABASE, database_recovery_handler)
    except Exception:
        # –ï—Å–ª–∏ ErrorType/handler –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.debug("Recovery handler registration skipped")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    scaling_components = None
    ctx.scaling_components = None
    if cfg.enable_scaling:
        try:
            service_registry = ServiceRegistry(
                redis_url=cfg.redis_url,
                heartbeat_interval=cfg.heartbeat_interval,
            )
            await service_registry.initialize()
            await service_registry.start_background_tasks()

            load_balancer = LoadBalancer(service_registry)
            session_affinity = SessionAffinity(
                redis_client=getattr(cache_backend, "_redis", None),
                ttl=cfg.session_affinity_ttl,
            )
            scaling_manager = ScalingManager(
                service_registry=service_registry,
                load_balancer=load_balancer,
                session_affinity=session_affinity,
            )

            scaling_components = {
                "service_registry": service_registry,
                "load_balancer": load_balancer,
                "session_affinity": session_affinity,
                "scaling_manager": scaling_manager,
            }
            ctx.scaling_components = scaling_components
            logger.info("üîÑ Scaling components initialized")
        except Exception as e:
            logger.warning(f"Failed to initialize scaling components: {e}")

    # Health checks
    health_checker = HealthChecker(check_interval=cfg.health_check_interval)
    ctx.health_checker = health_checker
    health_checker.register_check(DatabaseHealthCheck(db))
    health_checker.register_check(OpenAIHealthCheck(openai_service))
    health_checker.register_check(SessionStoreHealthCheck(session_store))
    health_checker.register_check(RateLimiterHealthCheck(rate_limiter))
    if cfg.enable_system_monitoring:
        health_checker.register_check(SystemResourcesHealthCheck())
    await health_checker.start_background_checks()

    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    task_manager = BackgroundTaskManager(error_handler)
    ctx.task_manager = task_manager
    task_manager.register_task(
        DatabaseCleanupTask(
            db,
            interval_seconds=cfg.db_cleanup_interval,
            max_old_transactions_days=cfg.db_cleanup_days,
        )
    )
    task_manager.register_task(
        CacheCleanupTask(
            [openai_service], interval_seconds=cfg.cache_cleanup_interval
        )
    )
    task_manager.register_task(
        SessionCleanupTask(
            session_store, interval_seconds=cfg.session_cleanup_interval
        )
    )
    task_manager.register_task(
        DocumentStorageCleanupTask(
            document_manager.storage,
            max_age_hours=document_manager.storage.cleanup_max_age_hours,
            interval_seconds=document_manager.storage.cleanup_interval_seconds,
        )
    )

    all_components = {
        "database": db,
        "openai_service": openai_service,
        "rate_limiter": rate_limiter,
        "session_store": session_store,
        "error_handler": error_handler,
        "health_checker": health_checker,
    }
    if scaling_components:
        all_components.update(scaling_components)

    task_manager.register_task(
        HealthCheckTask(
            all_components, interval_seconds=cfg.health_check_task_interval
        )
    )
    if getattr(metrics_collector, "enable_prometheus", False):
        task_manager.register_task(
            MetricsCollectionTask(
                all_components,
                interval_seconds=cfg.metrics_collection_interval,
            )
        )
    await task_manager.start_all()
    logger.info("Started %s background tasks", len(task_manager.tasks))

    # –ó–∞–ø—É—Å–∫–∞–µ–º retention notifier
    global retention_notifier
    retention_notifier = RetentionNotifier(bot, db)
    await retention_notifier.start()
    logger.info("‚úâÔ∏è Retention notifier started")

    refresh_runtime_globals()

    # –ö–æ–º–∞–Ω–¥—ã
    base_commands = [
        BotCommand(command="start", description=f"{Emoji.ROBOT} –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="buy", description=f"{Emoji.MAGIC} –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="status", description=f"{Emoji.STATS} –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand(command="mystats", description="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),

    ]
    await bot.set_my_commands(base_commands)

    if ADMIN_IDS:
        admin_commands = base_commands + [
            BotCommand(command="ratings", description="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–∞–¥–º–∏–Ω)"),
            BotCommand(command="errors", description="üö® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ (–∞–¥–º–∏–Ω)"),
        ]
        for admin_id in ADMIN_IDS:
            try:
                await bot.set_my_commands(
                    admin_commands,
                    scope=BotCommandScopeChat(chat_id=admin_id),
                )
            except TelegramBadRequest as exc:
                logger.warning(
                    "Failed to set admin command list for %s: %s",
                    admin_id,
                    exc,
                )

    # –†–æ—É—Ç–∏–Ω–≥
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_buy, Command("buy"))
    dp.message.register(cmd_status, Command("status"))
    dp.message.register(cmd_mystats, Command("mystats"))
    dp.message.register(cmd_ratings_stats, Command("ratings"))
    dp.message.register(cmd_error_stats, Command("errors"))
    dp.message.register(cmd_askdoc, Command("askdoc"))
    dp.message.register(cmd_enddoc, Command("enddoc"))

    dp.callback_query.register(handle_ignore_callback, F.data == "ignore")
    dp.callback_query.register(handle_rating_callback, F.data.startswith("rate_"))
    dp.callback_query.register(
        handle_feedback_callback, F.data.startswith(("feedback_", "skip_feedback_"))
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.callback_query.register(handle_search_practice_callback, F.data == "search_practice")
    dp.callback_query.register(handle_prepare_documents_callback, F.data == "prepare_documents")
    dp.callback_query.register(handle_help_info_callback, F.data == "help_info")
    dp.callback_query.register(handle_my_profile_callback, F.data == "my_profile")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    dp.callback_query.register(handle_my_stats_callback, F.data == "my_stats")
    dp.callback_query.register(handle_get_subscription_callback, F.data == "get_subscription")
    dp.callback_query.register(handle_cancel_subscription_callback, F.data == "cancel_subscription")
    dp.callback_query.register(handle_buy_catalog_callback, F.data == "buy_catalog")
    dp.callback_query.register(handle_verify_payment_callback, F.data.startswith("verify_payment:"))
    dp.callback_query.register(handle_select_plan_callback, F.data.startswith("select_plan:"))
    dp.callback_query.register(handle_pay_plan_callback, F.data.startswith("pay_plan:"))
    dp.callback_query.register(handle_referral_program_callback, F.data == "referral_program")
    dp.callback_query.register(handle_copy_referral_callback, F.data.startswith("copy_referral_"))
    dp.callback_query.register(handle_back_to_main_callback, F.data == "back_to_main")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ retention —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    dp.callback_query.register(handle_retention_quick_question, F.data == "quick_question")
    dp.callback_query.register(handle_retention_show_features, F.data == "show_features")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞
    dp.callback_query.register(handle_doc_draft_start, F.data == "doc_draft_start")
    dp.callback_query.register(handle_doc_draft_cancel, F.data == "doc_draft_cancel")
    dp.callback_query.register(handle_document_processing, F.data == "document_processing")
    dp.callback_query.register(handle_document_operation, F.data.startswith("doc_operation_"))
    dp.callback_query.register(handle_ocr_upload_more, F.data.startswith("ocr_upload_more:"))
    dp.callback_query.register(handle_back_to_menu, F.data == "back_to_menu")
    dp.message.register(
        handle_doc_draft_request, DocumentDraftStates.waiting_for_request, F.text
    )
    dp.message.register(
        handle_doc_draft_request_voice, DocumentDraftStates.waiting_for_request, F.voice
    )
    dp.message.register(
        handle_doc_draft_answer, DocumentDraftStates.asking_details, F.text
    )
    dp.message.register(
        handle_doc_draft_answer_voice, DocumentDraftStates.asking_details, F.voice
    )
    dp.message.register(
        handle_document_upload, DocumentProcessingStates.waiting_for_document, F.document
    )
    dp.message.register(
        handle_photo_upload, DocumentProcessingStates.waiting_for_document, F.photo
    )

    if settings().voice_mode_enabled:
        dp.message.register(process_voice_message, F.voice)

    dp.message.register(on_successful_payment, F.successful_payment)
    dp.pre_checkout_query.register(pre_checkout)
    dp.message.register(process_question_with_attachments, F.photo | F.document)
    dp.message.register(process_question, F.text & ~F.text.startswith("/"))

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ aiogram (—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ErrorHandler –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
    async def telegram_error_handler(event: ErrorEvent):
        if error_handler:
            try:
                context = ErrorContext(
                    function_name="telegram_error_handler",
                    additional_data={
                        "update": str(event.update) if event.update else None,
                        "exception_type": type(event.exception).__name__,
                    },
                )
                await error_handler.handle_exception(event.exception, context)
            except Exception as handler_error:
                logger.error(f"Error handler failed: {handler_error}")
        logger.exception("Critical error in bot: %s", event.exception)

    dp.error.register(telegram_error_handler)

    # –õ–æ–≥ —Å—Ç–∞—Ä—Ç–∞
    set_system_status("running")
    startup_info = [
        "ü§ñ AI-Ivan (simple) successfully started!",
        f"üéû Animation: {'enabled' if USE_ANIMATION else 'disabled'}",
        f"üóÑÔ∏è Database: advanced",
        f"üîÑ Cache: {cache_backend.__class__.__name__}",
        f"üìà Metrics: {'enabled' if getattr(metrics_collector, 'enable_prometheus', False) else 'disabled'}",
        f"üè• Health checks: {len(health_checker.checks)} registered",
        f"‚öôÔ∏è Background tasks: {len(task_manager.tasks)} running",
        f"üîÑ Scaling: {'enabled' if scaling_components else 'disabled'}",
    ]
    for info in startup_info:
        logger.info(info)
    if prometheus_port:
        logger.info(
            f"üìä Prometheus metrics available at http://localhost:{prometheus_port}/metrics"
        )

    try:
        logger.info("üöÄ Starting bot polling...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("üõë AI-Ivan stopped by user")
        set_system_status("stopping")
    except Exception as e:
        logger.exception("üí• Fatal error in main loop: %s", e)
        set_system_status("stopping")
        raise
    finally:
        logger.info("üîß Shutting down services...")
        set_system_status("stopping")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º retention notifier
        if retention_notifier:
            try:
                await retention_notifier.stop()
            except Exception as e:
                logger.error(f"Error stopping retention notifier: {e}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        try:
            await task_manager.stop_all()
        except Exception as e:
            logger.error(f"Error stopping background tasks: {e}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health checks
        try:
            await health_checker.stop_background_checks()
        except Exception as e:
            logger.error(f"Error stopping health checks: {e}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        if scaling_components:
            try:
                await scaling_components["service_registry"].stop_background_tasks()
            except Exception as e:
                logger.error(f"Error stopping scaling components: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ sync/async close)
        services_to_close = [
            ("Bot session", lambda: bot.session.close()),
            ("Database", lambda: getattr(db, "close", None) and db.close()),
            ("Rate limiter", lambda: getattr(rate_limiter, "close", None) and rate_limiter.close()),
            (
                "OpenAI service",
                lambda: getattr(openai_service, "close", None) and openai_service.close(),
            ),
            (
                "Response cache",
                lambda: getattr(response_cache, "close", None) and response_cache.close(),
            ),
        ]
        for service_name, close_func in services_to_close:
            try:
                await _maybe_call(close_func)
                logger.debug(f"‚úÖ {service_name} closed")
            except Exception as e:
                logger.error(f"‚ùå Error closing {service_name}: {e}")

        logger.info("üëã AI-Ivan shutdown complete")
